
@inproceedings{graziano2016,
  title={Subverting Operating System Properties Through Evolutionary DKOM Attacks.},
  author={Graziano, Mariano and Flore, Lorenzo and Lanzi, Andrea and Balzarotti, Davide},
  booktitle={DIMVA},
  pages={3--24},
  year={2016},
  organization={Springer}
}

@article{peck2016,
  title={Android Security Analysis Final Report},
  author={Peck, Michael and Kini, Gananand and Pyles, Andrew},
  year={2016},
 month={3},
 pages={32},
  organization={Mitre}, note = {\url{https://www.mitre.org/sites/default/files/publications/pr-16-0202-android-security-analysis-final-report.pdf}},
}

@article{vecchiato2016perils,
  title={The Perils of Android Security Configuration},
  author={Vecchiato, Daniel and Vieira, Marco and Martins, Eliane},
  journal={Computer},
  volume={49},
  number={6},
  pages={15--21},
  year={2016},
  publisher={IEEE}
}
@article{bhardwaj2016android,
  title={Android and iOS Security-An Analysis and Comparison Report},
  author={Bhardwaj, Akshay and Pandey, Kailash and Chopra, Roopam},
  journal={Int'l J. Info. Sec. \& Cybercrime},
  volume={5},
  pages={30},
  year={2016},
  publisher={HeinOnline}
}
@inproceedings{joshi2016android,
  title={Android smartphone vulnerabilities: A survey},
  author={Joshi, Jignesh and Parekh, Chandresh},
  booktitle={Advances in Computing, Communication, \& Automation (ICACCA)(Spring), International Conference on},
  pages={1--5},
  year={2016},
  organization={IEEE}
}
@inproceedings{alshahrani2016mitigation,
  title={Mitigation Model to Improve Android Security},
  author={Alshahrani, Hani and Alshehri, Ali and Alharthi, Raed and Fu, Huirong and Zhu, Ye},
  booktitle={Proceedings of the International Conference on Security and Management (SAM)},
  pages={274},
  year={2016},
  organization={The Steering Committee of The World Congress in Computer Science, Computer Engineering and Applied Computing (WorldComp)}
}
@inproceedings{jain2016android,
  title={Android security: Permission based attacks},
  author={Jain, Arushi and others},
  booktitle={Computing for Sustainable Global Development (INDIACom), 2016 3rd International Conference on},
  pages={2754--2759},
  year={2016},
  organization={IEEE}
}

@article{cai2016understanding,
  title={Understanding Application Behaviours for Android Security: A Systematic Characterization},
  author={Cai, Haipeng and Ryder, Barbara},
  journal={Computer Science Technical Reports},
  year={2016},
  note = {\url{https://vtechworks.lib.vt.edu/bitstream/handle/10919/71678/cairyder_techreport.pdf?sequence=1&isAllowed=y}},
  publisher={Department of Computer Science, Virginia Polytechnic Institute \& State University}
}

@article{M0Droid2015,
author = {Mohsen Damshenas and Ali Dehghantanha and Kim-Kwang Raymond Choo and Ramlan Mahmud},
title = {M0Droid: An Android Behavioral-Based Malware Detection Model},
journal = {Journal of Information Privacy and Security},
volume = {11},
number = {3},
pages = {141-157},
year = {2015},
doi = {10.1080/15536548.2015.1073510},
URL = {http://www.tandfonline.com/doi/abs/10.1080/15536548.2015.1073510},
abstract = { Anti-mobile malware has attracted the attention of the
                  research and security community in recent years due
                  to the increasing threat of mobile malware and the
                  significant increase in the number of mobile
                  devices. M0Droid, a novel Android behavioral-based
                  malware detection technique comprising a lightweight
                  client agent and a server analyzer, is proposed
                  here. The server analyzer generates a signature for
                  every application (app) based on the system call
                  requests of the app (termed app behavior) and
                  normalizes the generated signature to improve
                  accuracy. The analyzer then uses Spearman’s rank
                  correlation coefficient to identify malware with
                  similar behavior signatures in a previously
                  generated blacklist of malwares signatures. The main
                  contribution of this research is the proposed method
                  to generate standardized mobile malware signatures
                  based on their behavior and a method for comparing
                  generated signatures. Preliminary experiments
                  running M0Droid against Genome dataset and APK
                  submissions of Android client agent or developers
                  indicate a detection rate of 60.16\% with 39.43\%
                  false-positives and 0.4\% false-negatives at a
                  threshold value of 0.90. Increasing or decreasing
                  the threshold value can adjust the strictness of
                  M0Droid. As the threshold value increases, the
                  false-negative rate will also increase, and as the
                  threshold value decreases, the detection and
                  false-positive rates will also decrease. The authors
                  hope that this research will contribute towards
                  Android malware detection techniques. }
}

@inproceedings{ikram2016analysis,
  title={An Analysis of the Privacy and Security Risks of Android VPN Permission-enabled Apps},
  author={Ikram, Muhammad and Vallina-Rodriguez, Narseo and Seneviratne, Suranga and Kaafar, Mohamed Ali and Paxson, Vern},
  booktitle={Proceedings of the 2016 ACM on Internet Measurement Conference},
  pages={349--364},
  year={2016},
  organization={ACM},
  note = {\url{http://www.icir.org/vern/papers/vpn-apps-imc16.pdf}},
}

@article{jeong2016selective,
  title={Selective Management of System-level Access Permission in Android-based Application},
  author={Jeong, Jongmun and Lee, Hoon and Hwang, Mintae},
  journal={Journal of the Korea Institute of Information and Communication Engineering},
  volume={20},
  number={1},
  pages={87--93},
  year={2016},
  publisher={The Korean Institute of Information and Commucation Engineering}
}

@article{lee2016protecting,
  title={Protecting data on android platform against privilege escalation attack},
  author={Lee, Hwan-Taek and Kim, Dongjin and Park, Minkyu and Cho, Seong-je},
  journal={International Journal of Computer Mathematics},
  volume={93},
  number={2},
  pages={401--414},
  year={2016},
  publisher={Taylor \& Francis}
}

@article{zhang2016identifying,
  title={Identifying and Analyzing Security Risks in Android Application Components},
  author={Zhang, Ming},
  journal={International Journal of Security and Its Applications},
  volume={10},
  number={9},
  pages={165--174},
  year={2016},
  note = {\url{http://www.sersc.org/journals/IJSIA/vol10_no9_2016/17.pdf}},
}

@article{na2016mandatory,
  title={Mandatory Access Control for Android Application Security},
  author={Na, June-sung and Kim, Do-Yun and Pak, Wooguil and Choi, Young-June},
  journal={Journal of KIISE},
  volume={43},
  number={3},
  pages={275--288},
  year={2016},
  publisher={Korean Institute of Information Scientists and Engineers}
}
@article{hung2016design,
  title={On the Design of A Flexible Reputation Chain For Smartphone Applications},
  author={Hung, Shih-Chen},
  year={2016}
}

@article{yuan2016droid,
  title={Droid Detector: Android Malware Characterization and Detection Using Deep LearningDroid Detector: Android Malware Characterization and Detection Using Deep Learning},
  author={Yuan, Zhenlong and Lu, Yongqiang and Xue, Yibo},
  journal={Tsinghua Science and Technology},
  volume={21},
  number={01},
  pages={116--125},
  year={2016}
}

@article{shing2016smartphone,
  title={Smartphone Security Risks: Android},
  author={Shing, Lee Pin and Shing, Lee Hur and Shing, Chen-Chi and Chiang, Meng Chu and Yang, Che Wei and Lu, Tzu-Chieh and Shing, Marn-Ling},
  year={2016},
  note = {\url{http://www.ijeee.net/uploadfile/2016/0831/20160831074041344.pdf}},
}

@phdthesis{ren2016,
  title={A Study of Selected Issues in Android Security},
  author={Ren, Chuangang},
  year={2016},
  month={8},
  pages = {123},
  school={The Pennsylvania State University},
  note = {\url{https://etda.libraries.psu.edu/files/final_submissions/12546}},
  annote = {The dissertation of Chuangang Ren was reviewed and
                  approvedú by the following: Peng Liu Professor of
                  College of Information Sciences and Technology
                  Co-Chair of Committee Sencun Zhu Associate Professor
                  of Computer Science and Engineering Dissertation
                  Advisor, Co-Chair of Committee Wang-Chien Lee
                  Associate Professor of Computer Science and
                  Engineering Minghui Zhu Assistent Professor of
                  Electrical Engineering Chitaranjan Das Professor of
                  Computer Science and Engineering Head of the
                  Department of Computer Science and Engineering ;;
Abstract
Mobile devices such as smartphones have become an integral part of society today,
shaping people’s daily life, changing the landscape of how business operate and how
industries are powered today. However, the unprecedented popularity of mobile
devices introduces a concerning side e!ect, a dramatically increasing number of
security threats is posing serious risks to the security of mobile systems and the
applications. Notably, one of the most successful mobile systems, Android, has
exposed a plethora of vulnerabilities which are actively exploited by a large number
of potentially harmful apps (malware, adwares, risk-wares, etc.), most of which are
distributed in under-scrutinized third-party Android markets.
Mitigating the security threats to Android is non-trivial. There has been
considerable e!orts in securing Android to achieve the following two complimentary
goals: (1) Market-scale detection and identification of problematic apps in an
e"cient manner, and (2) discovery, analysis of the Android system vulnerabilities,
and defense measures against the enabled attacks.
In this dissertation, we propose techniques and approaches to solve specific
problems in the above two aspects respectively, providing the step stones towards
finally achieving these two goals. Specifically, we first present a novel software
watermarking scheme, namely Droidmarking, that can e"ciently and e!ectively
impede the prevalent software plagiarism (a.k.a app repackaging) problem in the
Android markets. Second, we systematically study and propose a new prevalent
Android system vulnerability, which, once exploited by an attacker, can lead to
serious security breaches of integrity, confidentiality and availability of the graphic
user interface (GUI) on an Android device. Finally, we devise a comprehensive
and practical solution to protect the GUI sub-system in Android. The defense is
able to defeat all know GUI attacks while preserving the original user experience of
Android. We plan to further explore Android system and app security towards a
more secure ecosystem for Android.                  },
}

@article{jha2016analysis,
  title={Analysis of Permission-based Security in Android through Policy Expert, Developer, and End User Perspectives},
  author={Jha, Ajay Kumar and Lee, Woo Jin},
  journal={Journal of Universal Computer Science},
  volume={22},
  number={4},
  pages={459--474},
  year={2016},
  note = {\url{https://pdfs.semanticscholar.org/78ed/84bd91c001be71d6ac37c6971cd65a2282df.pdf}},
}

@article{cho2016study,
  title={A Study of Security Checks for Android Least Privilege-focusing on mobile financial services},
  author={Cho, Byung-chul and Choi, Jin-young},
  journal={Journal of Internet Computing and Services},
  volume={17},
  number={1},
  pages={91--99},
  year={2016},
  publisher={Korean Society for Internet Information}
}
@incollection{cam2016android,
  title={Android Security Analysis Based on Inter-application Relationships},
  author={Cam, Nguyen Tan and Van Hau, Pham and Nguyen, Tuan},
  booktitle={Information Science and Applications (ICISA) 2016},
  pages={689--700},
  year={2016},
  publisher={Springer}
}
@article{acar2016,
  title={SoK: Lessons Learned From Android Security Research For Appified Software Platforms},
  author={Acar, Yasemin and Backes, Michael and Bugiel, Sven and Fahl, Sascha and McDaniel, Patrick and Smith, Matthew},
  year={2016}, note = {\url{https://infsec.cs.uni-saarland.de/~bugiel/publications/pdfs/androidsok-sp16.pdf}},
}

@inproceedings{rodr2016,
  title={Improving Android Mobile Application Development by Dissecting Malware Analysis Data},
  author={Rodr, A and Escamilla-Ambrosio, PJ and Aguirre-Anaya, E and Acosta-Bermejo, R and Villa-Vargas, LA and others},
  booktitle={2016 4th International Conference in Software Engineering Research and Innovation (CONISOFT)},
  pages={81--86},
  year={2016},
  organization={IEEE}
}

@article{rudd2016,
  title={A Survey of Stealth Malware: Attacks, Mitigation Measures, and Steps Toward Autonomous Open World Solutions},
  author={Rudd, Ethan and Rozsa, Andras and Gunther, Manuel and Boult, Terrance},
  journal={arXiv preprint arXiv:1603.06028},
  year={2016}
}
@article{rutkowska2006rootkits,
  title={Rootkits vs. stealth by design malware},
  author={Rutkowska, Joanna},
  journal={Black Hat, Europe},
  year={2006}, note = {slides \url{https://www.blackhat.com/presentations/bh-europe-06/bh-eu-06-Rutkowska.pdf}},
}

@inproceedings{richer2015,
  title={On the Effectiveness of Virtualisation Assisted View Comparison for Rootkit Detection},
  author={Richer, Toby J and Neale, Grant and Osborne, Grant},
  booktitle={Proceedings of the 13th Australasian Information Security Conference (AISC 2015)},
  volume={27},
  pages={30},
  year={2015}
}

@TechReport{metatron2014,
  title =       { The Rise and Fall of the Open Source Mobile },
  author =        {Unknown Maxigas},
  institution =  {\url{http://uoc.edu/}},
  year =         {2016},
  OPTkey =       {},
  OPTtype =      {},
  OPTnumber =    {},
  OPTaddress =   {},
  OPTmonth =     {},
  note = {\url{https://relay70.metatron.ai/the-rise-and-fall-of-the-open-source-mobile/}},
  OPTannote =    {}
}

@inproceedings{lian2015,
  title={Too LeJIT to Quit: Extending JIT Spraying to ARM},
  author={Lian, Wilson and Shacham, Hovav and Savage, Stefan},
  booktitle={NDSS},
  year={2015},
  organization={cs.ucsd.edu},
  abstract ={ Abstract -- In the face of widespread DEP and ASLR
                  deployment, JIT spraying brings together the best of
                  code injection and code reuse attacks to defeat both
                  defenses. However, to date, JIT spraying has been an
                  x86-only attack thanks to its reliance on
                  variable-length, unaligned instructions. In this
                  paper, we finally extend JIT spraying to a RISC
                  architecture by introducing a novel technique called
                  gadget chaining, whereby high level code invokes
                  short sequences of unintended and intended
                  instructions called gadgets just like a function
                  call. We demonstrate gadget chaining in an
                  end-to-end JIT spraying attack against WebKit’s
                  JavaScriptCore JS engine on ARM and found that
                  existing JIT spray mitigations that were sufficient
                  against the x86 version of the JIT spraying attack
                  fall short in the face of gadget chaining.  },
}

@article{kang2015,
  title={A Study on Security Technology using Mobile Virtualization TYPE-I},
  author={Kang, Yong-Ho and Jang, Chang-Bok and Kim, Joo-Man},
  journal={The Journal of The Institute of Internet, Broadcasting and Communication},
  volume={15},
  number={6},
  pages={1--9},
  year={2015},
  publisher={The institute Of Webcasting, Internet And Telecommunication}
}

@article{Karpushonak2012,
  title={Code Injection in Android},
  author={Andrei Karpushonak},
  journal={Devoxx 2012 in Antwerp, Belgium},
  year={2012},
  note = {\url{https://github.com/miktam/Disabler}, \url{  https://www.youtube.com/watch?v=hMKTGJEYFS4}},
}

@article{hypori2016,
  title={Hypori Virtual Mobile Infrastructure Platform},
  author={Hypori Hypori},
  journal={web},
  year={2016},
  publisher={}, note = {\url{http://www.hypori.com/}},
}
@article{wessel2015,
  title={Improving mobile device security with operating system-level virtualization},
  author={Wessel, Sascha and Huber, Manuel and Stumpf, Frederic and Eckert, Claudia},
  journal={Computers \& Security},
  year={2015},
  publisher={Elsevier}
}

@inproceedings{lengyel2014,
  title={Multi-tiered security architecture for arm via the virtualization and security extensions},
  author={Lengyel, Tamas K and Kittel, Thomas and Pfoh, Jonas and Eckert, Claudia},
  booktitle={2014 25th International Workshop on Database and Expert Systems Applications},
  pages={308--312},
  year={2014},
  organization={IEEE}, note = {\url{http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.684.6597&rep=rep1&type=pdf}},
}

@article{chen2015,
  title={A lightweight virtualization solution for Android devices},
  author={Chen, Wenzhi and Xu, Lei and Li, Guoxi and Xiang, Yang},
  journal={IEEE Transactions on Computers},
  volume={64},
  number={10},
  pages={2741--2751},
  year={2015},
  publisher={IEEE}
}
@article{shuja2016,
  title={A Survey of Mobile Device Virtualization: Taxonomy and State of the Art},
  author={Shuja, Junaid and Gani, Abdullah and Bilal, Kashif and Khan, Atta Ur Rehman and Madani, Sajjad A and Khan, Samee U and Zomaya, Albert Y},
  journal={ACM Computing Surveys (CSUR)},
  volume={49},
  number={1},
  pages={1},
  year={2016},
  publisher={ACM}, note = {\url{https://www.researchgate.net/profile/Junaid_Shuja2/publication/291831055_A_Survey_of_Mobile_Device_Virtualization_Taxonomy_and_State-of-the-Art/links/56b2e3f008ae56d7b06cdadd.pdf}},
}

@article{xu2015,
  title={The study and evaluation of ARM-Based mobile virtualization},
  author={Xu, Lei and Wang, Zonghui and Chen, Wenzhi},
  journal={International Journal of Distributed Sensor Networks},
  volume={2015},
  pages={1},
  year={2015},
  publisher={Taylor \& Francis, Inc.}, note = {\url{http://dsn.sagepub.com/content/11/7/310308.full.pdf}},
}

@inproceedings{brakensiek2008,
  title={Virtualization as an enabler for security in mobile devices},
  author={Brakensiek, J{\"o}rg and Dr{\"o}ge, Axel and Botteck, Martin and H{\"a}rtig, Hermann and Lackorzynski, Adam},
  booktitle={Proceedings of the 1st workshop on Isolation and integration in embedded systems},
  pages={17--22},
  year={2008},
  organization={ACM}
}

@inproceedings{lange2011,
  title={L4Android: A Generic Operating System Framework for Secure Smartphones},
  author={Lange, Matthias and Liebergeld, Steffen and Lackorzynski, Adam and Warg, Alexander and Peter, Michael},
  booktitle={Proceedings of the 1st ACM workshop on Security and privacy in smartphones and mobile devices},
  pages={39--50},
  year={2011},
  organization={ACM}
}

@inproceedings{varanasi2011,
  title={Hardware-supported virtualization on ARM},
  author={Varanasi, Prashant and Heiser, Gernot},
  booktitle={Proceedings of the Second Asia-Pacific Workshop on Systems},
  pages={11},
  year={2011},
  organization={ACM}
}

@inproceedings{seo2010,
  title={Research on System Virtualization using Xen Hypervisor for ARM based secure mobile phones},
  author={Seo, Sangwon},
  booktitle={Seminar Security in Telecommunications, Berlin University of Technology, Korea Advanced Institute of Science and Technology},
  year={2010},
  organization={Citeseer}
}

@inproceedings{bickford2011,
  title={Security versus energy tradeoffs in host-based mobile malware detection},
  author={Bickford, Jeffrey and Lagar-Cavilla, H Andr{\'e}s and Varshavsky, Alexander and Ganapathy, Vinod and Iftode, Liviu},
  booktitle={Proceedings of the 9th international conference on Mobile systems, applications, and services},
  pages={225--238},
  year={2011},
  organization={ACM}
}

@inproceedings{andrus2011,
  title={Cells: A Virtual Mobile Smartphone Architecture},
  author={Andrus, Jeremy and Dall, Christoffer and Hof, Alexander Van't and Laadan, Oren and Nieh, Jason},
  booktitle={Proceedings of the Twenty-Third ACM Symposium on Operating Systems Principles},
  pages={173--187},
  year={2011},
  organization={ACM}
}

@article{barr2010,
  title={The VMware Mobile Virtualization Platform: Is that a Hypervisor in Your Pocket?},
  author={Barr, Ken and Bungale, Prashanth and Deasy, Stephen and Gyuris, Viktor and Hung, Perry and Newell, Craig and Tuch, Harvey and Zoppis, Bruno},
  journal={ACM SIGOPS Operating Systems Review},
  volume={44},
  number={4},
  pages={124--135},
  year={2010},
  publisher={ACM}
}

@inproceedings{aafer2016,
  title={Harvesting Inconsistent Security Configurations in Custom Android ROMs via Differential Analysis},
  author={Aafer, Yousra and Zhang, Xiao and Du, Wenliang},
  booktitle={Proc. 25th USENIX Security Symposium (SEC’16), USENIX Association},
  year={2016}, note = {\url{https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_aafer.pdf}},
}

@inproceedings{McDaniel2016,
  title={Learning from Ourselves: Where are we and where can we go in
                  Mobile Systems Security?},
  author={Patrick McDaniel},
  booktitle={SPW2016},
  year={2016},
  organization={IEEE},
  note = {\url{http://ieee-security.org/TC/SPW2016/MoST/slides/keynote.pdf}},
}


@article{bugiel2011,
  title={Xmandroid: A new android evolution to mitigate privilege escalation attacks},
  author={Bugiel, Sven and Davi, Lucas and Dmitrienko, Alexandra and Fischer, Thomas and Sadeghi, Ahmad-Reza},
  journal={Technische Universit{\"a}t Darmstadt, Technical Report TR-2011-04},
  year={2011}, note = {\url{https://www.ukp.tu-darmstadt.de/fileadmin/user_upload/Group_TRUST/PubsPDF/xmandroid.pdf}},
}

@inproceedings{seo2016,
  title={FLEXDROID: Enforcing In-App Privilege Separation in Android},
  author={Seo, Jaebaek and Kim, Daehyeok and Cho, Donghyun and Kim, Taesoo and Shin, Insik},
  year={2016}, note = {\url{https://taesoo.gtisc.gatech.edu/pubs/2016/seo:flexdroid.pdf}},
  booktitle={NDSS},
  month={February},
}

@MastersThesis{krishnan2014,
  title={Android Hypovisors: Securing Mobile Devices through
                  High-Performance, Light-Weight, Subsystem Isolation
                  with Integrity Checking and Auditing Capabilities},
  author={Krishnan, Neelima},
  year={2014},
  school={Virginia Tech}, note = {\url{https://vtechworks.lib.vt.edu/bitstream/handle/10919/51129/Krishnan_N_T_2014.pdf?sequence=1&isAllowed=y}},
}

@article{feng2016,
  title={BinderCracker: Assessing the Robustness of Android System Services},
  author={Feng, Huan and Shin, Kang G},
  journal={arXiv preprint arXiv:1604.06964},
  year={2016}, note = {\url{https://arxiv.org/pdf/1604.06964.pdf}},
}

@TechReport{AndroidVTS2016,
  author =       {GitHub AuthorUnknown},
  title =        {Android Vulnerability Test Suite},
  institution =  {},
  year =         {},
  OPTkey =       {},
  OPTtype =      {},
  OPTnumber =    {},
  OPTaddress =   {},
  OPTmonth =     {},
  note =      {https://github.com/AndroidVTS/android-vts},
  OPTannote =    {}
}



@TechReport{Wu2016,
  author =       {David Wu},
  title =        {The Firewall Android Deserves: A Context-Aware Kernel
                  Message Filter and Modifier},
  institution =  {www.summercon.org},
  year =         {2016},
  OPTkey =       {},
  OPTtype =      {},
  OPTnumber =    {},
  OPTaddress =   {},
  OPTmonth =     {July},
  note =      {http://www.summercon.org/presentations.html},
  annote =    { Marshmallow introduced a feature users sorely needed:
                  dynamic permissions. We take this a few steps
                  further by hooking Android's Binder IPC system to
                  give users fine-grained control over messages passed
                  between applications. Because every message in
                  Android passes through Binder, we have all the keys
                  to all the locks. I'll cover how we hooked Binder to
                  modify camera and microphone data, restrict
                  permissions based on environmental context, steal
                  kernel messages and reinsert them (like Netfilter),
                  and allow regex-like parsing of all messages in
                  Android.  }
}

@inproceedings{shao2016misuse,
  title={The Misuse of Android Unix Domain Sockets and Security Implications},
  author={Shao, Yuru and Ott, Jason and Jia, Yunhan Jack and Qian, Zhiyun and Mao, Z Morley},
  booktitle={Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security},
  pages={80--91},
  year={2016},
  organization={ACM},
  note = {\url{http://web.eecs.umich.edu/~yurushao/pubs/sinspector_ccs2016.pdf}},
  annote = { Yuru Shao† , Jason Ott∗ , Yunhan Jack Jia† , Zhiyun Qian∗
                  , Z. Morley Mao† †University of Michigan,
                  ∗University of California, Riverside {yurushao,
                  jackjia, zmao}@umich.edu, jott002@ucr.edu,
                  zhiyunq@cs.ucr.edu ABSTRACT In this work, we conduct
                  the first systematic study in understanding the
                  security properties of the usage of Unix domain
                  sockets by both Android apps and system daemons as
                  an IPC (Inter-process Communication) mechanism,
                  especially for cross-layer communications between
                  the Java and native layers. We propose a tool called
                  SInspector to expose potential security
                  vulnerabilities in using Unix domain sockets through
                  the process of identifying socket addresses,
                  detecting authentication checks, and performing data
                  flow analysis. Our in-depth analysis revealed some
                  serious vulnerabilities in popular apps and system
                  daemons, such as root privilege escalation and
                  arbitrary file access. Based on our findings, we
                  propose countermeasures and improved practices for
                  utilizing Unix domain sockets on Android.  },
}

@article{vepsalainen2016,
  title={Application security: In Android application development},
  author={Vepsalainen, Aleksi and others},
  year={2016},
  publisher={Jyvaskylan Ammattikorkeakoulu},
  note = {\url{http://www.theseus.fi/bitstream/handle/10024/112009/Vepsalainen Aleksi.pdf?sequence=1}},
  annote={Bachelor’s thesis May 2016 Technology, communication and
                  transport Degree Programme in Software Engineering
                  jamk.fi },
}

@article{yuan2016droiddetector,
  title={Droiddetector: android malware characterization and detection using deep learning},
  author={Yuan, Zhenlong and Lu, Yongqiang and Xue, Yibo},
  journal={Tsinghua Science and Technology},
  volume={21},
  number={1},
  pages={114--123},
  year={2016},
  publisher={TUP},
  note = {\url{http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7399288}},
}

@inproceedings{shao2016kratos,
  title={Kratos: Discovering Inconsistent Security Policy Enforcement in the Android Framework},
  author={Shao, Yuru and Ott, Jason and Chen, Qi Alfred and Qian, Zhiyun and Mao, Z Morley},
  booktitle={Proc. 23rd Annual Network and Distributed System Security Symposium (NDSS’16). ISOC},
  year={2016},
  note = {\url{https://www.internetsociety.org/sites/default/files/blogs-media/kratos-discovering-inconsistent-security-policy-enforcement-android-framework_0.pdf}},
}

@article{song2016towards,
  title={Towards fast repackaging and dynamic authority management on Android},
  author={Song, Jun and Zhang, Mohan and Han, Chunling and Wang, Kaixin and Zhang, Huanguo},
  journal={Wuhan University Journal of Natural Sciences},
  volume={21},
  number={1},
  pages={1--9},
  year={2016},
  publisher={Springer}
}

@inproceedings{carter2016curiousdroid,
  title={CuriousDroid: Automated User Interface Interaction for Android Application Analysis Sandboxes},
  author={Carter, Patrick and Mulliner, Collin and Lindorfer, Martina and Robertson, William and Kirda, Engin},
  booktitle={Proceedings of the 20th International Conference on Financial Cryptography and Data Security (FC)},
  year={2016},
  note = {\url{http://martina.lindorfer.in/files/papers/curiousdroid_fc16.pdf}},
  annote = {Northeastern University, Boston, MA, USA
{pdc,crm,wkr,ek}@ccs.neu.edu
2 SBA Research, Vienna, Austria
mlindorfer@iseclab.org
Abstract. Mobile computing has experienced enormous growth in market
share and computational power in recent years. As a result, mobile
malware is becoming more sophisticated and more prevalent, leading to
research into dynamic sandboxes as a widespread approach for detecting
malicious applications. However, the event-driven nature of Android
applications renders critical the capability to automatically generate deterministic
and intelligent user interactions to drive analysis subjects
and improve code coverage. In this paper, we present CuriousDroid, an
automated system for exercising Android application user interfaces in
an intelligent, user-like manner. CuriousDroid operates by decomposing
application user interfaces on-the-fly and creating a context-based model
for interactions that is tailored to the current user layout. We integrated
CuriousDroid with Andrubis, a well-known Android sandbox, and conducted
a large-scale evaluation of 38,872 applications taken from different
data sets. Our evaluation demonstrates significant improvements in both
end-to-end sample classification as well as increases in the raw number
of elicited behaviors at runtime.
Keywords: User Interface Analysis, Android, Dynamic Analysis},
}

@article{mao2016automatic,
  title={Automatic permission inference for hybrid mobile apps},
  author={Mao, Jian and Ma, Hanjun and Chen, Yue and Jia, Yaoqi and Liang, Zhenkai},
  journal={Journal of High Speed Networks},
  volume={22},
  number={1},
  pages={55--64},
  year={2016},
  publisher={IOS Press}
}

@inproceedings{grover2017security,
  title={Security Analysis of OnlineCabBooking Android Application},
  author={Grover, Nishant and Saxena, Jyotsna and Sihag, Vikas},
  booktitle={Proceedings of the International Conference on Data Engineering and Communication Technology},
  pages={603--611},
  year={2017},
  organization={Springer}
}

@article{leem2016,
  title={Design of a Work Process and Implementation of a Prototype for the Development of an Automation Tool for Android Application Vulnerability Inspection},
  author={Leem, Da-Woon and Jung, Hyun-Ju and Hwang, Moon-Sung and Shim, Jung-Ah and Kwon, Hyun-Jung},
  journal={International Journal of Software Engineering and Its Applications},
  volume={10},
  number={3},
  pages={29--38},
  year={2016},
  note = {\url{http://www.sersc.org/journals/IJSEIA/vol10_no3_2016/3.pdf}},
}

@inproceedings{malik2016,
  title={CREDROID: Android Malware Detection by Network Traffic Analysis},
  author={Malik, Jyoti and Kaushal, Rishabh},
  booktitle={Proceedings of the 1st ACM Workshop on Privacy-Aware Mobile Computing},
  pages={28--36},
  year={2016},
  organization={ACM},
  annote ={ Jyoti Malik Indira Gandhi Delhi Technical University for
                  Women, New Delhi, India Rishabh Kaushal Indira
                  Gandhi Delhi Technical University for Women, New
                  Delhi, India },
}

@inproceedings{you2016reference,
  title={Reference hijacking: patching, protecting and analyzing on unmodified and non-rooted android devices},
  author={You, Wei and Liang, Bin and Shi, Wenchang and Zhu, Shuyang and Wang, Peng and Xie, Sikefu and Zhang, Xiangyu},
  booktitle={Proceedings of the 38th International Conference on Software Engineering},
  pages={959--970},
  year={2016},
  organization={ACM}
}

@article{sun2016monitoring,
  title={A monitoring method of sensitive calls based on the Android platform software behavior},
  author={Sun, Cheng and Qin, Sujuan},
  year={2016}
}

@inproceedings{buhov2016pin,
  title={Pin it! Improving Android network security at runtime},
  author={Buhov, Damjan and Huber, Markus and Merzdovnik, Georg and Weippl, Edgar},
  booktitle={IFIP Networking Conference (IFIP Networking) and Workshops, 2016},
  pages={297--305},
  year={2016},
  organization={IFIP}
}

@inproceedings{yagemann2016intentio,
  title={Intentio Ex Machina: Android Intent Access Control via an Extensible Application Hook},
  author={Yagemann, Carter and Du, Wenliang},
  booktitle={European Symposium on Research in Computer Security},
  pages={383--400},
  year={2016},
  organization={Springer},
  note = {\url{http://surface.syr.edu/cgi/viewcontent.cgi?article=1495&context=etd}},
  annote ={MS Thesis},
}

@article{fratantonio2016triggerscope,
  title={TriggerScope: Towards Detecting Logic Bombs in Android Applications},
  author={Fratantonio, Yanick and Bianchi, Antonio and Robertson, William and Kirda, Engin and Kruegel, Christopher and Vigna, Giovanni},
  year={2016}
}

@article{singh2016analysis,
  title={Analysis of Malicious Behavior of Android Apps},
  author={Singh, Pooja and Tiwari, Pankaj and Singh, Santosh},
  journal={Procedia Computer Science},
  volume={79},
  pages={215--220},
  year={2016},
  publisher={Elsevier},
  note = {\url{http://ac.els-cdn.com/S1877050916001599/1-s2.0-S1877050916001599-main.pdf?_tid=e7c497c0-aea5-11e6-a8e1-00000aab0f27&acdnat=1479594006_cabbc784ae5a01e52b51bfef5ff685d4}},
  annote = {Pooja Singh, Pankaj Tiwari, Dr. Santosh Singh AMET
                  Univeristy,Chennai JJT University ,Rajasthan},
}

@inproceedings{obiri2016data,
  title={Data security of Android applications},
  author={Obiri-Yeboah, Jesse and Qi, Man},
  booktitle={Natural Computation, Fuzzy Systems and Knowledge Discovery (ICNC-FSKD), 2016 12th International Conference on},
  pages={1716--1721},
  year={2016},
  organization={IEEE}
}

@article{backes2016artist,
  title={ARTist: The Android Runtime Instrumentation and Security Toolkit},
  author={Backes, Michael and Bugiel, Sven and Schranz, Oliver and von Styp-Rekowsky, Philipp and Weisgerber, Sebastian},
  journal={arXiv preprint arXiv:1607.06619},
  year={2016},
  note = {\url{https://arxiv.org/pdf/1607.06619.pdf}},
}

@inproceedings{aafer2016harvesting,
  title={Harvesting Inconsistent Security Configurations in Custom Android ROMs via Differential Analysis},
  author={Aafer, Yousra and Zhang, Xiao and Du, Wenliang},
  booktitle={USENIX SECURITY},
  year={2016},
  note = {\url{https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_aafer.pdf}},
}

@incollection{hein2016,
  title={Characterization of Malware Detection on Android Application},
  author={Hein, Chit La Pyae Myo and Myo, Khin Mar},
  booktitle={Genetic and Evolutionary Computing},
  pages={113--124},
  year={2016},
  publisher={Springer},
  annote ={Abstract Mobile malware performs malicious activities like
                  stealing private information, sending message SMS,
                  reading contacts and can even harm by exploiting
                  data. Malwares are spreading around the world and
                  infecting not only for end users but also for large
                  organizations and service providers. Malware
                  classification is a vital component and works
                  together with malware identification to prepare the
                  right and effective malware antidote. Not only
                  malware classification but also malware
                  characterization is also important to inform the
                  user and install the malware application, because
                  user are not aware to install the several
                  application of their device. Android application
                  requires several permissions to work. An essential
                  step to install an Android application into a mobile
                  device is to allow all permissions requested by the
                  application. An application is being installed; the
                  system prompts a list of permissions requested by
                  the application and asks the user to confirm the
                  installation. Although Google announced that a
                  security check mechanism is applied to each
                  application uploaded to their market, the open
                  design of the Android operating system still allows
                  a user to install any application downloaded from an
                  unsafe source. Nevertheless, the permission list is
                  still the minimal defense for a user to detect
                  whether an application could be harmful. Therefore
                  in my research work, characterization is still
                  needed to be completed. Malware characterization
                  will also be performed to identify different
                  features from the manifest file. The proposed system
                  can be used to improve the efficiency of Android
                  permission system for informing the user about the
                  risks of Android permissions and applications.  },
}

@inproceedings{backes2016reliable,
  title={Reliable Third-Party Library Detection in Android and its Security Applications},
  author={Backes, Michael and Bugiel, Sven and Derr, Erik},
  booktitle={Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security},
  pages={356--367},
  year={2016},
  organization={ACM},
  note = {\url{https://trust.cispa.saarland/~bugiel/publications/pdfs/bugiel16-ccs.pdf}},
}

@article{kearns2016countering,
  title={Countering Mobile Device Threats: A Mobile Device Security Model},
  author={Kearns, Grover S},
  journal={Journal of Forensic \& Investigative Accounting},
  volume={8},
  number={1},
  year={2016},
  note = {\url{http://web.nacva.com/JFIA/Issues/JFIA-2016-4.pdf}},
}

@incollection{hein2016characterization,
  title={Characterization of Malware Detection on Android Application},
  author={Hein, Chit La Pyae Myo and Myo, Khin Mar},
  booktitle={Genetic and Evolutionary Computing},
  pages={113--124},
  year={2016},
  publisher={Springer}
}

@article{reaves2016droid,
  title={* droid: Assessment and Evaluation of Android Application Analysis Tools},
  author={Reaves, Bradley and Bowers, Jasmine and Gorski III, Sigmund Albert and Anise, Olabode and Bobhate, Rahul and Cho, Raymond and Das, Hiranava and Hussain, Sharique and Karachiwala, Hamza and Scaife, Nolen and others},
  journal={ACM Computing Surveys (CSUR)},
  volume={49},
  number={3},
  pages={55},
  year={2016},
  publisher={ACM},
  note = {\url{http://www.cise.ufl.edu/~traynor/papers/reaves-csur2016.pdf}},
}

@inproceedings{deypir2016new,
  title={A new approach for effective malware detection in Android-based devices},
  author={Deypir, Mahmood},
  booktitle={Information Security and Cryptology (ISCISC), 2016 13th International Iranian Society of Cryptology Conference on},
  pages={112--116},
  year={2016},
  organization={IEEE}
}

@article{poonguzhali2016secure,
  title={Secure Storage of Data on Android Based Devices},
  author={Poonguzhali, P and Dhanokar, Prajyot and Chaithanya, MK and Patil, Mahesh U},
  journal={International Journal of Engineering and Technology},
  volume={8},
  number={3},
  pages={177},
  year={2016},
  publisher={IACSIT Press},
  note = {\url{http://www.ijetch.org/vol8/880-ST011.pdf}},
  annote = {Manuscript received November 15, 2014; revised February 3, 2015. This
work is supported by Department of Electronics and Information Technology
(DeitY), Ministry of Communications \& IT, Government of India.
The authors are with C-DAC, Hyderabad, Telangana 500005, India
(e-mail: poonguzhalip@cdac.in, padhanokar@cdac.in,
mkchaithanya@cdac.in, maheshp@cdac.in)},
}

@misc{mouluandroid,
  title={Android OEM’s applications (in) security and backdoors without permission},
  author={Moulu, Andr{\'e}},
  note=\url{{http://www. quarkslab. com/dl/Android-OEM-applications-insecurity-and-backdoors-without-permission. pdf}},
}

@article{dash2016droidscribe,
  title={DroidScribe: Classifying Android Malware Based on Runtime Behavior},
  author={Dash, Santanu Kumar and Suarez-Tangil, Guillermo and Khan, Salahuddin and Tam, Kimberly and Ahmadi, Mansour and Kinder, Johannes and Cavallaro, Lorenzo},
  journal={Mobile Security Technologies (MoST 2016)},
  volume={7148},
  pages={1--12},
  year={2016},
  publisher={IEEE},
  note = {\url{http://www.cs.rhul.ac.uk/home/kinder/papers/most16-droidscribe.pdf}},
}

@inproceedings{backes2016demystifying,
  title={On demystifying the android application framework: Re-visiting android permission specification analysis},
  author={Backes, Michael and Bugiel, Sven and Derr, Erik and McDaniel, Patrick and Octeau, Damien and Weisgerber, Sebastian},
  booktitle={USENIX Security},
  year={2016},
  note = {\url{https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_backes-android.pdf}},
}

@article{gandhi2016anti,
  title={Anti-Theft Security System With Reporting and Safety Using Android Application Smart Industrial System using Android ADK},
  author={Gandhi, Dhara and Kahar, Nikita and Prajapati, Priya and Shah, Jayati and Patel, Shreya},
  year={2016},
  note = {\url{https://www.irjet.net/archives/V3/i2/IRJET-V3I2108.pdf}},
  annote= {students, Electronics and Communication, sigma Institute Of
                  Engineering, Gujarat, India }
}

@article{biswas2016android,
  title={Android Permissions Management at App Installing},
  author={Biswas, Sujit and Haipeng, Wang and Rashid, Javed},
  journal={International Journal of Security and Its Applications},
  volume={10},
  number={3},
  pages={223--232},
  year={2016},
  note = {\url{http://www.sersc.org/journals/IJSIA/vol10_no3_2016/21.pdf}},
  annote = {1Computer Engineering Department, Jessore Polytechnic Institute, Jessore, BD; This paper presents a
tool, SDroid (Secured anDroid) that assesses the best permissions management based on
end users opinion. SDroid evaluates requested permissions and allow users selectively
grant permissions considering his/her knowledge level depending on the opinion. },
}

@inproceedings{afonso2016going,
  title={Going Native: Using a Large-Scale Analysis of Android Apps to Create a Practical Native-Code Sandboxing Policy},
  author={Afonso, Vitor and Bianchi, Antonio and Fratantonio, Yanick and Doup{\'e}, Adam and Polino, Mario and de Geus, Paulo and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={Proceedings of the Annual Symposium on Network and Distributed System Security (NDSS)},
  year={2016},
  note = {\url{https://pdfs.semanticscholar.org/3343/392fe056b45692252ad18278e10020ee3d8e.pdf}},
}

@inproceedings{nguyen2016signing,
  title={Signing key leak detection in Google Play Store},
  author={Nguyen-Vu, Long and Park, Jungsoo and Chau, Ngoc-Tu and Jung, Souhwan},
  booktitle={2016 International Conference on Information Networking (ICOIN)},
  pages={13--16},
  year={2016},
  organization={IEEE}
}

@inproceedings{bagheri2016practical,
  title={Practical, Formal Synthesis and Automatic Enforcement of Security Policies for Android},
  author={Bagheri, Hamid and Sadeghi, Alireza and Jabbarvand, Reyhaneh and Malek, Sam},
  booktitle={Dependable Systems and Networks (DSN), 2016 46th Annual IEEE/IFIP International Conference on},
  pages={514--525},
  year={2016},
  organization={IEEE},
  note = {\url{http://cse.unl.edu/~hbagheri/publications/2016dsn.pdf}},
  annote = {
  Hamid Bagheri Alireza Sadeghi Reyhaneh Jabbarvand Sam Malek
School of Information and Computer Sciences
University of California, Irvine
{hamidb, alirezs1, jabbarvr, malek}@uci.edu
Abstract -- As the dominant mobile computing platform, Android
has become a prime target for cyber-security attacks. Many
of these attacks are manifested at the application level, and
through the exploitation of vulnerabilities in apps downloaded
from the popular app stores. Increasingly, sophisticated attacks
exploit the vulnerabilities in multiple installed apps, making it
extremely difficult to foresee such attacks, as neither the app
developers nor the store operators know a priori which apps will
be installed together. This paper presents an approach that allows
the end-users to safeguard a given bundle of apps installed on
their device from such attacks. The approach, realized in a tool,
called SEPAR, combines static analysis with lightweight formal
methods to automatically infer security-relevant properties from
a bundle of apps. It then uses a constraint solver to synthesize
possible security exploits, from which fine-grained security policies
are derived and automatically enforced to protect a given
device. In our experiments with over 4,000 Android apps, SEPAR
has proven to be highly effective at detecting previously unknown
vulnerabilities as well as preventing their exploitation.},
}

@article{dubrovskyi2016comparative,
  title={Comparative overview of basic cybervulnerabilities of mobile applications for Android operating system},
  author={Dubrovskyi, MS and Semenov, SG},
  journal={Системи обробки інформації},
  number={3},
  pages={18--20},
  year={2016},
  publisher={Харківський університет Повітряних Сил імені Івана Кожедуба}
}

@article{holmberg2015,
  title={Design of Dependable Systems on Android},
  author={Holmberg Forsyth, Patrick},
  journal={LU-CS-EX 2015-08},
  year={2015}
}

@inproceedings{aminmansour2015,
  title={Patulous Code Reuse Attack: A novel code reuse attack on ARM architecture (A proof of concept on Android OS)},
  author={Aminmansour, Farzane and Shahriari, Hamid Reza},
  booktitle={Information Security and Cryptology (ISCISC), 2015 12th International Iranian Society of Cryptology Conference on},
  pages={104--109},
  year={2015},
  organization={IEEE}
}

@inproceedings{sun2016,
  title={Blender: Self-randomizing Address Space Layout for Android Apps},
  author={Sun, Mingshen and Lui, John CS and Zhou, Yajin},
  booktitle={International Symposium on Research in Attacks, Intrusions, and Defenses},
  pages={457--480},
  year={2016},
  organization={Springer}, note = {\url{https://mssun.me/assets/raid16blender_slides.pdf}},
}

@inproceedings{song2016,
  title={Enforcing Kernel Security Invariants with Data Flow Integrity},
  author={Song, Chengyu and Lee, Byoungyoung and Lu, Kangjie and Harris, William and Kim, Taesoo and Lee, Wenke},
  booktitle={Proceedings of the 23th Annual Network and Distributed System Security Symposium},
  year={2016}, note = {\url{http://www.cc.gatech.edu/grads/c/csong43/ndss16-kenali.pdf}},
}

@article{chen2016,
  title={Dynamically Discovering Likely Memory Layout to Perform Accurate Fuzzing},
  author={Chen, Kai and Zhang, Yingjun and Liu, Peng},
 journal = {IEEE Transactions on Reliability},
 volume = 65,
 Issue = 3,
 month =Sept,
 year = {2016},
  publisher={IEEE}
}

@article{xu2016,
  title={Toward Engineering a Secure Android Ecosystem: A Survey of Existing Techniques},
  author={Xu, Meng and Song, Chengyu and Ji, Yang and Shih, Ming-Wei and Lu, Kangjie and Zheng, Cong and Duan, Ruian and Jang, Yeongjin and Lee, Byoungyoung and Qian, Chenxiong and others},
  journal={ACM Computing Surveys (CSUR)},
  volume={49},
  number={2},
  pages={38},
  year={2016},
  publisher={ACM}
}

@inproceedings{xu2015,
  title={From collision to exploitation: Unleashing use-after-free vulnerabilities in linux kernel},
  author={Xu, Wen and Li, Juanru and Shu, Junliang and Yang, Wenbo and Xie, Tianyi and Zhang, Yuanyuan and Gu, Dawu},
  booktitle={Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security},
  pages={414--425},
  year={2015},
  organization={ACM}
}

@article{wu2015,
  title={The Design and Practice of Embedded Linux File System},
  author={Wu, YongChong},
  year={2015}
}

@article{son2015,
  title={Design and evaluation of a user-level file system for fast storage devices},
  author={Son, Yongseok and Song, Nae Young and Han, Hyuck and Eom, Hyeonsang and Yeom, Heon Young},
  journal={Cluster Computing},
  volume={18},
  number={3},
  pages={1075--1086},
  year={2015},
  publisher={Springer}
}

@article{yang2016,
  title={A Fast Boot, Fast Shutdown Technique for Android OS Devices},
  author={Yang, Xia and Shi, Peng and Sun, Haiyong and Zheng, Wenxuan and Alves-Foss, Jim},
  journal={Computer},
  volume={49},
  number={7},
  pages={62--68},
  year={2016},
  publisher={IEEE}
}

@inproceedings{atzei2016,
  title={Developing Honest Java Programs with Diogenes},
  author={Atzei, Nicola and Bartoletti, Massimo},
  booktitle={International Conference on Formal Techniques for Distributed Objects, Components, and Systems},
  pages={52--61},
  year={2016},
  organization={Springer}, note = {\url{https://b5a70920-a-62cb3a1a-s-sites.googlegroups.com/site/tcsunica/papers/diogenes.pdf}}, note = {\url{http://co2.unica.it/diogenes/doc/}},
}

@article{saracino2016,
  title={Madam: Effective and efficient behavior-based android malware detection and prevention},
  author={Saracino, Andrea and Sgandurra, Daniele and Dini, Gianluca and Martinelli, Fabio},
  year={2016},
  publisher={IEEE}
}

@article{deng2016,
  title={Mutation operators for testing Android apps},
  author={Deng, Lin and Offutt, Jeff and Ammann, Paul and Mirzaei, Nariman},
  journal={Information and Software Technology},
  year={2016},
  publisher={Elsevier}
}

@inproceedings{deng2015,
  title={Towards mutation analysis of android apps},
  author={Deng, Lin and Mirzaei, Nariman and Ammann, Paul and Offutt, Jeff},
  booktitle={Software Testing, Verification and Validation Workshops (ICSTW), 2015 IEEE Eighth International Conference on},
  pages={1--10},
  year={2015},
  organization={IEEE}
}

@inproceedings{sun2015,
  title={Android Rooting: Methods, Detection, and Evasion},
  author={Sun, San-Tsai and Cuadros, Andrea and Beznosov, Konstantin},
  booktitle={Proceedings of the 5th Annual ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices},
  pages={3--14},
  year={2015},
  organization={ACM}, note={\url{http://lersse-dl.ece.ubc.ca/record/310/files/p3.pdf}},
}
@inproceedings{vila2015,
  title={Practical Experiences on {NFC} Relay Attacks with Android},
  author={Vila, Jos{\'e} and Rodr{\'\i}guez, Ricardo J},
  booktitle={International Workshop on Radio Frequency Identification: Security and Privacy Issues},
  pages={87--103},
  year={2015},
  organization={Springer}
}
@article{costamagna2016,
  title={Hookdroid: Dalvik Dynamic Instrumentation for Security Analytics.},
  author={Costamagna, Valerio and Bergadano, Francesco},
  journal={International Journal on Information Technologies \& Security},
  volume={8},
  number={3},
  year={2016}
}

@inproceedings{burke2015,
  title={How to Tame Your Android Malware},
  author={Burke, Ivan and Pieterse, Heloise},
  booktitle={Iccws 2015-The Proceedings of the 10th International Conference on Cyber Warfare and Security: ICCWS2015},
  pages={54},
  year={2015},
  organization={Academic Conferences Limited}, note = {\url{https://www.researchgate.net/profile/Ivan_Burke/publication/274255324_How_to_Tame_Your_Android_Malware/links/551a4b050cf2f51a6fea2f7c.pdf}},
  annote={Ivan Burke and Heloise Pieterse
Cyber Defence Research Group, DPSS, CSIR, Pretoria, South Africa
iburke@csir.co.za
hpieterse@csir.co.za 
  },
}

@article{andow2016,
  title={A Study of Grayware on Google Play},
  author={Andow, Benjamin and Nadkarni, Adwait and Bassett, Blake and Enck, William and Xie, Tao},
  note = {\url{https://pdfs.semanticscholar.org/328c/e47e85339ff47d4977bd6545d761f2ff8b2f.pdf}},
  annote={
North Carolina State University
{beandow, apnadkar, whenck}@ncsu.edu
†University of Illinois at Urbana-Champaign
{rbasset2, taoxie}@illinois.edu
Abstract—While there have been various studies identifying
and classifying Android malware, there is limited discussion
of the broader class of apps that fall in a gray area. Mobile
grayware is distinct from PC grayware due to differences in
operating system properties. Due to mobile grayware’s subjective
nature, it is difficult to identify mobile grayware via program
analysis alone. Instead, we hypothesize enhancing analysis with
text analytics can effectively reduce human effort when triaging
grayware. In this paper, we design and implement heuristics for
seven main categories of grayware. We then use these heuristics to
simulate grayware triage on a large set of apps from Google Play.
We then present the results of our empirical study, demonstrating
a clear problem of grayware. In doing so, we show how even
relatively simple heuristics can quickly triage apps that take
advantage of users in an undesirable way.
  }
}

@book{albert2016,
  title={Formal Techniques for Distributed Objects, Components, and Systems: 36th IFIP WG 6.1 International Conference, FORTE 2016, Held as Part of the 11th International Federated Conference on Distributed Computing Techniques, DisCoTec 2016, Heraklion, Crete, Greece, June 6-9, 2016, Proceedings},
  author={Albert, Elvira and Lanese, Ivan},
  volume={9688},
  year={2016},
  publisher={Springer}, note = {\url{http://link.springer.com/book/10.1007/978-3-319-39570-8}},
}

@article{canfora2016,
  title={An HMM and structural entropy based detector for Android malware: An empirical study},
  author={Canfora, Gerardo and Mercaldo, Francesco and Visaggio, Corrado Aaron},
  journal={Computers \& Security},
  volume={61},
  pages={1--18},
  year={2016},
  publisher={Elsevier}
}


@MastersThesis{subramanian2015,
  title={Bit-vector Support in Z3-str2 Solver and Automated Exploit Synthesis},
  author={Subramanian, Sanu},
  year={2015},
  publisher={University of Waterloo}, note =
                  {\url{https://uwspace.uwaterloo.ca/bitstream/handle/10012/10022/Subramanian_Sanu.pdf;sequence=1}},
}

@TechReport{GoogleSF2015,
  author =       {Google Security},
  title =        {Android libstagefright - Integer Overflow Remote
                  Code Execution},
  institution =  {Google Security Research},
  year =         {2015},
  key =       {CVE: 2015-3864},
  OPTtype =      {},
  number =    {EDB-ID: 38226},
  OPTaddress =   {},
  month =     {9},
  note =      {\url{https://www.exploit-db.com/exploits/38226/}},
  OPTannote =    {}
}

@article{peschek2016,
  title={Bedrohungsanalyse von Android. Die Ausnutzung von Stagefright},
  author={Peschek, Christian},
  year={2016},
  publisher={Ostbayerische Technische Hochschule Regensburg Regensburg, Deutschland}
}


@inproceedings{hao2013,
  title={On the effectiveness of API-level access control using bytecode rewriting in Android},
  author={Hao, Hao and Singh, Vicky and Du, Wenliang},
  booktitle={Proceedings of the 8th ACM SIGSAC symposium on Information, computer and communications security},
  pages={25--36},
  year={2013},
  organization={ACM}, note = {\url{http://www.cis.syr.edu/~wedu/Research/paper/api_level_ac_asiaccs2013.pdf}},
}

@article{argyroudis2012,
  title={Exploiting the jemalloc Memory Allocator: Owning Firefox’s Heap},
  author={Argyroudis, Patroklos and Karamitas, Chariton},
  journal={Blackhat USA},
  year={2012}, note = {\url{https://media.blackhat.com/bh-us-12/Briefings/Argyoudis/BH_US_12_Argyroudis_Exploiting_the_ jemalloc_Memory_ Allocator_WP.pdf}},
}

@Article{jemallocum2012,
  author =       {Argp and Huku},
  title =        {Pseudomonarchia jemallocum: The false kingdom of
                  jemalloc, or On exploiting the jemalloc memory
                  manager},
  journal =      {Phrack},
  year =         {2012},
  OPTkey =       {},
  volume =    {Volume 0x0e, Phile \#0x0a of 0x13},
  number =    {Issue 0x44},
  OPTpages =     {},
  month =     {4},
  note =      {\url{http://phrack.org/issues/68/10.html\#article}},
  OPTannote =    {}
}

@inproceedings{xu2015,
  title={Own your android! yet another universal root},
  author={Xu, Wen and Fu, Yubin},
  booktitle={9th USENIX Workshop on Offensive Technologies (WOOT 15)},
  year={2015}, note = {\url{https://www.usenix.org/system/files/conference/woot15/woot15-paper-xu.pdf}},
}

@article{marco2016,
  title={Exploiting Linux and PaX ASLR’s weaknesses on 32-and 64-bit
                  systems},
  author={Marco-Gisbert, Hector and Ripoll-Ripoll, Ismael},
  year={2016}, month={4},
  note={\url{https://www.blackhat.com/docs/asia-16/materials/asia-16-Marco-Gisbert-Exploiting-Linux-And-PaX-ASLRS-Weaknesses-On-32-And-64-Bit-Systems-wp.pdf}},
}

@inproceedings{yang2014,
  title={IntentFuzzer: detecting capability leaks of android applications},
  author={Yang, Kun and Zhuge, Jianwei and Wang, Yongke and Zhou, Lujue and Duan, Haixin},
  booktitle={Proceedings of the 9th ACM symposium on Information, computer and communications security},
  pages={531--536},
  year={2014},
  organization={ACM},
}

@inproceedings{burns2009,
  title={Exploratory Android Surgery},
  author={Burns, Jesse},
  booktitle={Black Hat Technical Security Conference USA},
  year={2009}, note = {\url{http://www.blackhat.com/presentations/bh-usa-09/BURNS/BHUSA09-Burns-AndroidSurgery-SLIDES.pdf}},
}

@article{plaut2015,
  title={Technologies of Avoidance: The Swear Jar and the Cell Phone},
  author={Plaut, Ethan R},
  journal={First Monday},
  volume={20},
  number={11},
  year={2015},
}

@inproceedings{shahriar2014,
  title={Testing of Memory Leak in {Android} Applications},
  author={Shahriar, Hossain and North, Steve and Mawangi, Edward},
  booktitle={High-Assurance Systems Engineering (HASE), 2014 IEEE 15th International Symposium on},
  pages={176--183},
  year={2014},
  organization={IEEE}
}

@phdthesis{yamaguchi2015,
title={Pattern-Based Vulnerability
  Discovery}, author={Yamaguchi, Fabian}, year={2015}, school={PhD
  thesis, Georg-August-University Gottingen, 2015. URL
  http://ediss. uni-goettingen. de/handle/11858/00-1735-0000-0023-9682-0}
  }

@article{huang2016,
title={Talos: Neutralizing Vulnerabilities
  with Security Workarounds for Rapid Response}, author={Huang, Zhen
  and D’Angelo, Mariana and Miyani, Dhaval and Lie, David},
  year={2016}, note =
  {\url{http://www.ieee-security.org/TC/SP2016/papers/0824a618.pdf}},

}

@article{braden2016,
  title={Leakage-Resilient Layout Randomization for Mobile Devices},
  author={Braden, Kjell and Crane, Stephen and Davi, Lucas and Franz, Michael and Larsen, Per and Liebchen, Christopher and Sadeghi, Ahmad-Reza},
  year={2016}, note={\url{http://www.ics.uci.edu/~perl/ndss16_lr2.pdf}},
}

@article{osborn2016,
  title={Design to Deployment at Google},
  author={Osborn, Barclay and McWilliams, Justin and Beyer, Betsy and Saltonstall, Max},
  year={2016}, note={\url{http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/44860.pdf}},
}

@article{sonnerup2016,
  title={Robust Security Updates for Connected Devices},
  author={S{\"o}nnerup, Jonathan and Karlsson, Jonathan and Hell, Martin and Larsson, EIT Fredrik},
  year={2016}, note={\url{
http://lup.lub.lu.se/luur/download?func=downloadFile&recordOId=8841016&fileOId=8872290}},
}

https://github.com/fuzzing/MFFA Media Fuzzing Framework for Android; BlackHatEu15-FuzzingAndroid.pdf
Deepsec15.pdf 

@book{drake2014,
  title={Android hacker's handbook},
  author={Drake, Joshua J and Lanier, Zach and Mulliner, Collin and Fora, Pau Oliva and Ridley, Stephen A and Wicherski, Georg},
  year={2014},
  publisher={John Wiley \& Sons}
}

@article{schulteservice,
title={A Service Framework for Smart Mobility
  Scenarios}, author={Schulte, Stefan and Hoenisch, Philipp and Kipp,
  Kristof and Burgstahler, Daniel and Abels, Sven and Liguori,
  Giuseppe} }

@inproceedings{wei2016,
title={Security Identifier
  Randomization: A Method to Prevent Kernel Privilege-Escalation
  Attacks}, author={Wei, Lifeng and Zuo, Yudan and Ding, Yan and Dong,
  Pan and Huang, Chenlin and Gao, Yuanming}, booktitle={2016 30th
  International Conference on Advanced Information Networking and
  Applications Workshops (WAINA)}, pages={838--842}, year={2016},
  organization={IEEE} }



@article{maarala2016,
  title={Semantic Reasoning for Context-aware Internet of Things Applications},
  author={Maarala, Altti Ilari and Su, Xiang and Riekki, Jukka},
  journal={arXiv preprint arXiv:1604.08340},
  year={2016},
 notes = {\url{http://arxiv.org/pdf/1604.08340.pdf}}.
}

@incollection{michele2015,
  title={Media Playback System},
  author={Mich{\'e}le, Benjamin},
  booktitle={Smart TV Security},
  pages={15--33},
  year={2015},
  publisher={Springer}
}

@article{drake2015,
  title={Stagefright: Scary Code in the Heart of {Android}},
  author={Drake, Joshua},
  journal={BlackHat USA}, month = {8},
  year={2015},
  note = {slides: \url{https://www.blackhat.com/}
                  \url{docs/us-15/materials/} \url{us-15-Drake-}
                  \url{Stagefright-Scary-Code-}
                  \url{In-The-Heart-Of-Android.pdf}, video:
                  \url{https://www.youtube.com/watch?v=71YP65UANP0} },
}

@TechReport{Metaphor2016,
  author =       {Hanan Beer},
  title =        {Metaphor: A (Real) Real­Life Stagefright Exploit},
  institution =  {NorthBit},
  year =         {2016},
  OPTkey =       {},
  OPTtype =      {},
  OPTnumber =    {},
  OPTaddress =   {},
  OPTmonth =     {},
  note =      {\url{https://www.exploit-db.com/docs/39527.pdf}},
  OPTannote =    {}
}

@inproceedings{seacord2015,
  title={Mobile device security},
  author={Seacord, Robert C},
  booktitle={Proceedings of the 3rd International Workshop on Mobile Development Lifecycle},
  pages={1--2},
  year={2015},
  organization={ACM}
}

@TechReport{Adams2016,
  author =       {Aaron Adams},
  title =        {A Few Notes on Usefully Exploiting Libstagefright On
                  {Android} 5.x},
  institution =  {www.nccgroup.trust},
  year =         {2016},
  pages = {22},
  OPTkey =       {},
  OPTtype =      {},
  OPTnumber =    {},
  OPTaddress =   {},
  month =     {1},
  note =      {\url{https://www.nccgroup.trust/ globalassets/ our-research/ uk/
  whitepapers/ 2016/01/ libstagefright- exploit- notespdf/ 2016}},
  OPTannote =    {}
}

@article{flynn2015,
  title={Smartphone Security},
  author={Flynn, Lori and Klieber, Will},
  journal={Pervasive Computing, IEEE},
  volume={14},
  number={4},
  pages={16--21},
  year={2015},
  publisher={IEEE},
}

@article{meer2010,
  title={Memory Corruption Attacks The (almost) Complete History},
  author={Meer, Haroon},
  journal={Blackhat USA.(Jul. 2010)},
  year={2010}, note = {\url{https://media.blackhat.com/bh-us-10/whitepapers/Meer/BlackHat-USA-2010-Meer-History-of-Memory-Corruption-Attacks-wp.pdf},
  \url{
  https://prezi.com/iemlmzvpnk_d/the-almost-complete-history-of-memory-corruption-attacks/
  }},
}


@TechReport{flutter2016,
  author =       {flutter.io},
  title =        {Flutter Project},
  institution =  {flutter.io},
  year =         {2016},
  OPTkey =       {},
  OPTtype =      {},
  OPTnumber =    {},
  OPTaddress =   {},
  OPTmonth =     {},
  note =      {\url{https://flutter.io/}},
  annote =    {Flutter is a new project to help developers build high-performance, high-fidelity, mobile apps for iOS and Android from a single codebase.}
}

@TechReport{Oberheide2012,
  author =       {Jon Oberheide},
  title =        {https://duo.com/blog/a-look-at-aslr-in-android-ice-cream-sandwich-4-0},
  institution =  {duo.com},
  year =         {2012},
  OPTkey =       {},
  OPTtype =      {},
  OPTnumber =    {},
  OPTaddress =   {},
  OPTmonth =     {},
  note =      {\url{https://duo.com/blog/a-look-at-aslr-in-android-ice-cream-sandwich-4-0}},
  OPTannote =    {}
}

@inproceedings{srividhya2015,
  title={An {Android} based secure access control using {ARM} and cloud
                  computing},
  author={Srividhya, K and Manikanthan, SV},
  booktitle={Electronics and Communication Systems (ICECS), 2015 2nd International Conference on},
  pages={1486--1489},
  year={2015},
  organization={IEEE}
}

@TechReport{Zhengmin2015,
  author =       {Zheng, Min},
  title =        {ROP Step by Step},
  institution =  {github.com},
  year =         {2015},
  OPTkey =       {},
  OPTtype =      {},
  OPTnumber =    {},
  OPTaddress =   {},
  OPTmonth =     {},
  note =      {\url{https://github.com/zhengmin1989/ROP_STEP_BY_STEP}},
  OPTannote =    {}
}

@incollection{habibi2015,
  title={{DisARM}: Mitigating Buffer Overflow Attacks on Embedded Devices},
  author={Habibi, Javid and Panicker, Ajay and Gupta, Aditi and Bertino, Elisa},
  booktitle={Network and System Security},
  pages={112--129},
  year={2015},
  publisher={Springer}, note={\url{https://www.cerias.purdue.edu/assets/pdf/bibtex_archive/2015-15.pdf}},
}

@inproceedings {CodeStylometry2015,
author = {Aylin Caliskan-Islam and Richard Harang and Andrew Liu and Arvind Narayanan and Clare Voss and Fabian Yamaguchi and Rachel Greenstadt},
title = {De-anonymizing Programmers via Code Stylometry},
booktitle = {24th USENIX Security Symposium)},
year = {2015},
month = Aug,
isbn = {978-1-931971-232},
address = {Washington, D.C.},
pages = {255--270},
note = {\url{https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/caliskan-islam}},
publisher = {USENIX Association},
}

@TechReport{ashraf2014,
  author =       {Zubair Ashraf},
  title =        {How to Cheat Your MDM: Compliance without a Password},
  institution =  {},
  year =         {2014},
  OPTkey =       {},
  OPTtype =      {},
  OPTnumber =    {},
  OPTaddress =   {},
  month =     {April},
  note =     {\url{https://securityintelligence.com/how-to-cheat-your-mdm-compliance-without-a-password/}},
  annote =    {
  What this means is that the MDM app on your Android device would have a false sense that it can wipe data, lock the device, enforce password quality policies and so on and will therefore let you access corporate email, data or intranet resources while in reality it would have no such control and you can continue to use your device without any of the corporate restrictions. We know you did not like to type those long passwords and would rather have no password and no lock screen. After all, don’t you want to share your personal data with everyone?
},

}

@Inbook{HungCuong2014,
author="Hung-Cuong, Nguyen and Quyet-Thang, Huynh and Ba-Vuong, Tru",
editor="Vinh, Cong Phan and Alagar, Vangalur and Vassev, Emil and
                  Khare, Ashish",
chapter="Rule-Based Techniques Using Abstract Syntax Tree for Code Optimization and Secure Programming in Java",
title="Context-Aware Systems and Applications: Second International Conference, ICCASA 2013, Phu Quoc Island, Vietnam, November 25-26, 2013, Revised Selected Papers",
year="2014",
publisher="Springer International Publishing",
address="Cham",
pages="168--177",
isbn="978-3-319-05939-6",
doi="10.1007/978-3-319-05939-6_17",
url="http://dx.doi.org/10.1007/978-3-319-05939-6_17"
}


@inproceedings{falsina2015,
  title={Grab'n Run: Secure and Practical Dynamic Code Loading for Android Applications},
  author={Falsina, Luca and Fratantonio, Yanick and Zanero, Stefano and Kruegel, Christopher and Vigna, Giovanni and Maggi, Federico},
  booktitle={Proceedings of the 31st Annual Computer Security Applications Conference},
  pages={201--210},
  year={2015},
  organization={ACM},
note={\url{
  https://cs.ucsb.edu/~vigna/publications/2015_ACSAC_GrabNRun.pdf}},
}


@article{anikeev2015,
  title={Secure garbage collection: Preventing malicious data harvesting from deallocated Java objects inside the Dalvik VM},
  author={Anikeev, Maxim and Freiling, Felix C and G{\"o}tzfried, Johannes and M{\"u}ller, Tilo},
  journal={Journal of Information Security and Applications},
  volume={22},
  pages={81--86},
  year={2015},
  publisher={Elsevier},
}

@incollection{saudi2016,
  title={A New System Call Classification for Android Mobile Malware Surveillance Exploitation via SMS Message},
  author={Saudi, Madihah Mohd and Rahman, Muhammad Zuhair Abd and Mahmud, Azirah Alfaizah and Basir, Nurlida and Yusoff, Yumn Suhaylah},
  booktitle={Advanced Computer and Communication Engineering Technology},
  pages={103--112},
  year={2016},
  publisher={Springer}
}

@incollection{yang2015,
  title={AppSpear: Bytecode Decrypting and DEX Reassembling for Packed Android Malware},
  author={Yang, Wenbo and Zhang, Yuanyuan and Li, Juanru and Shu, Junliang and Li, Bodong and Hu, Wenjun and Gu, Dawu},
  booktitle={Research in Attacks, Intrusions, and Defenses},
  pages={359--381},
  year={2015},
  publisher={Springer}
}

@inproceedings{evans2015,
  title={All Your Root Checks are Belong to Us: The Sad State of Root Detection},
  author={Evans, Nathan S and Benameur, Azzedine and Shen, Yun},
  booktitle={Proceedings of the 13th ACM International Symposium on Mobility Management and Wireless Access},
  pages={81--88},
  year={2015},
  organization={ACM},
}

@inproceedings{mohr2015,
  title={JoDroid: Adding Android Support to a Static Information Flow Control Tool.},
  author={Mohr, Martin and Graf, J{\"u}rgen and Hecker, Martin},
  booktitle={Software Engineering (Workshops)},
  pages={140--145},
  year={2015}, note={\url{
  http://ceur-ws.org/Vol-1337/paper25.pdf}},
}

@article{shao2016,
  title={Kratos: Discovering Inconsistent Security Policy Enforcement in the Android Framework},
  author={Shao, Yuru and Ott, Jason and Chen, Qi Alfred and Qian, Zhiyun and Mao, Z Morley},
  year={2016}, note ={\url{
  http://web.eecs.umich.edu/~alfchen/roy_ndss16.pdf}},
}

@article{geneiatakis2015,
  title={A Permission verification approach for {Android} mobile applications},
  author={Geneiatakis, Dimitris and Fovino, Igor Nai and Kounelis, Ioannis and Stirparo, Paquale},
  journal={Computers \& Security},
  volume={49},
  pages={192--205},
  year={2015},
  publisher={Elsevier}, note={\url{
http://ac.els-cdn.com/S0167404814001515/1-s2.0-S0167404814001515-main.pdf?_tid=6c441e1a-db54-11e5-882f-00000aab0f26&acdnat=1456359314_35d73356dda090f53edf710c5466273d}},
}

@inproceedings{egele2015,
  title={On the Security and Engineering Implications of Finer-Grained Access Controls for Android Developers and Users},
  author={Egele, Manuel and Kruegel, Christopher and Kirda, Engin and Vigna, Giovanni},
  booktitle={Detection of Intrusions and Malware, and Vulnerability Assessment: 12th International Conference, DIMVA 2015, Milan, Italy, July 9-10, 2015, Proceedings},
  volume={9148},
  pages={282},
  year={2015},
  organization={Springer}
}

@incollection{nasim2015,
  title={Uncovering Self Code Modification in Android},
  author={Nasim, Faisal and Aslam, Baber and Ahmed, Waseem and Naeem, Talha},
  booktitle={Codes, Cryptology, and Information Security},
  pages={297--313},
  year={2015},
  publisher={Springer}
}



@inproceedings{singh2015,
  title={ZapDroid: Managing Infrequently Used Applications on Smartphones},
  author={Singh, Indrajeet and Krishnamurthy, Srikanth V and Madhyastha, Harsha V and Neamtiu, Iulian},
  booktitle={Proceedings of the 2015 ACM International Joint Conference on Pervasive and Ubiquitous Computing},
  pages={1185--1196},
  year={2015},
  organization={ACM},
  note={\url{http://www.cs.ucr.edu/~krish/zapdroid.pdf}},
  annote={ Indrajeet Singh UC Riverside singhi@cs.ucr.edu Srikanth
                  V. Krishnamurthy UC Riverside krish@cs.ucr.edu
                  Harsha V. Madhyastha University of Michigan
                  harshavm@umich.edu Iulian Neamtiu UC Riverside
                  neamtiu@cs.ucr.edu ABSTRACT User surveys have shown
                  that a typical user has over a hundred apps on her
                  smartphone [1], but stops using many of them. We
                  conduct a user study to identify such unused apps,
                  which we call zombies, and show via experiments that
                  zombie apps consume significant resources on a
                  user’s smartphone and access her private
                  information.  We then design and build ZapDroid,
                  which enables users to detect and silo zombie apps
                  in an e↵ective way to prevent their undesired
                  activities. If and when the user wishes to resume
                  using such an app, ZapDroid restores the app quickly
                  and e↵ectively. Our evaluations show that: (i)
                  ZapDroid saves twice the energy from unwanted zombie
                  app behaviors as compared to apps from the Play
                  Store that kill background unwanted processes, and
                  (ii) it effectively prevents zombie apps from using
                  undesired permissions. In addition, ZapDroid is
                  energy-efficient, consuming < 4\% of the battery per
                  day.  ACM Classification Keywords D.4.9 Operating
                  Systems: Systems Programs and Utilities Author
                  Keywords Smartphones; energy; privacy },
}


@TechReport{Spreitzenbarth2015,
  author =       {Michael Spreitzenbarth},
  title =        {Android Malware Summary for the Year 2015},
  institution =  {informatik.uni-erlangen.de},
  year =         {2015},
  OPTkey =       {},
  OPTtype =      {},
  OPTnumber =    {},
  OPTaddress =   {},
  OPTmonth =     {},
  note =     {\url{http://forensics.spreitzenbarth.de/2016/01/03/}~{our-android-malware-summary-for-the-year-2015/
}},
  annote =    {
  Dr.-Ing. Michael Spreitzenbarth
\url{michael.spreitzenbarth@cs.fau.de}, \url{http://forensics.spreitzenbarth.de}},
}

@article{meng2015,
  title={Collaborative Security: A Survey and Taxonomy},
  author={Meng, Guozhu and Liu, Yang and Zhang, Jie and Pokluda, Alexander and Boutaba, Raouf},
  journal={ACM Computing Surveys (CSUR)},
  volume={48},
  number={1},
  pages={1},
  year={2015},
  publisher={ACM}
}

@article{shabtai2015,
  title={Evaluation of Security Solutions for {Android} Systems},
  author={Shabtai, Asaf and Mimran, Dudu and Elovici, Yuval},
  journal={arXiv preprint arXiv:1502.04870},
  year={2015}, annote={
  Asaf Shabtai Dudu Mimran Yuval Elovici
Dept. of Information Systems Engineering
Ben-Gurion University of the Negev, Israel
ABSTRACT
With the increasing usage of smartphones a plethora of security
solutions are being designed and developed. Many of the security
solutions fail to cope with advanced attacks and are not aways
properly designed for smartphone platforms. Therefore, there is a
need for a methodology to evaluate their effectiveness. Since the
{Android} operating system has the highest market share today, we
decided to focus on it in this study in which we review some of
the state-of-the-art security solutions for {Android}-based
smartphones. In addition, we present a set of evaluation criteria
aiming at evaluating security mechanisms that are specifically
designed for {Android}-based smartphones. We believe that the
proposed framework will help security solution designers develop
more effective solutions and assist security experts evaluate the
effectiveness of security solutions for {Android}-based
smartphones.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General –
security and protection
General Terms
Security.
Keywords
Smartphone, Mobile device Security, Security evaluation,
{Android}.
  },
note={\url{http://arxiv.org/pdf/1502.04870.pdf}},
}

@article{shabtai2012,
  title={Andromaly: a behavioral malware detection framework for {Android} devices},
  author={Shabtai, Asaf and Kanonov, Uri and Elovici, Yuval and Glezer, Chanan and Weiss, Yael},
  journal={Journal of Intelligent Information Systems},
  volume={38},
  number={1},
  pages={161--190},
  year={2012},
  publisher={Springer}
}
@incollection{zhao2011,
  title={{AntiMalDroid}: an efficient SVM-based malware detection framework for {Android}},
  author={Zhao, Min and Ge, Fangbin and Zhang, Tao and Yuan, Zhijian},
  booktitle={Information Computing and Applications},
  pages={158--166},
  year={2011},
  publisher={Springer}
}


@inproceedings{bhandari2015,
  title={{DRACO}: DRoid analyst combo an {Android} malware analysis framework},
  author={Bhandari, Shweta and Gupta, Rishabh and Laxmi, Vijay and Gaur, Manoj Singh and Zemmari, Akka and Anikeev, Maxim},
  booktitle={Proceedings of the 8th International Conference on Security of Information and Networks},
  pages={283--289},
  year={2015},
  organization={ACM}
}

@incollection{faruki2016,
  title={{DroidAnalyst}: Synergic App Framework for Static and Dynamic App Analysis},
  author={Faruki, Parvez and Bhandari, Shweta and Laxmi, Vijay and Gaur, Manoj and Conti, Mauro},
  booktitle={Recent Advances in Computational Intelligence in Defense and Security},
  pages={519--552},
  year={2016},
  publisher={Springer}, note = {\url{https://www.researchgate.net/profile/Parvez_Faruki/publication/281456581_DroidAnalyst_Synergic_App_framework_for_static_and_dynamic_app_analysis/links/55e9145508ae3e1218439985.pdf}},
}

@article{faruki2015,
  title = {Android Security: A Survey of Issues, Malware Penetration, and Defenses},
  author = {Faruki, Parvez and Bharmal, Ammar and Laxmi, Vijay and Ganmoor, Vijay and Gaur, Manoj Singh and Conti, Mauro and Rajarajan, Muttukrishnan},
  journal = {Communications Surveys \& Tutorials, IEEE},
  volume = {17},
  number = {2},
  pages = {998--1022},
  year = {2015},
  publisher = {IEEE},
}

@Article{faruki2014,
  title =        "AndroSimilar: Robust signature for detecting variants
                 of {Android} malware",
  author =       "Parvez Faruki and Vijay Laxmi and Ammar Bharmal and M.
                 S. Gaur and Vijay Ganmoor",
  journal =      "Journal of Information Security and Applications",
  year =         "2014",
  annote =       "Abstract {Android} Smartphone popularity has increased
                 malware threats forcing security researchers and
                 AntiVirus (AV) industry to carve out smart methods to
                 defend Smartphone against malicious apps. Robust
                 signature based solutions to mitigate threats become
                 necessary to protect the Smartphone and confidential
                 user data. Here we present AndroSimilar, an approach
                 which generates signatures by extracting statistically
                 robust features, to detect malicious {Android} apps.
                 Proposed method is effective against code obfuscation
                 and repackaging, widely used techniques to propagate
                 unseen variants of known malware by evading AV
                 signatures. AndroSimilar is a syntactic foot-printing
                 mechanism that finds regions of statistical similarity
                 with known malware to detect those unknown, zero day
                 samples. We also show that syntactic similarity
                 considering whole app, rather than just embedded DEX
                 file is more effective, contrary to known fuzzy hashing
                 approach. We also apply clustering algorithm to
                 identify small set of family signatures to reduce
                 overall signature database size. Proposed approach can
                 be refined to deploy as Smartphone AV.",
}

@article{thi2013,
  title = {The Company You Keep},
  author = {Thi Thu Truong, Hien and Lagerspetz, Eemil and Nurmi, Petteri and J Oliner, Adam and Tarkoma, Sasu and Asokan, N and Bhattacharya, Sourav and others},
  month =  {12},
  journal = {arxiv.org},
  year = {2013}, annote  = {
  University of Helsinki, ‡ Aalto University, § Helsinki Institute for Information Technology HIIT, † UC Berkeley
øfirst.last@cs.helsinki.fi, ‡ asokan@acm.org, † oliner@eecs.berkeley.edu;;

ABSTRACT
There is little information from independent sources in the
public domain about mobile malware infection rates. The
only previous independent estimate (0.0009\%) [5], was based
on indirect measurements obtained from domain name resolution
traces. In this paper, we present the first independent
study of malware infection rates and associated risk factors
using data collected directly from over 55,000 {Android} devices.
We find that the malware infection rates in {Android}
devices estimated using two malware datasets (0.28\% and
0.26\%), though small, are significantly higher than the previous
independent estimate. Using our datasets, we investigate
how indicators extracted inexpensively from the devices
correlate with malware infection.
Based on the hypothesis that some application stores have
a greater density of malicious applications and that advertising
within applications and cross-promotional deals may
act as infection vectors, we investigate whether the set of
applications used on a device can serve as an indicator for
infection of that device. Our analysis indicates that this
alone is not an accurate indicator for pinpointing infection.
However, it is a very inexpensive but surprisingly useful way
for significantly narrowing down the pool of devices on which
expensive monitoring and analysis mechanisms must be deployed.
Using our two malware datasets we show that this
indicator performs 4.8 and 4.6 times (respectively) better
at identifying infected devices than the baseline of random
checks. Such indicators can be used, for example, in the
search for new or previously undetected malware. It is therefore
a technique that can complement standard malware
scanning by anti-malware tools. Our analysis also demonstrates
a marginally significant difference in battery use between
infected and clean devices.
Version of Thursday 12th December, 2013
  },
}


@incollection{wu2014,
  title = {Analyzing {Android} browser apps for file://vulnerabilities},
  author = {Wu, Daoyuan and Chang, Rocky KC},
  booktitle = {Information Security},
  pages = {345--363},
  year = {2014},
  publisher = {Springer}
}

@inproceedings{li2015,
  title = {On the accuracy of smartphone-based mobile network measurement},
  author = {Li, Weichao and Mok, Ricky KP and Wu, Daoyuan and Chang, Rocky KC},
  booktitle = {Computer Communications (INFOCOM), 2015 IEEE Conference on},
  pages = {370--378},
  year = {2015},
  organization = {IEEE}
}

@Article{wu2014,
 author = {Wu, Daoyuan},
  title =        {On the Feasibility of Automatically Generating
                  {Android} Component Hijacking Exploits},
  journal =      {HitCon 2014},
  year =         {2014},
 note = {\url{http://www.slideshare.net/daoyuan0x/chv-exploit-hitcon-38299593}, \url{http://hitcon.org/2014/agenda/}},
  annote =    { http://hitcon.org/2014/agenda/ Demo exploits and
                  vulnerable In this talk, we conduct an empirical
                  study to explore the feasibility of automatically
                  generating exploits for vetting component hijacking
                  vulnerabilities in {Android} apps. Our study takes our
                  hands-on exploit analysis for several real
                  vulnerable apps as basis, and meanwhile reflects
                  them to high-level analysis. Through this process,
                  we identify several challenges that need to be
                  addressed for a robust exploit generation technique,
                  and some of them are first pinpointed. In
                  particular, we believe one challenge is nearly
                  impossible to be automatically tackled, if no
                  pre-prepared domain knowledge is involved. Overall,
                  an automatic, accurate, and efficient solution for
                  generating component hijacking exploits remains
                  enough room to explore.  },
}

@article{liang2015,
  title={Stack Layout Randomization with Minimal Rewriting of {Android} Binaries},
  author={Liang, Yu and Ma, Xinjie and Wu, Daoyuan and Tang, Xiaoxiao and GAO, Debin and Peng, Guojun and Jia, Chunfu and Zhang, Huanguo},
  year={2015}
}

@inproceedings{octeau2016,
  title={Combining static analysis with probabilistic models to enable market-scale {Android} inter-component analysis},
  author={Octeau, Damien and Jha, Somesh and Dering, Matthew and McDaniel, Patrick and Bartel, Alexandre and Li, Li and Klein, Jacques and Le Traon, Yves},
  booktitle={Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  pages={469--484},
  year={2016},
  organization={ACM}
}

@inproceedings{wu2015,
  title={MopEye: Monitoring Per-app Network Performance with Zero Measurement Traffic},
  author={Wu, Daoyuan and Li, Weichao and Chang, Rocky KC and Gao, Debin},
  year={2015}, note = {\url{http://ink.library.smu.edu.sg/cgi/viewcontent.cgi?article=3920&context=sis_research}},
  booktitle = {11th International Conference on emerging Networking EXperiments and Technologies (CoNEXT
2015)},
}


@inproceedings{qiu2015,
  title={AppTrace: Dynamic trace on {Android} devices},
  author={Qiu, Lingzhi and Zhang, Zixiong and Shen, Ziyi and Sun, Guozi},
  booktitle={Communications (ICC), 2015 IEEE International Conference on},
  pages={7145--7150},
  year={2015},
  organization={IEEE}, note ={\url{https://daoyuan14.github.io/papers/ICC15_AppTrace.pdf}}, annote = {
  Lingzhi Qiu, Zixiong Zhang, Ziyi Shen, Guozi Sun
College of Computer
Nanjing University of Posts and Telecommunications, Nanjing, China
Abstract—Mass vulnerabilities involved in the {Android} alternative
applications could threaten the security of the launched
device or users data. To analyze the alternative applications,
generally, researchers would like to observe applications’ runtime
features first. Then they need to decompile the target application
and read the complicated code to figure out what the application
really does. Traditional dynamic analysis methodology, for instance,
the TaintDroid, uses dynamic taint tracking technique to
mark information at source APIs. However, TaintDroid is limited
to constraint on requiring target application to run in custom
sandbox that might be not compatible with all the {Android}
versions. For solving this problem and helping analysts to have
insight into the runtime behavior, this paper presents AppTrace, a
novel dynamic analysis system that uses dynamic instrumentation
technique to trace member methods of target application that
could be deployed in any version above {Android} 4.0. The paper
presents an evaluation of AppTrace with 8 apps from Google
Play as well as 50 open source apps from F-Droid. The results
show that AppTrace could trace methods of target applications
successfully and notify users effectively when some sensitive APIs
are invoked.
  },
}

@article{wu2014sink,
  title={A Sink-driven Approach to Detecting Exposed Component Vulnerabilities in {Android} Apps},
  author={Wu, Daoyuan and Luo, Xiapu and Chang, Rocky KC},
  journal={arXiv preprint arXiv:1405.6282},
  year={2014}, note = {\url{http://arxiv.org/pdf/1405.6282.pdf}}, annote = {
Daoyuan Wu, Xiapu Luo, and Rocky K. C. Chang
Department of Computing
The Hong Kong Polytechnic University
{csdwu, csxluo, csrchang}@comp.polyu.edu.hk
ABSTRACT
{Android} apps could expose their components for cooperating
with other apps. This convenience, however, makes apps
susceptible to the exposed component vulnerability (ECV),
in which a dangerous API (commonly known as sink) inside
its component can be triggered by other (malicious)
apps. In the prior works, detecting these ECVs use a set of
sinks pertaining to the ECVs under detection. In this paper,
we argue that a more comprehensive and effective approach
should start by a systematic selection and classification of
vulnerability-specific sinks (VSinks). The set of VSinks is
much larger than those used in the previous works. Based
on these VSinks, our sink-driven approach can detect different
kinds of ECVs in an app in two steps. First, VSinks
and their categories are identified through a typical forward
reachability analysis. Second, based on each VSink’s category,
a corresponding detection method is used to identify
the ECV via a customized backward dataflow analysis. We
also design a semi-auto guided analysis and validation capability
for system-only broadcast checking to remove some
false positives. We implement our sink-driven approach in
a tool called ECVDetector and evaluate it with the top 1K
{Android} apps. Using ECVDetector we successfully identify
a total of 49 vulnerable apps across all four ECV categories
we have defined. To our knowledge, most of them are previously
undisclosed, such as the very popular Go SMS Pro and
Clean Master. Moreover, the performance of ECVDetector
is high, requiring only 9.257 seconds on average to process
each component.
  },
}


@inproceedings{wen2015,
  title={PATS: A Parallel GUI Testing Framework for {Android} Applications},
  author={Wen, Hsiang-Lin and Lin, Chia-Hui and Hsieh, Tzong-Han and Yang, Cheng-Zen},
  booktitle={Computer Software and Applications Conference (COMPSAC), 2015 IEEE 39th Annual},
  volume={2},
  pages={210--215},
  year={2015},
  organization={IEEE}
}

@MastersThesis{brahler2010,
  title={Analysis of the {Android} architecture},
  author={Brahler, Stefan},
  school={Karlsruhe institute for technology},
  volume={7},
  year={2010}, note={\url{https://os.itec.kit.edu/downloads/sa_2010_braehler-stefan_Android-architecture.pdf}},
  annote = {
  Erstgutachter: Prof. Dr. Frank Bellosa
Betreuende Mitarbeiter: Dr. Jan Stoß, Dipl.-Inform. Konrad Miller ¨
Bearbeitungszeit: 2. Juni 2010– 6. Oktober 2010
  },
}
@inproceedings{mirzaei2015,
  title={Sig-droid: Automated system input generation for {Android} applications},
  author={Mirzaei, Nariman and Bagheri, Hamid and Mahmood, Riyadh and Malek, Sam},
  booktitle={Software Reliability Engineering (ISSRE), 2015 IEEE 26th International Symposium on},
  pages={461--471},
  year={2015},
  organization={IEEE}
}

@inproceedings{binder2015,
  title={Analyzing Distributed Multi-platform Java and {Android} Applications with ShadowVM},
  author={Binder, Walter},
  booktitle={Programming Languages and Systems: 13th Asian Symposium, APLAS 2015, Pohang, South Korea, November 30-December 2, 2015, Proceedings},
  volume={9458},
  pages={356},
  year={2015},
  organization={Springer}
}
@inproceedings{choudhary2015,
  title={Automated Test Input Generation for {Android}: Are We There Yet?(E)},
  author={Choudhary, Shauvik Roy and Gorla, Alessandra and Orso, Alessandro},
  booktitle={Automated Software Engineering (ASE), 2015 30th IEEE/ACM International Conference on},
  pages={429--440},
  year={2015},
  organization={IEEE},
 note={\url{http://arxiv.org/pdf/1503.07217.pdf}},
 annote ={ Shauvik Roy Choudhary
Georgia Institute of
Technology, USA
shauvik@cc.gatech.edu
Alessandra Gorla
IMDEA Software Institute,
Spain
alessandra.gorla@imdea.org
Alessandro Orso
Georgia Institute of
Technology, USA
orso@cc.gatech.edu},
}

@inproceedings{linares2015,
  title={Enabling testing of {Android} apps},
  author={Linares-V{\'a}squez, Mario},
  booktitle={Proceedings of the 37th International Conference on Software Engineering -- Volume 2},
  pages={763--765},
  year={2015},
  organization={IEEE Press}
}

@inproceedings{deng2015,
  title={Towards mutation analysis of {Android} apps},
  author={Deng, Lin and Mirzaei, Nariman and Ammann, Paul and Offutt, Jeff},
  booktitle={Software Testing, Verification and Validation Workshops (ICSTW), 2015 IEEE Eighth International Conference on},
  pages={1--10},
  year={2015},
  organization={IEEE}
}
@inproceedings{linares2015,
  title={Mining {Android} app usages for generating actionable GUI-based execution scenarios},
  author={Linares-V{\'a}squez, Mario and White, Martin and Bernal-C{\'a}rdenas, Carlos and Moran, Kevin and Poshyvanyk, Denys},
  booktitle={Proceedings of the 12th Working Conference on Mining Software Repositories},
  pages={111--122},
  year={2015},
  organization={IEEE Press}, note={\url{http://static1.squarespace.com/static/53065911e4b0cca0183fc14a/t/5567e11be4b0e9e46526adc2/1432871195982/MSR\%2715-MonkeyLab-CRC.pdf}},
}

@article{burket2015,
  title={Making DidFail Succeed: Enhancing the CERT Static Taint Analyzer for {Android} App Sets},
  author={Burket, Johnathon and Flynn, Lori and Klieber, Will and Lim, Jonathan and Snavely, William},
  year={2015}
}


@inproceedings{vanhatupa2015,
  title={Automatizing {Android} Unit and User Interface Testing},
  author={Vanhatupa, Juha-Matti and Heikkinen, Mikko and Oy, PacketVideo Finland},
  booktitle={Agile Processes, in Software Engineering, and Extreme Programming: 16th International Conference, XP 2015, Helsinki, Finland, May 25-29, 2015, Proceedings},
  volume={212},
  pages={373},
  year={2015},
  organization={Springer}
}

@article{van2015,
  title={Generation of Library Models for Verification of {Android} Applications},
  author={van der Merwe, Heila and Tkachuk, Oksana and van der Merwe, Brink and Visser, Willem},
  journal={ACM SIGSOFT Software Engineering Notes},
  volume={40},
  number={1},
  pages={1--5},
  year={2015},
  publisher={ACM}
}

@article{amalfitano2015,
  title={MobiGUITAR: Automated Model-Based Testing of Mobile Apps},
  author={Amalfitano, Domenico and Fasolino, Anna Rita and Tramontana, Porfirio and Ta, Bryan Dzung and Memon, Atif M},
  journal={Software, IEEE},
  volume={32},
  number={5},
  pages={53--59},
  year={2015},
  publisher={IEEE}
}

@inproceedings{adamsen2015,
  title={Systematic execution of {Android} test suites in adverse conditions},
  author={Adamsen, Christoffer Quist and Mezzetti, Gianluca and M{\o}ller, Anders},
  booktitle={Proceedings of the 2015 International Symposium on Software Testing and Analysis},
  pages={83--93},
  year={2015},
  organization={ACM}
}

@inproceedings{zhauniarovich2015towards,
  title={Towards Black Box Testing of {Android} Apps},
  author={Zhauniarovich, Yury and Philippov, Anton and Gadyatskaya, Olga and Crispo, Bruno and Massacci, Fabio},
  booktitle={Availability, Reliability and Security (ARES), 2015 10th International Conference on},
  pages={501--510},
  year={2015},
  organization={IEEE},
note = {\url{https://www.researchgate.net/profile/Yury_Zhauniarovich/publication/283540474_Towards_Black_Box_Testing_of_Android_Apps/links/563dcf9508ae45b5d28b48b1.pdf}},
}
@inproceedings{jadhav2015mobile,
  title={Mobile device penetration testing framework and platform for the mobile device security course},
  author={Jadhav, Suyash and Oh, Tae and Kim, Young Ho and Kim, Joeng Nyeo},
  booktitle={Advanced Communication Technology (ICACT), 2015 17th International Conference on},
  pages={675--680},
  year={2015},
  organization={IEEE}
}

@article{van2012verifying,
  title={Verifying {Android} applications using Java PathFinder},
  author={van der Merwe, Heila and van der Merwe, Brink and Visser, Willem},
  journal={ACM SIGSOFT Software Engineering Notes},
  volume={37},
  number={6},
  pages={1--5},
  year={2012},
  publisher={ACM}
}

@inproceedings{takala2011experiences,
  title={Experiences of system-level model-based GUI testing of an {Android} application},
  author={Takala, Tommi and Katara, Mika and Harty, Julian},
  booktitle={Software Testing, Verification and Validation (ICST), 2011 IEEE Fourth International Conference on},
  pages={377--386},
  year={2011},
  organization={IEEE}, note={\url{http://tema.cs.tut.fi/icst2011-TT.pdf} slides},
}

@incollection{jing2012model,
  title={Model-based conformance testing for {Android}},
  author={Jing, Yiming and Ahn, Gail-Joon and Hu, Hongxin},
  booktitle={Advances in Information and Computer Security},
  pages={1--18},
  year={2012},
  publisher={Springer},
  annote= {Clemson U; Abstract:
  With the surging computing power and network connectivity of smartphones, more third-party applications and services are deployed on these platforms and enable users to customize their mobile devices. Due to the lack of rigorous security analysis, fast evolving smartphone platforms, however, have suffered from a large number of system vulnerabilities and security flaws. In this paper, we present a model-based conformance testing framework for mobile platforms, focused on {Android} platform. Our framework systematically generates test cases from the formal specification of the mobile platform and performs conformance testing with the generated test cases. We also demonstrate the feasibility and effectiveness of our framework through case studies on {Android} Inter-Component Communication module.
  },
}

@inproceedings{shin2010formal,
  title={A formal model to analyze the permission authorization and enforcement in the {Android} framework},
  author={Shin, Wook and Kiyomoto, Shinsaku and Fukushima, Kazuhide and Tanaka, Toshiaki},
  booktitle={Social Computing (SocialCom), 2010 IEEE Second International Conference on},
  pages={944--951},
  year={2010},
  organization={IEEE}
}



@inproceedings{gomez2013reran,
  title={Reran: Timing-and touch-sensitive record and replay for {Android}},
  author={Gomez, Lorenzo and Neamtiu, Iulian and Azim, Tayyaba and Millstein, Todd},
  booktitle={Software Engineering (ICSE), 2013 35th International Conference on},
  pages={72--81},
  year={2013},
  organization={IEEE}, note = {\url{http://www.lorenzobgomez.com/publications/icse13gomez.pdf}},
}


@article{azim2013targeted,
  title={Targeted and depth-first exploration for systematic testing of {Android} apps},
  author={Azim, Tanzirul and Neamtiu, Iulian},
  journal={ACM SIGPLAN Notices},
  volume={48},
  number={10},
  pages={641--660},
  year={2013},
  publisher={ACM}
}


@inproceedings{wagner2015survey,
  title={A Survey of Visualization Systems for Malware Analysis},
  author={Wagner, Markus and Fischer, Fabian and Luh, Robert and Haberson, Andrea and Rind, Alexander and Keim, Daniel A and Aigner, Wolfgang},
  booktitle={EG Conference on Visualization (EuroVis)-STARs},
  pages={105--125},
  year={2015},  note = {\url{http://mc.fhstp.ac.at/sites/default/files/publications/wagner_2015_eurovis_star_malwarevis_postprint_reduced.pdf}},
}


@phdthesis{david2015,
  title={Connecting the Last Billion},
  author={David, Yahel Ben},
  note = {\url{http://www.eecs.berkeley.edu/Pubs/TechRpts/2015/EECS-2015-233.pdf}},
  year={2015},
  annote={
  A dissertation submitted in partial satisfaction of the
requirements for the degree of
Doctor of Philosophy
in
Engineering - Electrical Engineering and Computer Sciences
in the
Graduate Division
of the
University of California, Berkeley
Committee in charge:
Professor Eric Brewer, Chair
Professor Scott Shenker
Professor Tapan Parikh
Fall 2015
Abstract
Connecting the Last Billion
by
Yahel Ben David
Doctor of Philosophy in Engineering - Electrical Engineering and Computer Sciences
University of California, Berkeley
Professor Eric Brewer, Chair
The last billion people to join the online world, are likely to face at least one of two obstacles:
Part I: Rural Internet Access
Rural, sparsely populated, areas make conventional infrastructure investments unfeasible: Big
corporations attempt to address this challenge via the launch of Low-Earth-Orbiting (LEO) satellite
constellations, fleets of high-altitude balloons, and giant solar-powered drones; although these
grandiose initiatives hold potential, they are costly and risky. At the same time, small local operators,
Wireless Internet Service Providers (WISPs), are growing in numbers, in subscribe base and
in territory covered. WISPs can play a major role in serving a growing number of rural communities,
as well as offer real competition to incumbent operators in urban and semi-urban markets,
leading to better service at reduced costs.
The key motivation for this work is to lower the barriers-to-entry for small rural WISPs, and to
sustainably grow their operation — this has been my research focus for over 15 years.
The core of this work is based on a case-study of a WISP, FurtherReach — which we have
built from the ground up. This WISP brings broadband Internet service to hundreds of subscribers
at the south coast of Mendocino county in California. Through designing, deploying and operating
this venture, we learn about the real challenges faced by WISPs, develop technical solutions as
well as business models, operational methodologies and deployment strategies. The FurtherReach
case study is presented in chapter 2. Chapter 1 introduces the overall WISP ecosystem. In chapter
3 we discuss the potential of Software Defined Networks (SDN) to aid in WISP operations. Finally,
chapter 4 discusses the often overlooked computer-security concerns that are unique to rural
communities, especially in developing countries.
Part II: Dissent Networking
Oppressive regimes censor and restrict information flow. Sadly, Internet censorship, in some
countries, does not seem to be going away, and presents a growing challenge. The degree and effectiveness
of censorship varies greatly, as does the risk of getting caught circumventing it. Similarly,
the technologies to aid dissenters vary accordingly. My work in this field predates smart-phones,
which I believe could be made to offer safe and effective solutions even in the most dangerous
of countries. Should we consider these technologies Internet access? Once again the degree of
connectivity, and especially interactivity, from behind a censoring firewall, varies greatly.
In chapter 5, I present our attempt at defining the threats and narrating the exceptionally challenging
problem space. I find this chapter quite discouraging as it dictates exceptional restrictions
on the design space, yet ignoring these constraints may put users of the technology in greater risks
than without it. It makes us question if technology can help at all?
I continue in chapter 6, to present Rangzen, our initial attempt at designing a solution that
adheres to the strict constraints presented in 5. While limited in functionality, especially given
its delay-tolerant approach, which is incompatible with many Internet applications that expect
real-time interactivity, it does successfully follow our design guidelines for dissent technologies
as presented in chapter 5. We have built an {Android} app, Rangzen, based on these design specifications,
which undergoes a beta testing program at the time of this writing. The app will be
distributed freely on the {Android} store in January 2016, and the code is open source and available
to the public.
  },
}

@article{hansen2015continuous,
  title={Continuous Delivery with Docker},
  author={Hansen, Emil Aln{\ae}s Joakim Klevmo and Heide, Henrik},
  year={2015}
}
@article{feizollah2015review,
  title={A review on feature selection in mobile malware detection},
  author={Feizollah, Ali and Anuar, Nor Badrul and Salleh, Rosli and Wahab, Ainuddin Wahid Abdul},
  journal={Digital Investigation},
  volume={13},
  pages={22--37},
  year={2015},
  publisher={Elsevier}
}

@incollection{o2015malware,
  title={Malware and Persistence},
  author={O’Leary, Mike},
  booktitle={Cyber Operations},
  pages={367--410},
  year={2015},
  publisher={Springer}
}

@article{reshetova2015,
  title={Characterizing {SEAndroid} Policies in the Wild},
  author={Reshetova, Elena and Bonazzi, Filippo and Nyman, Thomas and Borgaonkar, Ravishankar and Asokan, N},
  journal={arXiv preprint arXiv:1510.05497},
  year={2015}
}

@article{merlo2016,
  author = {Merlo, Alessio and Costa, Gabriele and Verderame, Luca and Armando, Alessandro},
  title = {{Android} vs. {SEAndroid}: An Empirical Assessment},
  journal = {Pervasive and Mobile Computing},
  year = {2016},
  publisher = {Elsevier}
}

@incollection{gelenbe2013nemesys,
  title={NEMESYS: Enhanced network security for seamless service provisioning in the smart mobile ecosystem},
  author={Gelenbe, Erol and G{\"o}rbil, G{\"o}k{\c{c}}e and Tzovaras, Dimitrios and Liebergeld, Steffen and Garcia, David and Baltatu, Madalina and Lyberopoulos, George},
  booktitle={Information Sciences and Systems 2013},
  pages={369--378},
  year={2013},
  note={\url{http://arxiv.org/pdf/1305.5483.pdf}},
  publisher={Springer},
}

@incollection{hein2016,
  title={Characterization of Malware Detection on {Android} Application},
  author={Hein, Chit La Pyae Myo and Myo, Khin Mar},
  booktitle={Genetic and Evolutionary Computing},
  pages={113--124},
  year={2016},
  publisher={Springer},
}

@incollection{hashim2016systematic,
  title={A Systematic Review Analysis of Root Exploitation for Mobile Botnet Detection},
  author={Hashim, Hasan Al-Banna and Saudi, Madihah Mohd and Basir, Nurlida},
  booktitle={Advanced Computer and Communication Engineering Technology},
  pages={113--122},
  year={2016},
  publisher={Springer}
}

@inproceedings{bugiel2012towards,
  title={Towards Taming Privilege-Escalation Attacks on {Android}},
  author={Bugiel, Sven and Davi, Lucas and Dmitrienko, Alexandra and Fischer, Thomas and Sadeghi, Ahmad-Reza and Shastry, Bhargava},
  booktitle={NDSS},
  year={2012},
  pages = {18},
 note={\url{
  http://core.ac.uk/download/files/544/18286747.pdf}},
}

@TechReport{andriller,
  author =       {Andriller},
  title =        {Andriller Smartphone Forensic Decoder},
  institution =  {andriller.com},
  year =         {2015},
  OPTkey =       {},
  OPTtype =      {},
  OPTnumber =    {},
  OPTaddress =   {},
  OPTmonth =     {},
  OPTnote =      {},
  annote =    {Andriller is collection of forensic tools for
                  smartphones. It performs read-only, forensically
                  sound, non-destructive acquisition from {Android}
                  devices. It has other features, such as powerful
                  Lockscreen cracking for Pattern, PIN code, or
                  Password; custom decoders for Apps data from {Android}
                  (and some Apple iOS) databases for decoding
                  communications. Extraction and decoders produce
                  reports in HTML and Excel (.xlsx) formats.},
}

@inproceedings{dietz2011quire,
  title={QUIRE: Lightweight Provenance for Smart Phone Operating Systems},
  author={Dietz, Michael and Shekhar, Shashi and Pisetsky, Yuliy and Shu, Anhei and Wallach, Dan S},
  booktitle={USENIX Security Symposium},
  pages={24},
  year={2011}, note = {\url{
  http://static.usenix.org/event/sec11/tech/full_papers/Dietz.pdf}},
  annote ={rice.edu},
}


@article{almohri2014b,
  author={Almohri, H.M.J. and Danfeng Yao and Kafura, D.}, 
journal={Dependable and Secure Computing, IEEE Transactions on}, 
title={Process Authentication for High System Assurance}, 
year={2014}, 
volume={11}, 
number={2}, 
pages={168-180}, 
keywords={Linux;authorisation;cryptography;operating system kernels;software architecture;software performance evaluation;system monitoring;Linux;cryptographic authenticating applications;high system assurance;modern operating system kernels;monitoring architecture;performance evaluation;process authentication mechanism;process identification;requested system calls;secure application authentication framework;system call monitoring framework;unauthorized system resource access prevention;unauthorized system resource use prevention;user-level application;Authentication;Kernel;Malware;Monitoring;Runtime;Operating system security;process authentication;secret application credential;system call monitoring}, 
doi={10.1109/TDSC.2013.29}, 
ISSN={1545-5971}, 
month={March},
}


@Article{Amalfitano2013,
  author =       "Domenico Amalfitano and Anna Rita Fasolino and
                 Porfirio Tramontana and Bryan Robbins†",
  title =        "Testing {Android} Mobile Applications: Challenges,
                 Strategies, and Approaches",
  journal =      "Advances in Computers",
  year =         "2013",
  OPTkey =       "",
  OPTvolume =    "89",
  OPTnumber =    "",
  OPTpages =     "1--52",
  OPTmonth =     "",
  OPTnote =      "",
  annote =       "Abstract Recently, the rise in popularity of mobile
                 applications for mobile devices and the growth
                 estimates for this market make mobile application
                 development a strategic business sector. As a variety
                 of new scenarios for mobile devices and applications
                 emerges, users and developers will require improved
                 reliability, usability, performance, and security. In
                 such a context, open platforms for mobile application
                 development, such as the {Android} operating system, are
                 assuming a preponderant role. To satisfy this growing
                 request for high quality applications, developers must
                 devote greater effort and attention to software
                 development processes. In particular, testing and its
                 automation play a strategic part for assuring the
                 quality of applications. This chapter analyzes the main
                 challenges and open issues in the field of mobile
                 application testing for the {Android} platform, with an
                 emphasis on advances in the field. We present suitable
                 and effective principles, guidelines, models,
                 techniques, and technologies for {Android} application
                 testing and conclude with an outline of future
                 perspectives.",
}

@TechReport{replicant-2015,
  author =       "Team Replicant",
  title =        "Replicant -- {A} Free {Android} Distro",
  institution =  "replicant.us",
  year =         "2015",
  note =         {\url{http://www.replicant.us/freedom-privacy-security-issues.php},
  annote =       "Replicant is a fully free {Android} distribution running
                 on several devices, a free software mobile operating
                 system putting the emphasis on freedom and
                 privacy/security",
}

@TechReport{Perry2014,
  author =       "Mike Perry",
  title =        "Mission Impossible: Hardening {Android} for Security and
                 Privacy",
  institution =  "blog.torproject.org",
  year =         "2014",
  note =         {\url{https://blog.torproject.org/blog/mission-impossible-hardening-{Android}-security-and-privacy},
  annote =       "This blog post describes the installation and
                 configuration of a prototype of a secure,
                 full-featured, {Android} telecommunications device with
                 full Tor support, individual application firewalling,
                 true cell network baseband isolation, and optional ZRTP
                 encrypted voice and video support. ZRTP does run over
                 UDP which is not yet possible to send over Tor, but we
                 are able to send SIP account login and call setup over
                 Tor independently. The SIP client we recommend also
                 supports dialing normal telephone numbers if you have a
                 SIP gateway that provides trunking service. Aside from
                 a handful of binary blobs to manage the device firmware
                 and graphics acceleration, the entire system can be
                 assembled (and recompiled) using only FOSS components.
                 However, as an added bonus, we will describe how to
                 handle the Google Play store as well, to mitigate the
                 two infamous Google Play Backdoors.",
}

@InProceedings{simon2015,
  title =        "Security analysis of {Android} factory resets",
  author =       "Laurent Simon and Ross Anderson",
  booktitle =    "3rd Mobile Security Technologies Workshop (MoST)",
  year =         "2015",
  note =         {\url{http://www.cl.cam.ac.uk/~rja14/Papers/fr_most15.pdf}},
}

@InProceedings{carlini2014,
  title =        {{ROP} is still dangerous: Breaking modern defenses},
  author =       "Nicholas Carlini and David Wagner",
  booktitle =    "USENIX Security Symposium",
  year =         "2014",
  note =         {\url{https://www.usenix.org/system/files/conference/usenixsecurity14/sec14-paper-carlini.pdf}},
}

@InCollection{kizza2013,
  title =        "Computer Crime Investigations and Ethics",
  author =       "Joseph Migga Kizza",
  booktitle =    "Ethical and Social Issues in the Information Age",
  pages =        "299--312",
  year =         "2013",
  publisher =    "Springer",
}

@InProceedings{Apvrille2014,
  author =       "Axelle Apvrille and Ange Albertini",
  title =        "Hide {Android} Applications in Images",
  OPTcrossref =  "",
  OPTkey =       "",
  year =         "2014",
  OPTeditor =    "",
  OPTvolume =    "",
  OPTnumber =    "",
  OPTseries =    "",
  OPTpages =     "",
  OPTmonth =     "",
  OPTaddress =   "",
  organization = "blackhat.com",
  OPTpublisher = "",
  note =      {\url{https://www.blackhat.com/docs/eu-14/materials/eu-14-Apvrille-Hide-{Android}-Applications-In-Images-wp.pdf}},
  annote =       "Axelle Apvrille, Fortinet, FortiGuard Labs 120, rue
                 Albert Caquot 06410 Biot, France aapvrille@fortinet.com
                 Ange Albertini, Corkami ange@corkami.com September 18,
                 2014 Abstract With AngeCryption, [Alb14b] has
                 demonstrated it is possible to encrypt any input into a
                 chosen JPG or PNG image. For a mobile malware author,
                 this is particularly interesting when applied to
                 {Android} packages (APK). Indeed, in that case, an
                 attacker can craft a seemingly genuine wrapping APK
                 which contains a valid image (e.g a logo) as resource
                 or asset. However, the code is able to transform this
                 unsuspicious image into another APK, carrying the
                 malicious payload. The attacker installs that APK, and
                 performs his/her nefarious deeds. Such an attack is
                 highly likely to go unnoticed, because the wrapping APK
                 hardly has anything suspicious about it, and nothing
                 about the payload APK leaks as it is encrypted.
                 Additionally, the attack works with any payload and
                 currently on any version of {Android}. In short, what you
                 see is on the left (an image). What there really is on
                 the right (an {Android} application).",
}

@Article{RATC2014,
  author =       "Web Forums",
  title =        {Android} Rooting Technique: Rage Against The Cage",
  journal =      "Forums Web",
  year =         "2014",
  OPTkey =       "",
  OPTvolume =    "",
  OPTnumber =    "",
  OPTpages =     "",
  OPTmonth =     "",
  OPTnote =      "",
  annote =       {z4root,
\url{http://www.programering.com/a/MjNwETNwATE.html} ;
\url{http://blog.k7computing.com/2014/11/how-vulnerable-is-{Android}-to-attack};
\url{http://blog.k7computing.com/2014/11/how-vulnerable-is-{Android}-to-attack-part-2};
\url{http://www.cnphp6.com/archives/21576};
\url{https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2010/september/{Android}-root-source-code-looking-at-the-c-skills/}},
}

@Article{meng2013,
  title =        "Collaborative Security: {A} Survey and Taxonomy",
  author =       "Guozhu Meng and Yang Liu and Jie Zhang and Alexander
                 Pokluda and Raouf Boutaba",
  year =         "2013",
  annote =       "ACM Computing Surveys, Vol. V, No. N, Article A,
                 Publication date: January YYYY.; Guozhu Meng, Nanyang
                 Technological University, Singapore Yang Liu, Nanyang
                 Technological University, Singapore Jie Zhang, Nanyang
                 Technological University, Singapore Alexander Pokluda,
                 University of Waterloo, Canada Raouf Boutaba,
                 University of Waterloo, Canada Security is oftentimes
                 centrally managed. An alternative trend of using
                 collaboration in order to improve security has gained
                 momentum over the past few years. Collaborative
                 security is an abstract concept that applies to a wide
                 variety of systems, and has been used to solve security
                 issues inherent in distributed environments. Thus far,
                 collaboration has been used in many domains such as
                 intrusion detection, spam filtering, botnet resistance,
                 and vulnerability detection. In this survey, we focus
                 on different mechanisms of collaboration and defense in
                 collaborative security. We systematically investigate
                 numerous use cases of collaborative security by
                 covering six types of security systems. Aspects of
                 these systems are thoroughly studied, including their
                 technologies, standards, frameworks, strengths and
                 weaknesses. We then present a comprehensive study with
                 respect to their analysis target, timeliness of
                 analysis, architecture, network infrastructure,
                 initiative, shared information and interoperability. We
                 highlight five important topics in collaborative
                 security, and identify challenges and possible
                 directions for future research. Our work contributes
                 the following to the existing research on collaborative
                 security with the goal of helping to make collaborative
                 security systems more resilient and efficient. This
                 study: (1) clarifies the scope of collaborative
                 security; (2) identifies the essential components of
                 collaborative security; (3) analyzes the multiple
                 mechanisms of collaborative security, and; (4)
                 identifies challenges in the design of collaborative
                 security. Categories and Subject Descriptors: C.2.0
                 [Computer-Communication Networks]: General—Security
                 and Protection; D.4.6 [Operating Systems]: Security and
                 Protection—Invasive Software; H.5.3 [Information
                 Interfaces and Presentation]: Group and Organization
                 Interfaces—Collaborative Computing General Terms:
                 Design, Performance, Security Additional Key Words and
                 Phrases: Collaborative Security, Taxonomy, Privacy,
                 Trust, Intrusion Detection, Spam, Malware, Information
                 Sharing ACM Reference Format: Guozhu Meng, Yang Liu,
                 Jie Zhang, Alexander Pokluda, Raouf Boutaba, 2015.
                 Collaborative Security: A Survey and Taxonomy. ACM
                 Comput. Surv. V, N, Article A (January YYYY), 38 pages.
                 DOI:http://dx.doi.org/10.1145/0000000.0000000",
}

@Article{floyd2011,
  title =        {Android Pentest Tools},
  author =       "Floyd",
  journal =      {\url{http://www.floyd.ch/?tag=arm},
  year =         "2011",
  note =         "download:
                 \url{http://www.floyd.ch/download/{Android}-pentest-tools.zip},
}

@Article{lee2013,
  title =        {Detection and prevention of LeNa Malware on {Android}},
  author =       "Hwan-Taek Lee and Minkyu Park and Seong-Je Cho",
  journal =      "Journal of Internet Services and Information Security
                 (JISIS)",
  volume =       "3",
  number =       "3/4",
  pages =        "63--71",
  year =         "2013",
}

@InProceedings{ham2012,
  title =        "Vulnerability monitoring mechanism in {Android} based
                 smartphone with correlation analysis on event-driven
                 activities",
  author =       "You-Joung Ham and Won-Bin Choi and Hyung-Woo Lee and
                 JaeDeok Lim and Jeong Nyeo Kim",
  booktitle =    "Computer Science and Network Technology (ICCSNT), 2012
                 2nd International Conference on",
  pages =        "371--375",
  year =         "2012",
  organization = "IEEE",
}

@Article{zonouz2013,
  title =        "Secloud: {A} cloud-based comprehensive and lightweight
                 security solution for smartphones",
  author =       "Saman Zonouz and Amir Houmansadr and Robin Berthier
                 and Nikita Borisov and William Sanders",
  journal =      "Computers \& Security",
  volume =       "37",
  pages =        "215--227",
  year =         "2013",
  publisher =    "Elsevier",
}

@InProceedings{nigam2014,
  title =        "A Timeline Of Mobile Botnets",
  author =       "Ruchna Nigam",
  booktitle =    "Botconf'15 The botnet fighting conference - Third
                 edition",
  note =         {\url{https://www.botconf.eu/wp-content/uploads/2014/12/2014-2.2-A-Timeline-of-Mobile-Botnets-PAPER.pdf}},
  year =         "2014",
}

@InProceedings{gorbans2015,
  title =        "The Myths of and Solutions for {Android} {OS} Controlled
                 and Secure Environment",
  author =       "Imants Gorb{\=a}ns and Ivans Kulesovs and Uldis
                 Straujums and J{\=a}nis Buls",
  booktitle =    "Environment. Technology. Resources. Proceedings of the
                 International Scientific and Practical Conference",
  volume =       "3",
  pages =        "54--64",
  year =         "2015",
  note =         {\url{http://journals.ru.lv/index.php/ETR/article/download/184/688},
  annote =       "Imants Gorbans1, a, Ivans Kulesovs1, b, Uldis
                 Straujums1, c, Jānis Buls2, d 1 Faculty of Computing,
                 University of Latvia, Raiņa bulvāris 19, Riga,
                 LV-1586, Latvia 2 Faculty of Physics and Mathematics,
                 University of Latvia, Raiņa bulvāris 19, Riga,
                 LV-1586, Latvia a Imants.Gorbans@lu.lv, b
                 Ivans.Kulesovs@gmail.com, c Uldis.Straujums@lu.lv, d
                 Janis.Buls@lu.lv Abstract. {Android} is today’s most
                 popular mobile operating system for both smartphones
                 and tablets. This fact creates many risks which are not
                 fully recognized. Even advanced users often naively
                 think that by using antivirus software, a firewall,
                 encryption and updates, as well as avoiding potentially
                 risky sites and applications they will be secure. This
                 list is not exhaustive, but nevertheless, in most
                 cases, each item in it only provides the illusion of
                 security. The authors have summarized and pointed out
                 several actual {Android} security issues and have
                 proposed a number of possible solutions. Practical
                 experience as well as direct testing reveals that some
                 {Android} applications may contain malware. The harmful
                 characteristics of an application often become visible
                 only after it has been run a few times, after an
                 update, or after harmful web content has been
                 downloaded and shown by the application. It has been
                 observed that applications often try to get
                 unauthorized or inattentively authorized access to user
                 data and to send it outside the device. The situation
                 with {Android} applications is getting more and more out
                 of control. The authors have proposed a solution for
                 overcoming security issues, while respecting the latest
                 Google solutions. The target group of the proposal is
                 users who use a smartphone or tablet both for private
                 and corporate needs, i.e. a Bring Your Own Device
                 (BYOD) case. The authors point out and compare four
                 possible {Android} technical administration solutions
                 based on the unified model for a BYOD case. The authors
                 also propose changes to {Android} architecture to enhance
                 its security. A look at the mobile operating system, as
                 a web server, has been proposed. Such a principle
                 allows the implementation of a number of security
                 principles taken from web servers solutions. Keywords:
                 {Android}, mobile computing, security, BYOD, smartphones,
                 ICT",
}

@InProceedings{rasthofer2015,
  title =        "Droidsearch: {A} tool for scaling {Android} app triage
                 to real-world app stores",
  author =       "Siegfried Rasthofer and Steven Arzt and Stephan Huber
                 and Max Kohlhagen and Brian Pfretschner and Eric Bodden
                 and Philipp Richter",
  booktitle =    "Proceedings of the IEEE Technically Co-Sponsored
                 Science and Information Conference",
  year =         "2015",
  note =         {\url{http://www.bodden.de/pubs/rak+15droidsearch.pdf}},
  annote =       "Siegfried Rasthofer1 , Steven Arzt1 , Max Kolhagen1 ,
                 Brian Pfretzschner1 , Stephan Huber2 , Eric Bodden1,2 ,
                 Philipp Richter3 Center for Advanced Security Research
                 Darmstadt (CASED) 1 Technische Universitat Darmstadt,
                 Germany ¨ 2 Fraunhofer SIT, Darmstadt, Germany 3
                 Universitat Kassel, Germany ¨
                 {firstname.lastname}@cased.de Abstract—The {Android}
                 platform now features more than a million apps from
                 thousands of developers. This abundance is convenient,
                 as it caters to almost every need. But users and
                 researchers also worry about the security and
                 trustworthiness of these apps. While precise
                 program-analysis tools are helpful in this context,
                 unfortunately they do not scale to the large number of
                 apps present in current app stores. In this work we
                 thus present DROIDSEARCH, a search engine that aids a
                 multi-staged analysis in which fast pre-filtering
                 techniques allow security experts to quickly retrieve
                 candidate applications that should be subjected to
                 further automated and/or manual analysis. DROIDSEARCH
                 is supported by DROIDBASE, a middleware and back-end
                 database which associates apps with metadata and the
                 results of lightweight analyses on bytecode and
                 configuration files that DROIDBASE automatically
                 manages and executes. Experiments on more than 235,000
                 applications from six different application stores
                 including Google Play reveal many interesting findings.
                 For instance, DROIDSEARCH identifies 40 known malware
                 applications in Google Play and detects over 35,000
                 applications that use both http and https connections
                 for accessing the same resources, effectively rendering
                 the https protection ineffective. It also reveals
                 11,995 applications providing access to potentially
                 sensitive data through unprotected content providers.",
}

@Article{tan2015,
  title =        "Securing {Android}: {A} Survey, Taxonomy, and
                 Challenges",
  author =       "Darell JJ Tan and Tong-Wei Chua and Vrizlynn LL Thing
                 and others",
  journal =      "ACM Computing Surveys (CSUR)",
  volume =       "47",
  number =       "4",
  pages =        "58",
  year =         "2015",
  publisher =    "ACM",
}

@Article{paul-irvine-2015,
  title =        "Achieving Optional {Android} Permissions Without
                 Operating System Modifications",
  author =       "Greig Paul and James Irvine",
  journal =      "IEEE 81st Vehicular Tech Conf",
  year =         "2015",
  note =         {\url{http://strathprints.strath.ac.uk/52239/1/Paul_Irvine_VTC2015_5G_optional_{Android}_permissions_without_operating_system_modifications.pdf},
}

@Article{wei2015,
  title =        {Android’s External Device Attack: Demonstration and
                 Security Suggestions},
  author =       "Zhang Wei and Yang Chao and Chen Yunfang",
  journal =      "International Journal of Security \& Its
                 Applications",
  volume =       "9",
  number =       "4",
  year =         "2015",
  note =         {\url{http://www.sersc.org/journals/IJSIA/vol9_no4_2015/29.pdf}},
  annote =       "Zhang Wei, Yang Chao and Chen Yunfang* Nanjing
                 University of Posts and Telecommunications
                 chenyf@njupt.edu.cn Abstract A large number of users
                 choose to manage their {Android} phones via assistant
                 software based on the ADB tool. These users face
                 threats of a variety of attacks, such as external
                 device attacks, because the current {Android} system’s
                 security mechanism does not pay sufficient attention to
                 the safety of the ADB tool. This paper provides a
                 detailed introduction of the ADB tool and discusses
                 threats its use can bring. These threats include
                 silently installing malicious apps, pushing malicious
                 privilege escalation files to the phone, copying
                 private files from the phone, risking opening TCP
                 debugging mode, and introducing vulnerabilities by the
                 ADB tool. We demonstrate a peripheral device attack is
                 presented to help understand how the designed and
                 implemented flaws can be used to bypass security
                 protection. The demonstration is realised by Raspberry
                 Pi, an open-source single chip computer that can run an
                 ARM-based Linux system. Finally, some suggestions are
                 proposed for security improvements to address threats
                 introduced by the ADB tool. Keyword: {Android} Security;
                 ADB Tool; External Device Attack; Security
                 Suggestions",
}


@InProceedings{poeplau2014,
  title =        "Execute this! analyzing unsafe and malicious dynamic
                 code loading in {Android} applications",
  author =       "Sebastian Poeplau and Yanick Fratantonio and Antonio
                 Bianchi and Christopher Kruegel and Giovanni Vigna",
  booktitle =    "Proceedings of the 20th Annual Network \& Distributed
                 System Security Symposium (NDSS)",
  year =         "2014",
  note =         {\url{https://seclab.cs.ucsb.edu/media/uploads/papers/2014_ndss_{Android}-remote-code-execution.pdf}},
}

@InProceedings{sedano2015,
  title =        "On the Selection of Key Features for {Android} Malware
                 Characterization",
  author =       "Javier Sedano and Camelia Chira and Silvia
                 Gonz{\'a}lez and {\'A}lvaro Herrero and Emilio Corchado
                 and Jos{\'e} Ram{\'o}n Villar",
  booktitle =    "Advances in Intelligent Systems and Computing",
  pages =        "167--176",
  year =         "2015",
  organization = "Springer",
}

@InProceedings{Maier2014,
  title =        "Divide-and-Conquer: Why {Android} Malware Cannot Be
                 Stopped",
  author =       "D. Maier and T. Muller and M. Protsenko",
  booktitle =    "Availability, Reliability and Security (ARES), 2014
                 Ninth International Conference on",
  year =         "2014",
  month =        sep,
  pages =        "30--39",
  keywords =     {Android} (operating system);divide and conquer
                 methods;invasive software;mobile computing;program
                 diagnostics;API;AV solutions;{Android}
                 malware;{Android}-based analysis system
                 fingerprinting;Google Bouncer;Google Play
                 Store;Sand-Finger;automated analysis
                 systems;divide-and-conquer attacks;dynamic code
                 loading;malicious code;malware scanning;mobile
                 sandboxes;proof-of-concept malware;static
                 analysis;{Android}s;Google;Hardware;Humanoid
                 robots;Malware;Mobile communication;Smart
                 phones;AV;{Android} Malware;Google Bouncer;Mobile
                 Sandboxes;Obfuscation;Static and Dynamic Analysis",
  doi =          "10.1109/ARES.2014.12",
}

@Article{maier2015,
  title =        {A Game of Droid and Mouse: The Threat of
                 Split-Personality Malware on {Android}},
  author =       "Dominik Maier and Mykola Protsenko and Tilo
                 M{\"u}ller",
  journal =      "Computers \& Security",
  year =         "2015",
  publisher =    "Elsevier",
   note = {\url{https://www.researchgate.net/profile/Dominik_Maier/publication/277947311_A_Game_of_Droid_and_Mouse_The_Threat_of_Split-Personality_Malware_on_Android/links/56a7f8c508ae997e22bc29a1.pdf}},
}

@Article{martini2015,
  title =        "Conceptual evidence collection and analysis
                 methodology for {Android} devices",
  author =       "Ben Martini and Quang Do and Kim-Kwang Raymond Choo",
  journal =      "arXiv preprint arXiv:1506.05527",
  year =         "2015",
  note =         {\url{http://arxiv.org/pdf/1506.05527.pdf}},
  annote =       "Abstract {Android} devices continue to grow in
                 popularity and capability meaning the need for a
                 forensically sound evidence collection methodology for
                 these devices also increases. This chapter proposes a
                 methodology for evidence collection and analysis for
                 {Android} devices that is, as far as practical, device
                 agnostic. {Android} devices may contain a significant
                 amount of evidential data that could be essential to a
                 forensic practitioner in their investigations. However,
                 the retrieval of this data requires that the
                 practitioner understand and utilize techniques to
                 analyze information collected from the device. The
                 major contribution of this research is an in-depth
                 evidence collection and analysis methodology for
                 forensic practitioners. Keywords {Android} forensics,
                 digital forensics, evidence collection, evidence
                 analysis, mobile analysis, mobile forensics, mobile
                 evidence.",
}

@Book{ratabouil2015,
  title =        {Android {NDK}: Beginner's Guide},
  author =       "Sylvain Ratabouil",
  year =         "2015",
  publisher =    "Packt Publishing Ltd",
}

@Article{read2015,
  title =        "Locking Out the Investigator: The Need to Circumvent
                 Security in Embedded Systems",
  author =       "Huw Read and Iain Sutherland and Konstantinos Xynos
                 and Frode Roarson",
  journal =      "Information Security Journal: A Global Perspective",
  number =       "ahead-of-print",
  pages =        "1--9",
  year =         "2015",
  publisher =    "Taylor \& Francis",
}

@TechReport{huang2012,
  title =        {Android {IPC} Mechanism},
  author =       "Jim Huang",
  institution =  "0xlab.org",
  year =         "2012",
  month =        "3",
  publisher =    "Mar. de",
  keywords =     "Binder",
  note =         {\url{http://elastos.org/elorg_files/FreeBooks/Android/Android-binder-ipc.pdf}},
  annote =       "slides, jserv@0xlab.org",
}

@Article{huangdefdroid,
  title =        "DefDroid: Securing {Android} with Fine-Grained Security
                 Policy",
  author =       "Chao Huang and Shuohong Wang and Haiyang Sun and
                 Zhengwei Qi",
  note =         {\url{http://ksiresearchorg.ipage.com/seke/seke15paper/seke15paper_162.pdf}},
  annote =       "DOI reference number: 10.18293/SEKE2015-162; Chao
                 Huang School of Software Shanghai Jiao Tong University
                 Shanghai, China bujingyun beta@sjtu.edu.cn Shuohong
                 Wang School of Computer Science Fudan University
                 Shanghai, China sh wang@fudan.edu.cn Haiyang Sun
                 Faculty of Informatics Universita della Svizzera
                 italiana ` Lugano, Switzerland haiyang.sun@usi.ch
                 Zhengwei Qi School of Software Shanghai Jiao Tong
                 University Shanghai, China qizhwei@sjtu.edu.cn;;
                 Abstract—{Android} occupies the absolute dominant
                 position in mobile operating system and has the largest
                 market share. Meanwhile, {Android} faces the risk of
                 malicious insiders leaking sensitive information. In
                 this paper, we present DefDroid, a repackaging tool for
                 enforcing security policies by modifying {Android}
                 applications without root privilege. The main
                 advantages of DefDroid are that it provides a
                 user-friendly interface to configure fine-grained
                 policies and it supplies multiple deployment methods.
                 We have implemented policies aimed at three types of
                 services of {Android} system, i.e., content provider,
                 file system, and network. We choose 74 arbitrary
                 applications from {Android} market and the experimental
                 results show that the successful rate of repackaging
                 applications is about 94.6\% which effectively improve
                 the privacy security of {Android} system while the
                 increased overhead can be tolerated.
                 Keywords—{Android}; permission restriction; repackage;
                 bytecode instrumentation",
}

@Article{park2015,
  title =        "Studying Security Weaknesses of {Android} System.",
  author =       "Jae-Kyung Park and Sang-Yong Choi",
  journal =      "International Journal of Security \& Its
                 Applications",
  volume =       "9",
  number =       "3",
  year =         "2015",
}

@Article{wright2012,
  title =        "The {Symantec} Smartphone Honey Stick Project",
  author =       "Scott Wright",
  journal =      "Symantec Corporation, Mar",
  year =         "2012",
}

@InProceedings{szekeres2013,
  title =        "Sok: Eternal War in Memory",
  author =       "L{\'a}szl{\'o} Szekeres and Mathias Payer and Tao Wei
                 and Dong Song",
  booktitle =    "Security and Privacy (SP), 2013 IEEE Symposium on",
  pages =        "48--62",
  year =         "2013",
  organization = "IEEE",
  note =         {\url{http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6547101}
                 \url{http://www.cs.berkeley.edu/~dawnsong/papers/Oakland13-SoK-CR.pdf}},
}

@Article{kayaalp2015,
  title =        "Signature-Based Protection from Code Reuse Attacks",
  author =       "Mehmet Kayaalp and Timothy Schmitt and Junaid Nomani
                 and Dmitry Ponomarev and Nael Abu Ghazaleh",
  journal =      "Computers, IEEE Transactions on",
  volume =       "64",
  number =       "2",
  pages =        "533--546",
  year =         "2015",
  publisher =    "IEEE",
}

@InProceedings{berger2006,
  title =        {DieHard: Probabilistic Memory Safety for Unsafe
                 Languages},
  author =       "Emery D Berger and Benjamin G Zorn",
  booktitle =    "ACM SIGPLAN Notices",
  volume =       "41",
  number =       "6",
  pages =        "158--168",
  year =         "2006",
  organization = "ACM",
  note =         {\url{http://scholarworks.umass.edu/cgi/viewcontent.cgi?article=1086&context=cs_faculty_pubs},
}

@MastersThesis{kornau2010,
  title =        "Return oriented programming for the {ARM}
                 architecture",
  author =       "Tim Kornau",
  school =       "Ruhr-Universitat Bochum, Germany",
  year =         "2010",
  key =          "ASLR, ROP",
  OPTtype =      "",
  OPTaddress =   "",
  OPTmonth =     "",
  note =         {\url{http://zynamics.com/downloads/kornau-tim--diplomarbeit--rop.pdf}},
  OPTannote =    "",
}

@Article{davi2014,
  author = {Davi, Lucas and Daniel Lehmann and Ahmad-Reza Sadeghi and
                  Fabian Monrose},
  title =        "Stitching the gadgets: On the ineffectiveness of
                  coarse-grained control-flow integrity protection.",
journal ={USENIX   Security Symposium. 2014.},
year = {2014},
   }

@Article{davi2010,
  title =        {Return-Oriented Programming Without Returns on {ARM}},
  author =       "Lucas Davi and Alexandra Dmitrienko and Ahmad-Reza
                 Sadeghi and Marcel Winandy",
  journal =      "System Security Lab-Ruhr University Bochum, Tech.
                 Rep",
  year =         "2010",
  note =         {\url{http://www.hgi.ruhr-uni-bochum.de/media/trust/veroeffentlichungen/2010/07/21/ROP-without-Returns-on-ARM.pdf}},
}

@InProceedings{davi2011,
  title =        {{ROP}defender: A detection tool to defend against
                 return-oriented programming attacks},
  author =       "Lucas Davi and Ahmad-Reza Sadeghi and Marcel Winandy",
  booktitle =    "Proceedings of the 6th ACM Symposium on Information,
                 Computer and Communications Security",
  pages =        "40--51",
  year =         "2011",
  organization = "ACM",
  note =         {\url{http://extlibres.ru/media/storage/1/ROP/davi2011ropdefender.pdf}},
}


@TechReport{DRMdefeat2014,
  author =       "Mike Park",
  title =        "Capturing Ghosts: Using inotify to defeat an {{Android}}
                 {DRM} system",
  institution =  "trustwave.com",
  year =         "2014",
  OPTkey =       "",
  OPTtype =      "",
  OPTnumber =    "",
  OPTaddress =   "",
  OPTmonth =     "",
  note =         {\url{https://www.trustwave.com/Resources/SpiderLabs-Blog/Capturing-Ghosts--Using-inotify-to-defeat-an-Android-DRM-system/},
  OPTannote =    "",
}

@Article{larsen2015,
  title =        "Automatic Software Diversity",
  author =       "Per Larsen and Stefan Brunthaler and Michael Franz",
  journal =      "IEEE Security \& Privacy",
  number =       "2",
  pages =        "30--37",
  year =         "2015",
  publisher =    "IEEE",
  annote =       "ABSTRACT Vulnerabilities in low-level systems software
                 leave users exposed to malware, theft, and monitoring.
                 Automatic software diversity makes weaponization of
                 these vulnerabilities much harder. The premise of
                 software diversity is simple: randomizing program
                 features conceals them from adversaries; however,
                 securely and transparently implementing automatic
                 software diversity is anything but simple.",
}

@Article{lindorfermarvin,
  title =        {{MARVIN}: Efficient and Comprehensive Mobile App
                 Classification Through Static and Dynamic Analysis},
  author =       "Martina Lindorfer and Matthias Neugschwandtner and
                 Christian Platzer",
  note =         {\url{
                 http://mail.iseclab.org/papers/marvin_compsac15.pdf}},
  annote =       "Martina Lindorfer†*, Matthias Neugschwandtner+*,
                 Christian Platzer*†SBA Research, Vienna, Austria+ IBM
                 Research, Zurich, Switzerland * International Secure
                 Systems Lab, Vienna University of Technology, Austria
                 *{mlindorfer,mneug,cplatzer}@iseclab.org Martina
                 Lindorfer†* , Matthias Neugschwandtner+*, Christian
                 Platzer* †SBA Research, Vienna, Austria + IBM
                 Research, Zurich, Switzerland * International Secure
                 Systems Lab, Vienna University of Technology, Austria
                 *{mlindorfer,mneug,cplatzer}@iseclab.org
                 Abstract: {Android} dominates the smartphone operating
                 system market and consequently has attracted the
                 attention of malware authors and researchers alike.
                 Despite the considerable number of proposed malware
                 analysis systems, comprehensive and practical malware
                 analysis solutions are scarce and often short-lived.
                 Systems relying on static analysis alone struggle with
                 increasingly popular obfuscation and dynamic code
                 loading techniques, while purely dynamic analysis
                 systems are prone to analysis evasion. We present
                 MARVIN, a system that combines static with dynamic
                 analysis and which leverages machine learning
                 techniques to assess the risk associated with unknown
                 {Android} apps in the form of a malice score. MARVIN
                 performs static and dynamic analysis, both off-device,
                 to represent properties and behavioral aspects of an
                 app through a rich and comprehensive feature set. In
                 our evaluation on the largest {Android} malware
                 classification data set to date, comprised of over
                 135,000 {Android} apps and 15,000 malware samples, MARVIN
                 correctly classifies 98.24\% of malicious apps with
                 less than 0.04\% false positives. We further estimate
                 the necessary retraining interval to maintain the
                 detection performance and demonstrate the long-term
                 practicality of our approach. Keywords-mobile security;
                 malware analysis; classification",
}

@PhdThesis{pappas2015,
  title =        {Defending against {Return}-{Oriented} {Programming}},
  author =       "Vasileios Pappas",
  year =         "2015",
  school =       "Columbia University",
  note =         "Advisor: {Angelos D. Keromytis},
                 \url{http://academiccommons.columbia.edu/download/fedora_content/download/ac:179722/CONTENT/Pappas_columbia_0054D_12409.pdf}},
}

@Article{davi2015isomeron,
  title =        "Isomeron: Code randomization resilient to
                 (just-in-time) return-oriented programming",
  author =       "Lucas Davi and Christopher Liebchen and Ahmad-Reza
                 Sadeghi and Kevin Z Snow and Fabian Monrose",
  journal =      "Proc. 22nd Network and Distributed Systems Security
                 Sym.(NDSS)",
  year =         "2015",
  note =         {\url{
                 https://www.trust.informatik.tu-darmstadt.de/fileadmin/user_upload/Group_TRUST/PubsPDF/ndss.isomeron.camera.ready.pdf}},
}

@InProceedings{Lee2015,
  author =       "Yongje Lee and Ingoo Heo and Dongil Hwang and Kyungmin
                 Kim and Yunheung Paek",
  title =        "Towards a Practical Solution to Detect Code Reuse
                 Attacks on {ARM} Mobile Devices",
  booktitle =    "Proceedings of the Fourth Workshop on Hardware and
                 Architectural Support for Security and Privacy",
  series =       "HASP '15",
  year =         "2015",
  ISBN =         "978-1-4503-3483-9",
  location =     "Portland, Oregon",
  pages =        "3:1--3:8",
  articleno =    "3",
  numpages =     "8",
  URL =          "http://doi.acm.org/10.1145/2768566.2768569",
  doi =          "10.1145/2768566.2768569",
  acmid =        "2768569",
  publisher =    "ACM",
  address =      "New York, NY, USA",
  keywords =     "ARM coresight architecture, code reuse attack, return
                 oriented programming",
}

@InProceedings{checkoway2010,
  title =        "Return-oriented programming without returns",
  author =       "Stephen Checkoway and Lucas Davi and Alexandra
                 Dmitrienko and Ahmad-Reza Sadeghi and Hovav Shacham and
                 Marcel Winandy",
  booktitle =    "Proceedings of the 17th ACM conference on Computer and
                 communications security",
  pages =        "559--572",
  year =         "2010",
  organization = "ACM",
  note =         {\url{http://cseweb.ucsd.edu/~hovav/dist/noret-ccs.pdf}},
}

@Article{gonzalez2014,
  title =        "Hardware Modifications to Prevent Code Reuse Attacks",
  author =       "Juli{\'a}n A Gonz{\'a}lez",
  year =         "2014",
  note =         {\url{http://web.mit.edu/jugonz97/www/MEngThesisProposal.pdf}},
}

@InProceedings{ahmad2015,
  title =        "Exploring the performance implications of memory
                 safety primitives in many-core processors executing
                 multi-threaded workloads",
  author =       "Masab Ahmad and Syed Kamran Haider and Farrukh Hijaz
                 and Marten van Dijk and Omer Khan",
  booktitle =    "Proceedings of the Fourth Workshop on Hardware and
                 Architectural Support for Security and Privacy",
  pages =        "6",
  year =         "2015",
  organization = "ACM",
}

@Article{gonzalez2014,
  title =        "Hardware Modifications to Prevent Code Reuse Attacks",
  author =       "Juli{\'a}n A Gonz{\'a}lez",
  year =         "2014",
}

@TechReport{copperhead2015a,
  author =       "Daniel Micay",
  title =        "Integrating {PaX} into {{Android}},
  institution =  "copperhead.co",
  year =         "2015",
  note =         {\url{https://copperhead.co/2015/06/11/{Android}-pax},
  annote =       "It is about ASLR, ROP, ...",
}

@TechReport{copperhead2015b,
  author =       "Daniel Micay",
  title =        "The State of {ASLR} on {{Android}} {Lollipop},
  institution =  "copperhead.co",
  year =         "2015",
  note =         {\url{https://copperhead.co/2015/05/11/aslr-{Android}-zygote},
  annote =       "It is about ASLR, ROP, ...",
}

@MastersThesis{holmberg2015,
  title =        "Design of Dependable Systems on {Android},
  author =       "Patrick Holmberg Forsyth",
  annnote =      "LU-CS-EX 2015-08",
  year =         "2015",
  institution =  "Lund University",
  note =         {\url{http://lup.lub.lu.se/luur/download?func=downloadFile&recordOId=5426135&fileOId=5426426},
}

@Manual{call-history,
  author =       "Ask PCGuy",
  title =        {XDA}-Developers {Android} Forums - Manually
                 backup-restore call history",
  note =         {\url{http://forum.xda-developers.com/showthread.php?t=969650},
  year =         "2015",
}

@Manual{incorn,
  author =       "Author Unknown",
  title =        "Incorn",
  note =         {\url{http://linux.die.net/man/5/incrontab},
  year =         "2015",
}

@Manual{FAM,
  author =       "Author SGI",
  title =        "File Alteration Monitor",
  note =         {\url{http://oss.sgi.com/projects/fam/},
  year =         "2001",
}

@Manual{LinuxAudit,
  author =       "Author Unknown",
  title =        "Linux Auditing",
  note =         {\url{http://people.redhat.com/sgrubb/audit/},
  year =         "2015",
}

@Manual{Hideprocess,
  author =       "Author Unknown",
  title =        "Hide process information for other users",
  note =         {\url{http://www.linux-dev.org/2012/09/hide-process-information-for-other-users/},
  year =         "2015",
}

@InCollection{kizza2013,
  title =        "Computer Crime Investigations and Ethics",
  author =       "Joseph Migga Kizza",
  booktitle =    "Ethical and Social Issues in the Information Age",
  pages =        "299--312",
  year =         "2013",
  publisher =    "Springer",
}

@PhdThesis{hughes2015,
  author =       "Alexandra Hughes",
  title =        {Android} mobile security: {A} comprehensive evaluation
                 of its feats and flaws",
  OPTkey =       "",
  OPTtype =      "",
  address =      "Ann Arbor, MI, USA",
  OPTmonth =     "",
  OPTnote =      "",
  pages =        "73",
  year =         "2015",
  school =       "Utica College, New York",
  annote =       "Abstract (summary) Mobile devices have transformed and
                 evolved rapidly over the last decade into the daily
                 essentials in which they are today. Their uses and
                 capabilities have evolved tremendously so that security
                 within the devices have become a priority to
                 manufacturers as mobile attacks began to occur. {Android}
                 became the leading manufacturer in the market in 2011
                 when they controlled 53\% of the market share, and have
                 been gaining in popularity ever since (Benson, 2014).
                 The purpose of this study was to determine the
                 different security practices implemented within {Android}
                 devices and whether or not they were in fact secure
                 features. These implementations have positives and
                 negatives incorporated with their use, this study
                 proposed to further evaluate where the vulnerabilities
                 lie within mobile hardware and software, along with
                 better implementation of security practices to mitigate
                 the known vulnerabilities. It was determined that the
                 research into {Android} security structures and mobile
                 vulnerabilities was lacking current statistics and
                 information. This area is in need of more attention in
                 order to alleviate the security gap. There was an
                 analysis run on a Note 3 LTE to determine if the device
                 is secure. The device was listed as a DISA certified
                 device therefore it was identified for analysis for the
                 purposes of this study. With key security features
                 implemented within the Note 3 LTE, the examiner was not
                 able to penetrate the device. This proves that if the
                 proper security steps are taken a device can be secure.
                 Keywords: Cybersecurity, advancements, confidentiality,
                 integrity, Professor Albert Orbinati.",
}

@Misc{DroidSecWiki,
  OPTkey =       "",
  author =       "DroidSec.org",
  title =        "www.droidsec.org/wiki/",
  OPThowpublished = "",
  OPTmonth =     "",
  year =         "2015",
  note =         {\url{http://www.droidsec.org/wiki/},
  OPTannote =    "",
}

@Article{Yu2015,
  author =       "Chia-Mu Yu and Chi-Yuan Chen and Han-Chieh Chao",
  journal =      "Network, IEEE",
  title =        "Proof of ownership in deduplicated cloud storage with
                 mobile device efficiency",
  year =         "2015",
  month =        mar,
  volume =       "29",
  number =       "2",
  pages =        "51--55",
  keywords =     "authorisation;cloud computing;mobile computing;virtual
                 storage;Bitcasa;Dropbox;cloud server efficiency;cloud
                 services;data deduplication techniques;deduplicated
                 cloud storage;file hash;mobile cloud computing;mobile
                 device efficiency;poof of ownership;security
                 weaknesses;smart mobile devices;storage expense
                 reduction;unauthorized file downloading;unlimited
                 storage;user experience;virtually infinite storage;5G
                 mobile communication;Bandwidth allocation;Chaotic
                 communication;Cloud computing;Computer security;Mobile
                 communication;Mobile handsets",
  doi =          "10.1109/MNET.2015.7064903",
  ISSN =         "0890-8044",
}

@Misc{brown2015,
  title =        {Mobile-to-Mobile Transactions},
  author =       "Kerry D Brown and Ronald P Knapp",
  year =         "2015",
  month =        jan # "~15",
  note =         "US Patent 20,150,019,441",
}

@Article{chauhan2015,
  title =        "Near Field Communication ({NFC}): An Emerging
                 Contactless Technology",
  author =       "Rinki R Chauhan and Chirag Gohel",
  journal =      "Wireless Communication",
  volume =       "7",
  number =       "1",
  pages =        "15--19",
  year =         "2015",
}

@InProceedings{Ludwig2015,
  author =       "Adrian Ludwig",
  title =        {Android} Security Data and Research Directions",
  OPTcrossref =  "",
  OPTkey =       "",
  OPTbooktitle = "",
  OPTyear =      "",
  OPTeditor =    "",
  OPTvolume =    "",
  OPTnumber =    "",
  OPTseries =    "",
  OPTpages =     "",
  OPTmonth =     "",
  OPTaddress =   "",
  OPTorganization = "",
  OPTpublisher = "",
  note =         {\url{http://ieee-security.org/TC/SPW2015/MoST/},
  annote =       "Also in
                 \url{https://www.blackhat.com/ldn-15/summit.html}.
                 Speaker: Adrian Ludwig is the lead engineer for {Android}
                 security at Google. In this role, he is responsible for
                 the security of the {Android} platform and Google's
                 applications and services for {Android}. Prior to joining
                 Google, Adrian held technical leadership positions at
                 Joyent, Adobe, Macromedia, @stake, and the National
                 Security Agency. Adrian has a BA in Mathematics from
                 Williams College and an MBA from the University of
                 California, Berkeley.",
}

@InCollection{lim2015functional,
  title =        "Functional Considerations in Military-Grade Security
                 Platform Using a Mobile Hypervisor",
  author =       "Kyung-Soo Lim and Su-Wan Park and Jeong-Nye Kim and
                 Deok-Gyu Lee",
  booktitle =    "Computer Science and its Applications",
  pages =        "1413--1418",
  year =         "2015",
  publisher =    "Springer",
}

@InCollection{ISPT-TBD,
  year =         "2015",
  ISBN =         "978-3-319-17532-4",
  booktitle =    "Information Security Practice and Experience",
  volume =       "9065",
  series =       "Lecture Notes in Computer Science",
  editor =       "Javier Lopez and Yongdong Wu",
  doi =          "10.1007/978-3-319-17533-1_26",
  title =        {IVDroid: Static Detection for Input Validation
                 Vulnerability in {Android} Inter-component
                 Communication},
  URL =          "http://dx.doi.org/10.1007/978-3-319-17533-1_26",
  publisher =    "Springer International Publishing",
  keywords =     "Input Validation Vulnerability; Static Analysis;
                 Program Slicing; Vulnerability Detection; {Android}
                 Security",
  author =       "Zhejun Fang and Qixu Liu and Yuqing Zhang and Kai Wang
                 and Zhiqiang Wang",
  pages =        "378--392",
  language =     "English",
}

@Article{roemer2012,
  title =        "Return-oriented programming: Systems, languages, and
                 applications",
  author =       "Ryan Roemer and Erik Buchanan and Hovav Shacham and
                 Stefan Savage",
  journal =      "ACM Transactions on Information and System Security
                 (TISSEC)",
  volume =       "15",
  number =       "1",
  pages =        "2",
  year =         "2012",
  publisher =    "ACM",
}

@Book{ALP2001,
  title =        "Advanced Linux Programming",
  author =       "Mark L Mitchell and Alex Samuel and Jeffrey Oldham",
  year =         "2001",
  publisher =    "CodeSourcery, LLC, New Riders, Sams Publishing",
  note =         "All chapters can be legitimately downloaded as pdf
                 files from
                 \url{http://www.advancedlinuxprogramming.com/},
}

@Manual{GCM,
  author =       "Google.com",
  title =        "Google Cloud Messaging for {Android},
  OPTkey =       "",
  OPTorganization = "",
  OPTaddress =   "",
  OPTedition =   "",
  OPTmonth =     "",
  year =         "2015",
  note =         {\url{https://developer.{Android}.com/google/gcm},
  annote =       "Google Cloud Messaging (GCM) for {Android} is a service
                 that allows you to send data from your server to your
                 users' {Android}-powered device, and also to receive
                 messages from devices on the same connection. The GCM
                 service handles all aspects of queueing of messages and
                 delivery to the target {Android} application running on
                 the target device, and it is completely free.",
}

@InProceedings{trustdroid,
  title =        {Practical and Lightweight Domain Isolation on
                 {Android}},
  author =       "Sven Bugiel and Lucas Davi and Alexandra Dmitrienko
                 and Stephan Heuser and Ahmad-Reza Sadeghi and Bhargava
                 Shastry",
  booktitle =    "Proceedings of the 1st ACM workshop on Security and
                 privacy in smartphones and mobile devices",
  pages =        "51--62",
  year =         "2011",
  organization = "ACM",
}

@InProceedings{Xiaoming2011,
  title =        {Intrusion detection model based on {Android}},
  author =       "Xiaoming Kou and Qiaoyan Wen",
  booktitle =    "Broadband Network and Multimedia Technology (IC-BNMT),
                 2011 4th IEEE International Conference on",
  pages =        "624--628",
  year =         "2011",
  organization = "IEEE",
  annote =       "In this paper, the traditional intrusion detection
                 system based on computer is applied to {Android}
                 platform. Taking into account the performance and
                 storage capacity of smart phone, we proposed a light
                 weight intrusion detection model based on {Android} -
                 LIDS which changes the traditional passive antivirus to
                 active defense. The Snort intrusion detection
                 technology is used on mobile phones and the key pattern
                 matching algorithm of Snort is improved.",
}

@InProceedings{cloudIDS,
  title =        "A cloud-based intrusion detection and response system
                 for mobile phones",
  author =       "Amir Houmansadr and Saman A Zonouz and Robin
                 Berthier",
  booktitle =    "Dependable Systems and Networks Workshops (DSN-W),
                 2011 IEEE/IFIP 41st International Conference on",
  pages =        "31--32",
  year =         "2011",
  organization = "IEEE",
}

@InCollection{hurel2014,
  title =        "Outsourcing Mobile Security in the Cloud",
  author =       "Ga{\"e}tan Hurel and R{\'e}mi Badonnel and Abdelkader
                 Lahmadi and Olivier Festor",
  booktitle =    "Monitoring and Securing Virtualized Networks and
                 Services",
  pages =        "69--73",
  year =         "2014",
  publisher =    "Springer",
}

@InProceedings{yan2014,
  title =        "Real-time {Android} with {RTD}roid",
  author =       "Yin Yan and Shaun Cosgrove and Varun Anand and Amit
                 Kulkarni and Sree Harsha Konduri and Steven Y Ko and
                 Lukasz Ziarek",
  booktitle =    "Proceedings of the 12th annual international
                 conference on Mobile systems, applications, and
                 services",
  pages =        "273--286",
  year =         "2014",
  organization = "ACM",
}

@InCollection{cinar2012,
  title =        "Bionic {API} Primer",
  author =       "Onur Cinar",
  booktitle =    "Pro {Android} C++ with the NDK",
  pages =        "155--177",
  year =         "2012",
  publisher =    "Springer",
}

@MastersThesis{Devos2014,
  author =       "Mathieu Devos",
  title =        "Bionic vs Glibc Report",
  school =       "Universiteit Gent",
  year =         "2014",
  OPTkey =       "",
  OPTtype =      "",
  OPTaddress =   "",
  OPTmonth =     "",
  note =         "Promotors: S. Vrijders D. Staessens K. Casier",
  annote =       "The goal of this report is to find and point out the
                 restrictions that apply when using the Bionic library
                 compared to the standard glibc. These are both C/C++
                 standard libraries. The two libraries that will be
                 researched are: • GNU C Library (glibc) • Bionic
                 Library (bionic) Both these standard libraries provide
                 support for the C and C++ language but are used on
                 different platforms. Where glibc is used within Linux
                 distributions, bionic is used on {Android} based systems.
                 Over the course of this report we will try to provide
                 insight in the Bionic library. We will try to find the
                 origin and use of the bionic library and why glibc was
                 not adequate enough for the job. After that we will
                 also provide the restrictions and traps that come with
                 the use of the Bionic library. Concluding is done with
                 the general information and where to find information
                 before coding with the bionic library. In general the
                 standard C/C++ library is small compared to other
                 languages and should provide adequate speed when using
                 low level programming. Since the standard library is so
                 small it is very easy to port it to new platforms. This
                 raises the question why Google decided to not use glibc
                 but write their own adaptation of a standard C/C++
                 library. In this report we hope to find the answer to
                 that question, while providing details where both
                 libraries differ.",
}

@InProceedings{cai2013,
  title =        "Research of Cloud Security Communication Firewall
                 Based on {Android} Platform",
  author =       "Miao Cai and Qinsheng Hou and Fangfang Jing and Qiao
                 Ding",
  booktitle =    "Proceedings of the 2nd International Conference on
                 Computer Science and Electronics Engineering",
  year =         "2013",
  organization = "Atlantis Press",
}

@Article{hurel2015,
  title =        "Towards Cloud-Based Compositions of Security Functions
                 For Mobile Devices",
  author =       "Ga{\"e}tan Hurel and R{\'e}mi Badonnel and Abdelkader
                 Lahmadi and Olivier Festor",
  journal =      "IM 2015",
  pages =        "6",
  year =         "2015",
  annote =       "hal.inria.fr]",
}

@InProceedings{nagy2013,
  title =        "Enhancing security in mobile data networks through end
                 user and core network cooperation",
  author =       "Martin Nagy and Ivan Kotuliak",
  booktitle =    "Proceedings of International Conference on Advances in
                 Mobile Computing \& Multimedia",
  pages =        "253",
  year =         "2013",
  organization = "ACM",
}

@InProceedings{alam2014,
  title =        "SeCure Sharing Of Mobile Device Data Using Public
                 Cloud",
  author =       "Md Mozammil Alam and Sourav Hati and Debashis De and
                 Samiran Chattopadhyay",
  booktitle =    "Confluence The Next Generation Information Technology
                 Summit (Confluence), 2014 5th International
                 Conference-",
  pages =        "149--154",
  year =         "2014",
  organization = "IEEE",
}

@InProceedings{kilinc2012,
  title =        {WallDroid: Cloud Assisted Virtualized Application
                 Specific Firewalls for the {Android} {OS}},
  author =       "Caner Kilinc and Todd Booth and Karl Andersson",
  booktitle =    "Trust, Security and Privacy in Computing and
                 Communications (TrustCom), 2012 IEEE 11th International
                 Conference on",
  pages =        "877--883",
  year =         "2012",
  organization = "IEEE",
}

@Article{awade2014,
  title =        {WallDroid: Firewalls for the {Android} {OS}},
  author =       "Abhijeet Awade and Amir Talwar and Bhushan Khopade and
                 Vishal Nande",
  year =         "2014",
  note =         {\url{http://ijaeit.com/Paper-Pdf/Paper 05.pdf}},
  journal =      "International Journal of Advanced Engineering \&
                 Innovative Technology",
  volume =       "1",
  issue =        "1",
  month =        April,
  annote =       "Questionable journal, and article. Abhijeet Awade,Amir
                 Talwar, Bhushan Khopade and Vishal Nande B.E Computer
                 Engineering, Navsahyadri Education Society‟s Group of
                 Institutions, Pune. For
                 correspondence:abhijeet.awade205@gmail.com,
                 amirtalwar7171@gmail.com,
                 Khopade0909@gmail.com,vnande131991@gmail.com Abstract -
                 Security is becoming an increasingly important feature
                 of today's mobile environment where users download
                 unknown apps and connect their smartphones to unknown
                 networks while roaming. {Android} has become a very
                 popular operating systems for smartphones and tablets
                 but at the same time threats associated to this
                 platform, like malware or exploits, are also growing.
                 As it is becoming more and more popular to connect
                 mobile phone and other hand held devices to the
                 internet, the big question is; {"}How to protect those
                 devices from the perils of the internet?{"}. This
                 project investigates issues with the implementation of
                 a Firewall system for protecting mobile devices. To
                 enable an ordinary mobile phone user to setup a
                 Firewall configuration to protect his mobile phone it
                 is important to have a system that is easy to
                 understand and warns the user of possible mistakes.
                 This project proposes and valuates an enhanced security
                 model and architecture, WallDroid, enabling virtualized
                 application specifc Firewalls. The WallDroid solution
                 can be considered as an {Android} Firewall Application
                 but with some extra functionality. Keycomponents used
                 by the solution include VPN technologies like the Point
                 to Point Tunneling Protocol (PPTP) and the {Android}
                 Cloud to Device Messaging Framework (C2DM). Our project
                 is based on the cloud keeping track of millions of
                 applications and their reputation (good, bad, or
                 unknown) and comparing traffic flows of applications
                 with a list of knownmalicious IP servers.",
}

@InProceedings{Xiaoming2013,
  author =       "Xiaoming Kou and Qiaoyan Wen",
  title =        "Intrusion detection model based on {Android},
  OPTcrossref =  "",
  OPTkey =       "",
  booktitle =    "Proceedings of IEEE IC-BNMT2011 Intrusion",
  OPTyear =      "",
  OPTeditor =    "",
  OPTvolume =    "",
  OPTnumber =    "",
  OPTseries =    "",
  OPTpages =     "",
  OPTmonth =     "",
  OPTaddress =   "",
  OPTorganization = "",
  OPTpublisher = "",
  OPTnote =      "",
  OPTannote =    "",
}

@InProceedings{Zhou2015,
  author =       "Yajin Zhou and Kunal Patel and Lei Wu and Zhi Wang and
                 Xuxian Jiang",
  title =        "Hybrid User-level Sandboxing of Third-party {Android}
                 Apps",
  booktitle =    "Proceedings of the 10th ACM Symposium on Information,
                 Computer and Communications Security",
  year =         "2015",
  ISBN =         "978-1-4503-3245-3",
  location =     "Singapore, Republic of Singapore",
  pages =        "19--30",
  numpages =     "12",
  URL =          "http://doi.acm.org/10.1145/2714576.2714598",
  doi =          "10.1145/2714576.2714598",
  acmid =        "2714598",
  publisher =    "ACM",
  address =      "New York, NY, USA",
  keywords =     {Android}, dalvik hooking, software fault isolation",
  annote =       "Users of {Android} phones increasingly entrust personal
                 information to third-party apps. However, recent
                 studies reveal that many apps, even benign ones, could
                 leak sensitive information without user awareness or
                 consent. Previous solutions either require to modify
                 the {Android} framework thus significantly impairing
                 their practical deployment, or could be easily defeated
                 by malicious apps using a native library. In this
                 paper, we propose AppCage, a system that thoroughly
                 confines the run-time behavior of third-party {Android}
                 apps without requiring framework modifications or root
                 privilege. AppCage leverages two complimentary
                 user-level sandboxes to interpose and regulate an app's
                 access to sensitive APIs. Specifically, dex sandbox
                 hooks into the app's Dalvik virtual machine instance
                 and redirects each sensitive framework API to a proxy
                 which strictly enforces the user-defined policies, and
                 native sandbox leverages software fault isolation to
                 prevent the app's native libraries from directly
                 accessing the protected APIs or subverting the dex
                 sandbox. We have implemented a prototype of AppCage.
                 Our evaluation shows that AppCage can successfully
                 detect and block attempts to leak private information
                 by third-party apps, and the performance overhead
                 caused by AppCage is negligible for apps without native
                 libraries and minor for apps with them.",
}

@Manual{LinuxSrc,
  title =        {The {Linux} {Kernel}},
  author =       "Linus Torvalds and Many Others",
  OPTkey =       "",
  OPTauthor =    "",
  organization = {\url{http://www. kernel. org},
  OPTaddress =   "",
  OPTedition =   "",
  OPTmonth =     "",
  OPTyear =      "",
  OPTnote =      "",
  annote =    "4.8.x",
  year =         "2016",
}

@Article{kroahhartman,
  title =        "Linux kernel development",
  author =       "Greg KroahHartman and Jonathan Corbet",
  journal =      "the Linux foundation",
  year =         "2008",
}

@Book{shotts2012linux,
  title =        "The linux command line: {A} complete introduction",
  author =       "William E {Shotts Jr},
  year =         "2012",
  publisher =    "No Starch Press",
}

@Misc{syscall1,
  author =       "David Drysdale{ }website",
  title =        "Anatomy of a system call, part 1",
  howpublished = {\url{https://lwn.net/Articles/604287},
year = "2014",
}

@TechReport{Choudhary2006,
  author =       "Amit Choudhary",
  title =        "Implementing a System Call on Linux 2.6 for i386",
  institution =  "http://www.tldp.org/",
  year =         "2006",
  OPTkey =       "",
  OPTtype =      "",
  OPTnumber =    "",
  OPTaddress =   "",
  OPTmonth =     "",
  note =      {\url{http://www.tldp.org/HOWTO/html_single/Implement-Sys-Call-Linux-2.6-i386/},
  OPTannote =    "",
}

@TechReport{Mateti2015ROM,
  title =        "Tightening the Security and Privacy of the {Android} Platform",
  author =       "Prabhaker Mateti",
  institution =  "Wright State University",
  year =         "2015",
  address =      "Dayton, OH, USA",
  month =        "6",
  key =          {Android}, network, ombudsman, filtering,
                 crowd-sourcing, security, zygote, morula, ASLR, ROP,
                 audit, forensics",
  note = {\url{http://cecs.wright.edu/~pmateti/Students/Theses/theses-topics.html},
}

@TechReport{Mateti2015Provenance,
  title =        {Provenance as an {Android} Framework Service},
  author =       "Prabhaker Mateti",
  institution =  "Wright State University",
  year =         "2015",
  address =      "Dayton, OH, USA",
  month =        "6",
  key =          {Android}, network, ombudsman, filtering,
                 crowd-sourcing, security, zygote, morula, ASLR, ROP,
                 audit, forensics",
  note =         {\url{http://cecs.wright.edu/~pmateti/Students/Theses/theses-topics.html},
}

@TechReport{Mateti2015Dashboard,
  title =        {{Android} Dashboard of Processes Past and Present},
  author =       "Prabhaker Mateti",
  institution =  "Wright State University",
  year =         "2015",
  address =      "Dayton, OH, USA",
  month =        "6",
  key =          {Android}, network, ombudsman, filtering,
                 crowd-sourcing, security, zygote, morula, ASLR, ROP,
                 audit, forensics",
  note =         {\url{http://cecs.wright.edu/~pmateti/Students/Theses/theses-topics.html},
}
@TechReport{Mateti2015Cloud,
  title =        {Cloud {Storage} {Framework} for {Android} {Devices}},
  author =       "Prabhaker Mateti",
  institution =  "Wright State University",
  address =      "Dayton, OH, USA",
  year =         "2015",
  month =        "6",
  key =          {Android}, network, cloud storage, crowd-sourcing,
                  security, audit, forensics",
  note =         "                \url{http://cecs.wright.edu/~pmateti/Students/index.html},
}

@TechReport{Mateti2015Tests,
  title = {A Test Harness for {Android} Framework Components},
  author =       "Prabhaker Mateti",
  institution =  "Wright State University",
  year =         "2015",
  address =      "Dayton, OH, USA",
  month =        "6",
  key =          {Android}, network, ombudsman, filtering,
                 crowd-sourcing, security, zygote, morula, ASLR, ROP,
                 audit, forensics",
  note =         "                \url{http://cecs.wright.edu/~pmateti/Students/index.html},
}

@TechReport{AmritaROM2015,
  title =        {Design and Construction of a new Highly Secure
                 {{Android}} {ROM}},
  author =       "Prabhaker Mateti and Many Students",
  institution =  "Amrita Vishwa Vidyapeetham",
  year =         "2016",
  address =      "Ettimadai, Tamil Nadu 641112, India",
  month =        "10",
  key =          {Android}, network, ombudsman, filtering,
                 crowd-sourcing, security, zygote, morula, ASLR, ROP,
                 audit, forensics",
  note =         "",
}

@MastersThesis{Rahul2016,
  title =        "Android Source Code Audit for Security Compliance",
  author =       "B Rahul",
  school =  "Amrita Vishwa Vidyapeetham",
  year =         "2016",
  address =      "Ettimadai, Tamil Nadu 641112, India",
  month =        "6",
  key =          {Android}, network, ombudsman, filtering,
                 crowd-sourcing, security, zygote, morula, ASLR, ROP,
                 audit, forensics",
  note =         "Advisor: Prabhaker Mateti;
                 \url{http://cecs.wright.edu/~pmateti/Students/index.html},
}

@TechReport{Prabhu-Mateti2016,
  title = {Enabling HYPervisor Mode in {Android} ARM Devices},
  author =       "Seshagiri Prabhu and Prabhaker Mateti",
  institution =  "Amrita University and Wright State University",
  year =         "2016",
  address =      "Dayton, OH, USA",
  month =        "6",
  key =          {Android}, network, ombudsman, filtering,
                 crowd-sourcing, security, zygote, morula, ASLR, ROP,
                 audit, forensics",
  note =         "                \url{http://cecs.wright.edu/~pmateti/Students/Theses/theses-topics.html},
}

@incollection{kaladharan2016encryption,
  title={An Encryption Technique to Thwart {Android} Binder Exploits},
  author={Kaladharan, Yadu and Mateti, Prabhaker and Jevitha, KP},
  booktitle={Intelligent Systems Technologies and Applications},
  pages={13--21},
  year={2016},
  publisher={Springer}
}

@Misc{AsishBootISO2015,
  title =        "Boot {ISO} Reconstruction",
  author =       "Asish K Sahadevan and Prabhaker Mateti",
  month =        {2},
  year =         "2015",
  note =         {\url{http://103.5.112.91/pmateti/Students/Asish/our-kernel-iso.html},
  URL =          "http://103.5.112.91/pmateti/Students/Asish/our-kernel-iso.html",
}

@Misc{AsishGit2015,
  title =        {System Calls Redirection in {Android}},
  author =       "Asish K Sahadevan and Prabhaker Mateti",
  month =        jun,
  year =         "2015",
  note =         {\url{https://github.com/asishsahadev/armsysredirect},
  URL =          "https://github.com/asishsahadev/armsysredirect",
}

@InProceedings{mateti2003,
  title =        "Prevention of Buffer Overflow Exploits in {IA}-32
                 Based Linux.",
  author =       "Prabhaker Mateti and Sowgandh Sunil Gadi",
  booktitle =    "Security and Management",
  pages =        "378--384",
  year =         "2003",
}

@MastersThesis{gadi2004,
  title =        {Security {Hardened} {Kernels} for Linux {Servers}},
  author =       "Sowgandh Sunil Gadi",
  year =         "2004",
  school =       "Wright State University",
  note =         "Advisor: Prabhaker Mateti,
                 \url{http://cecs.wright.edu/~pmateti/Students/SunilGadi/sgadi-ms-thesis.pdf}},
}

@MastersThesis{Bockhaven2014,
  title =        {Android Patching},
  author =       "Cedric Van Bockhaven and Jochem van Kerkwijk",
  year =         "2014",
  note =         {\url{https://www.os3.nl/_media/2013-2014/courses/rp2/p40_report.pdf}
                 Supervisor: Jochem van Kerkwijk",
}

@Article{shabtai2015,
  title =        "Evaluation of Security Solutions for {Android} Systems",
  author =       "Asaf Shabtai and Dudu Mimran and Yuval Elovici",
  journal =      "arXiv preprint arXiv:1502.04870",
  year =         "2015",
  note =         {\url{http://arxiv.org/pdf/1502.04870.pdf}},
  annote =       "Asaf Shabtai Dudu Mimran Yuval Elovici Dept. of
                 Information Systems Engineering Ben-Gurion University
                 of the Negev, Israel ABSTRACT With the increasing usage
                 of smartphones a plethora of security solutions are
                 being designed and developed. Many of the security
                 solutions fail to cope with advanced attacks and are
                 not aways properly designed for smartphone platforms.
                 Therefore, there is a need for a methodology to
                 evaluate their effectiveness. Since the {Android}
                 operating system has the highest market share today, we
                 decided to focus on it in this study in which we review
                 some of the state-of-the-art security solutions for
                 {Android}-based smartphones. In addition, we present a
                 set of evaluation criteria aiming at evaluating
                 security mechanisms that are specifically designed for
                 {Android}-based smartphones. We believe that the proposed
                 framework will help security solution designers develop
                 more effective solutions and assist security experts
                 evaluate the effectiveness of security solutions for
                 {Android}-based smartphones. Categories and Subject
                 Descriptors C.2.0 [Computer-Communication Networks]:
                 General – security and protection General Terms
                 Security. Keywords Smartphone, Mobile device Security,
                 Security evaluation, {Android}.",
}

@TechReport{AndroidDevelopers,
  title =        {Android Developers},
  author =       "Google.com",
  note =         {\url{http://developer.android.com/index.html}},
  year =         "2015",
}

@TechReport{AndroidSecurity2014,
  author =       "Google.com",
  title =        "Google Report: {Android} Security 2014 Year in Review",
  institution =  "Google.com",
  year =         "2015",
  OPTkey =       "",
  OPTtype =      "",
  OPTnumber =    "",
  OPTaddress =   "",
  month =        apr,
  note =         {\url{
                 https://static.googleusercontent.com/media/source.{Android}.com/en/us/devices/tech/security/reports/Google_{Android}_Security_2014_Report_Final.pdf}},
  OPTannote =    "",
}

@Book{ICISC2014,
  altauthor =    "",
  editor =       "Jongsung Kim Editors: Jooyoung Lee",
  title =        "Information Security and Cryptology - {ICISC} 2014",
  publisher =    "Springer",
  year =         "2014",
  OPTkey =       "",
  OPTvolume =    "",
  OPTnumber =    "",
  OPTseries =    "",
  OPTaddress =   "",
  OPTedition =   "",
  OPTmonth =     "",
  OPTnote =      "",
  annote =       "Lecture Notes in Computer Science Volume 8949 2015
                 17th International Conference, Seoul, South Korea,
                 December 3-5, 2014, Revised Selected Papers ISBN:
                 978-3-319-15942-3 (Print) 978-3-319-15943-0 (Online)",
}

@Article{nauman2015realization,
  title =        {Realization of a user-centric, privacy preserving
                 permission framework for {Android}},
  author =       "Mohammad Nauman and Sohail Khan and Abu Talib Othman
                 and Shahrulniza Musa",
  journal =      "Security and Communication Networks",
  volume =       "8",
  number =       "3",
  pages =        "368--382",
  year =         "2015",
  publisher =    "Wiley Online Library",
}

@InProceedings{chan2012,
  title =        "Droidchecker: analyzing {Android} applications for
                 capability leak",
  author =       "Patrick PF Chan and Lucas CK Hui and Siu-Ming Yiu",
  booktitle =    "Proceedings of the fifth ACM conference on Security
                 and Privacy in Wireless and Mobile Networks",
  pages =        "125--136",
  year =         "2012",
  organization = "ACM",
}

@Article{lessard2010,
  title =        {Android Forensics: Simplifying Cell Phone
                 Examinations},
  author =       "Jeff Lessard and Gary Kessler",
  year =         "2010",
  publisher =    "Purdue University",
  note =         {\url{http://ro.ecu.edu.au/cgi/viewcontent.cgi?article=7480&context=ecuworks},
}

@Article{gianluca2014,
  author =       "Gianluca Borello",
  title =        "Sysdig Cloud - Hiding Linux Processes For Fun And
                 Profit",
  year =         "2014",
  note =         {\url{https://sysdig.com/hiding-linux-processes-for-fun-and-profit/},
}

@InCollection{armando2015,
  title =        {{SAM}: The Static Analysis Module of the {MAVERIC}
                 Mobile App Security Verification Platform},
  author =       "Alessandro Armando and Gianluca Bocci and Giantonio
                 Chiarelli and Gabriele Costa and Gabriele De Maglie and
                 Rocco Mammoliti and Alessio Merlo",
  booktitle =    "Tools and Algorithms for the Construction and Analysis
                 of Systems",
  pages =        "225--230",
  year =         "2015",
  publisher =    "Springer",
  annote =       "... approach was used in [2] where a prototype im-
                 plementation analysed hundreds of {Android} applications
                 against a ... it is still under development, SAM can be
                 already applied to the security analysis of ... 1.
                 Aktug, I., Naliuka, K.: ConSpec – A formal language
                 for policy specification. ...",
}

@MastersThesis{silva2015,
  title =        "Static Data Flow Analysis for Vulnerable Permission
                 Configurations of {Android} Applications",
  author =       "Ernesto Isaac Ram{\'\i}rez Silva",
  school =       "",
  year =         "2015",
  year =         "",
  OPTkey =       "",
  OPTtype =      "",
  OPTaddress =   "",
  OPTmonth =     "Jan",
  note =         {\url{http://www.sts.tu-harburg.de/pw-and-m-theses/2015/silva15.pdf}},
  annote =       "Advisor: Prof. Dr. Sibylle Schupp",
}

@Article{hokke2015,
  title =        "A Self-Compiling {Android} Data Obfuscation Tool",
  author =       "Olivier Hokke and Alex Kolpa and Joris van den Oever
                 and Alex Walterbos and Johan Pouwelse",
  journal =      "arXiv preprint arXiv:1502.01625",
  year =         "2015",
  note =         {\url{http://arxiv.org/pdf/1502.01625.pdf}},
  annote =       "Delft University Of Technology Student Project;;
                 Abstract Smartphones are becoming more significant in
                 storing and transferring data. However, techniques
                 ensuring this data is not compromised after a
                 confiscation of the device are not readily available.
                 DroidStealth is an open source {Android} application
                 which combines data encryption and application
                 obfuscation techniques to provide users with a way to
                 securely hide content on their smartphones. This
                 includes hiding the application’s default launch
                 methods and providing methods such as dial-to-launch or
                 invisible launch buttons. A novel technique provided by
                 DroidStealth is the ability to transform its appearance
                 to be able to hide in plain sight on devices. To
                 achieve this, it uses self-compilation, without
                 requiring any special permissions. This Two-Layer
                 protection aims to protect the user and its data from
                 casual search in various situations. Index
                 Terms—casual search, privacy, nomadic software, data
                 obfuscation, data encryption",
}

@InProceedings{gallingani2015,
  title =        {Practical Exploit Generation for Intent Message
                 Vulnerabilities in {Android}},
  author =       "Daniele Gallingani and Rigel Gjomemo and VN
                 Venkatakrishnan and Stefano Zanero",
  booktitle =    "Proceedings of the 5th ACM Conference on Data and
                 Application Security and Privacy",
  pages =        "155--157",
  year =         "2015",
  organization = "ACM",
  annote =       "... To this end, we adopt a formal approach to
                 automatically produce malicious payloads that can
                 trigger dangerous behavior in vulnerable ... Categories
                 and Subject Descriptors: D.4.6 [Operating Systems]:
                 Security and Protection Keywords: {Android}, Application
                 Security ...",
}

@InProceedings{burguera2011crowdroid,
  title =        {Crowdroid: behavior-based malware detection system for
                 {Android}},
  author =       "Iker Burguera and Urko Zurutuza and Simin
                 Nadjm-Tehrani",
  booktitle =    "Proceedings of the 1st ACM workshop on Security and
                 privacy in smartphones and mobile devices",
  pages =        "15--26",
  year =         "2011",
  organization = "ACM",
}

@InCollection{davi2011,
  title =        "Privilege Escalation Attacks on {Android},
  author =       "Lucas Davi and Alexandra Dmitrienko and Ahmad-Reza
                 Sadeghi and Marcel Winandy",
  booktitle =    "Information Security",
  pages =        "346--360",
  year =         "2011",
  publisher =    "Springer",
}

@InProceedings{hu2011,
  title =        "Automating {GUI} testing for {Android} applications",
  author =       "Cuixiong Hu and Iulian Neamtiu",
  booktitle =    "Proceedings of the 6th International Workshop on
                 Automation of Software Test",
  pages =        "77--83",
  year =         "2011",
  organization = "ACM",
}

@MastersThesis{macnair2015,
  author =       "Michael Macnair",
  title =        "Verifying the Integrity of Open Source {Android}
                 Applications",
  school =       "Royal Holloway University of London, UK",
  year =         "2015",
  OPTkey =       "",
  OPTtype =      "",
  OPTaddress =   "",
  OPTmonth =     "",
  note =         "Supervisor: Keith Mayes,
                 \url{http://www.ma.rhul.ac.uk/static/techrep/2015/RHUL-MA-2015-4.pdf}},
  OPTannote =    "",
}

@InProceedings{shin2009,
  title =        {Towards formal analysis of the permission-based
                 security model for {Android}},
  author =       "Wook Shin and Shinsaku Kiyomoto and Kazuhide Fukushima
                 and Toshiaki Tanaka",
  booktitle =    "Wireless and Mobile Communications, 2009. ICWMC'09.
                 Fifth International Conference on",
  pages =        "87--92",
  year =         "2009",
  organization = "IEEE",
  annote =       "Abstract Since the source code of {Android} was released
                 to the public, people have concerned about the security
                 of the {Android} system. Whereas the insecurity of a
                 system can be easily exaggerated even with few minor
                 vulnerabilities, the security is not easily
                 demonstrated. Formal methods have been favorably
                 applied for the purpose of ensuring security in
                 different contexts to attest whether the system meets
                 the security goals or not by relying on mathematical
                 proofs. In order to commence the security analysis of
                 {Android}, we specify the permission mechanism for the
                 system. We represent the system in terms of a state
                 machine, elucidate the security needs, and show that
                 the specified system is secure over the specified
                 states and transitions. We expect that this work will
                 provide the basis for assuring the security of the
                 {Android} system. The specification and verification were
                 carried out using the Coq proof assistant.
                 Keywords-{Android}; permission; security; formal model;
                 Coq",
}

@InProceedings{shin2010formal,
  title =        "A formal model to analyze the permission authorization
                 and enforcement in the {Android} framework",
  author =       "Wook Shin and Shinsaku Kiyomoto and Kazuhide Fukushima
                 and Toshiaki Tanaka",
  booktitle =    "Social Computing (SocialCom), 2010 IEEE Second
                 International Conference on",
  pages =        "944--951",
  year =         "2010",
  organization = "IEEE",
}

@Article{feizollah2015,
  title =        "A review on feature selection in mobile malware
                 detection",
  author =       "Ali Feizollah and Nor Badrul Anuar and Rosli Salleh
                 and Ainuddin Wahid Abdul Wahab",
  journal =      "Digital Investigation",
  volume =       "13",
  pages =        "22--37",
  year =         "2015",
  publisher =    "Elsevier",
  note =         {\url{http://www.researchgate.net/profile/Ali_Feizollah},
  annote =       "Abstract The widespread use of mobile devices in
                 comparison to personal computers has led to a new era
                 of information exchange. The purchase trends of
                 personal computers have started decreasing whereas the
                 shipment of mobile devices is increasing. In addition,
                 the increasing power of mobile devices along with
                 portability characteristics has attracted the attention
                 of users. Not only are such devices popular among
                 users, but they are favorite targets of attackers. The
                 number of mobile malware is rapidly on the rise with
                 malicious activities, such as stealing users data,
                 sending premium messages and making phone call to
                 premium numbers that users have no knowledge. Numerous
                 studies have developed methods to thwart such attacks.
                 In order to develop an effective detection system, we
                 have to select a subset of features from hundreds of
                 available features. In this paper, we studied 100
                 research works published between 2010 and 2014 with the
                 perspective of feature selection in mobile malware
                 detection. We categorize available features into four
                 groups, namely, static features, dynamic features,
                 hybrid features and applications metadata.
                 Additionally, we discuss datasets used in the recent
                 research studies as well as analyzing evaluation
                 measures utilized.",
}

@Article{baddar2014,
  title =        "Anomaly Detection in Computer Networks: {A}
                 State-of-the-Art Review",
  author =       "Sherenaz Al-Haj Baddar and Alessio Merlo and Mauro
                 Migliardi",
  journal =      "Journal of Wireless Mobile Networks, Ubiquitous
                 Computing, and Dependable Applications (JoWUA)",
  volume =       "5",
  number =       "4",
  pages =        "29--64",
  year =         "2014",
  note =         {\url{http://isyou.info/jowua/papers/jowua-v5n4-2.pdf}},
  annote =       "Abstract The ever-lasting challenge of detecting and
                 mitigating failures in computer networks has become
                 more essential than ever; especially with the enormous
                 number of smart devices that get connected to all sorts
                 of network everyday. Whether the root cause of a given
                 anomaly is a security breach, a component failure, an
                 environmental factor, or even any combination of these
                 reasons, anomalies need to be detected and mitigated
                 timely and properly. In this paper, we review and
                 evaluate the state-of-the-art studies on the problem of
                 anomaly detection in computer networks. We provide an
                 elaborate description of the anomaly detection problem,
                 and depict the different categorizations of its
                 solutions. We also illustrate some recent
                 state-of-the-art solutions on the network level, and
                 depict current trends in handling malware-induced
                 anomalies in smartphone networks. Additionally, we
                 evaluate the presented solutions and highlight their
                 shortcomings.",
}

@InProceedings{gomez2013,
  title =        {Reran: Timing-and touch-sensitive record and replay
                 for {Android}},
  author =       "Lorenzo Gomez and Iulian Neamtiu and Tanzirul Azim and
                 Todd Millstein",
  booktitle =    "Software Engineering (ICSE), 2013 35th International
                 Conference on",
  pages =        "72--81",
  year =         "2013",
  organization = "IEEE",
  annote =       "Abstract—Touchscreen-based devices such as
                 smartphones and tablets are gaining popularity, but
                 their rich input capabilities pose new development and
                 testing complications. To alleviate this problem, we
                 present an approach and tool named RERAN that permits
                 record-and-replay for the {Android} smartphone platform.
                 Existing GUI-level record-and-replay approaches are
                 inadequate due to the expressiveness of the smartphone
                 domain, in which applications support sophisticated GUI
                 gestures, depend on inputs from a variety of sensors on
                 the device, and have precise timing requirements among
                 the various input events. We address these challenges
                 by directly capturing the low-level event stream on the
                 phone, which includes both GUI events and sensor
                 events, and replaying it with microsecond accuracy.
                 Moreover, RERAN does not require access to app source
                 code, perform any app rewriting, or perform any
                 modifications to the virtual machine or {Android}
                 platform. We demonstrate RERAN’s applicability in a
                 variety of scenarios, including (a) replaying 86 out of
                 the Top-100 {Android} apps on Google Play; (b)
                 reproducing bugs in popular apps, e.g., Firefox,
                 Facebook, Quickoffice; and (c) fast-forwarding
                 executions. We believe that our versatile approach can
                 help both {Android} developers and researchers. Index
                 Terms: Record-and-replay, Google {Android}.",
}

@Misc{Bierma2014,
  author =       "Michael Bierma and Eric Gustafson and Jeremy Erickson
                 and David Fritz and Yung Ryn Choe",
  title =        "Andlantis: Large-scale {{Android}} {Dynamic}
                 {Analysis},
  key =          "",
  howpublished = "http://arxiv.org/",
  year =         "2014",
  note =         "http://arxiv.org/pdf/1410.7751.pdf",
  annote =       "Sandia National Laboratories, University of
                 California, Davis;; Abstract— Analyzing {Android}
                 applications for malicious behavior is an important
                 area of research, and is made difficult, in part, by
                 the increasingly large number of applications available
                 for the platform. While techniques exist to perform
                 static analysis on a large number of applications,
                 dynamic analysis techniques are relatively limited in
                 scale due to the computational resources required to
                 emulate the full {Android} system to achieve accurate
                 execution. We present Andlantis, a scalable dynamic
                 analysis system capable of processing over 3000 {Android}
                 applications per hour. During this processing, the
                 system is able to collect valuable forensic data, which
                 helps reverse-engineers and malware researchers
                 identify and understand anomalous application behavior.
                 We discuss the results of running 1261 malware samples
                 through the system, and provide examples of malware
                 analysis performed with the resulting data.",
}

@InProceedings{lindorfer2014,
  title =        {ANDRUBIS -- 1,000,000 Apps Later: A View on Current
                  {Android} Malware Behaviors},
  author =       "Martina Lindorfer and Matthias Neugschwandtner and
                 Lukas Weichselbaum and Yanick Fratantonio and Victor
                 {van der Veen} and Christian Platzer",
  booktitle =    "Proceedings of the the 3rd International Workshop on
                 Building Analysis Datasets and Gathering Experience
                 Returns for Security (BADGERS)",
  year =         "2014",
  note =         {\url{http://www.seclab.tuwien.ac.at/papers/andrubis_badgers14.pdf}},
  annote =       "Abstract—{Android} is the most popular smartphone
                 operating system with a market share of 80\%, but as a
                 consequence, also the platform most targeted by
                 malware. To deal with the increasing number of
                 malicious {Android} apps in the wild, malware analysts
                 typically rely on analysis tools to extract
                 characteristic information about an app in an automated
                 fashion. While the importance of such tools has been
                 addressed by the research community, the resulting
                 prototypes remain limited in terms of analysis
                 capabilities and availability. In this paper we present
                 ANDRUBIS, a fully automated, publicly available and
                 comprehensive analysis system for {Android} apps.
                 ANDRUBIS combines static analysis with dynamic analysis
                 on both Dalvik VM and system level, as well as several
                 stimulation techniques to increase code coverage. With
                 ANDRUBIS, we collected a dataset of over 1,000,000
                 {Android} apps, including 40\% malicious apps. This
                 dataset allows us to discuss trends in malware behavior
                 observed from apps dating back as far as 2010, as well
                 as to present insights gained from operating ANDRUBIS
                 as a publicly available service for the past two
                 years.",
}

@Technicalreport{fuchs2009,
  title =        {{SC}{Android}: Automated Security Certiﬁcation of
                 {Android} Applications},
  author =       "Adam P Fuchs and Avik Chaudhuri and Jeffrey S Foster",
  institution =  "Univ. of Maryland",
  note =         {\url{http://www. cs. umd.
                 edu/avik/projects/sc{Android}ascaa},
  year =         "2009",
  annote =       "CS-TR-4991, Department of Computer Science, University
                 of Maryland, College Park, November 2009. Abstract
                 {Android} is a popular mobile-device platform developed
                 by Google. {Android}’s application model is designed to
                 encourage applications to share their code and data
                 with other applications. While such sharing can be
                 tightly controlled with permissions, in general users
                 cannot determine what applications will do with their
                 data, and thereby cannot decide what permissions such
                 applications should run with. In this paper we present
                 SC{ANDROID}, a tool for reasoning automatically about the
                 security of {Android} applications. SC{ANDROID}’s
                 analysis is modular to allow incremental checking of
                 applications as they are installed on an {Android}
                 device. It extracts security specifications from
                 manifests that accompany such applications, and checks
                 whether data flows through those applications are
                 consistent with those specifications. To our knowledge,
                 SC{ANDROID} is the first program analysis tool for
                 {Android}, and we expect it to be useful for automated
                 security certification of {Android} applications.",
}

@InProceedings{azim2014,
  title =        "Towards Self-Healing Smartphone Software via Automated
                 Patching",
  author =       "Md Tanzirul Azim and Iulian Neamtiu and Lisa M
                 Marvel",
  booktitle =    "Proceedings of the 29th ACM/IEEE international
                 conference on Automated software engineering",
  pages =        "623--628",
  year =         "2014",
  organization = "ACM",
  note =         {\url{http://www.cs.ucr.edu/~neamtiu/pubs/ase14azim.pdf}},
}

@InProceedings{azim2013,
  title =        "Targeted and Depth-first Exploration for Systematic
                 Testing of {Android} Apps",
  author =       "Tanzirul Azim and Iulian Neamtiu",
  booktitle =    "OOPSLA 2013",
  pages =        "641--660",
  month =        oct,
  year =         "2013",
  publisher =    "ACM",
  note =         {\url{http://www.cs.ucr.edu/~neamtiu/pubs/oopsla13azim.pdf}},
  annote =       "University of California, Riverside;; Experiments with
                 using our approach on 25 popular {Android} apps including
                 BBC News, Gas Buddy, Amazon Mobile, YouTube, Shazam
                 Encore, and CNN, show that our exploration techniques
                 achieve 59.39–64.11\% activity coverage and
                 29.53–36.46\% method coverage",
}

@TechReport{MouaBad2013,
  author =       "Zscaler",
  title =        "Dissection of {Android} malware MouaBad.{P},
  institution =  "research.zscaler.com",
  year =         "2013",
  key =          "dissect malware",
  OPTtype =      "",
  OPTnumber =    "",
  OPTaddress =   "",
  OPTmonth =     "",
  note =         {\url{http://research.zscaler.com/2013/12/dissection-of-Android-malware-mouabadp.html},
}

@TechReport{FlappyBird2014,
  author =       "securehoney.net",
  title =        "How To Dissect {Android} Flappy Bird Malware",
  institution =  "http://securehoney.net/",
  year =         "2014",
  key =          "dissect malware",
  OPTtype =      "",
  OPTnumber =    "",
  OPTaddress =   "",
  OPTmonth =     "",
  note =         {\url{http://securehoney.net/blog/how-to-dissect-Android-flappy-bird-malware.html\#.VYbnpXUVhBc},
  OPTannote =    "",
}

@Article{varghese2011,
  title =        "Dissecting Andro Malware ‘",
  author =       "Vadodil Joel Varghese and Stuart Walker",
  journal =      "University of Essex",
  year =         "2011",
  note =         {\url{https://dl.packetstormsecurity.net/papers/general/Dissecting_Andro_Malware.pdf}},
}

@InProceedings{zhou2012,
  title =        "Dissecting {{Android}} {Malware}: Characterization and
                 evolution",
  author =       "Yajin Zhou and Xuxian Jiang",
  booktitle =    "Security and Privacy (SP), 2012 IEEE Symposium on",
  pages =        "95--109",
  year =         "2012",
  organization = "IEEE",
  note =         {\url{http://www.csc.ncsu.edu/faculty/jiang/pubs/OAKLAND12.pdf}},
  annote =       "Abstract—The popularity and adoption of smartphones
                 has greatly stimulated the spread of mobile malware,
                 especially on the popular platforms such as {Android}. In
                 light of their rapid growth, there is a pressing need
                 to develop effective solutions. However, our defense
                 capability is largely constrained by the limited
                 understanding of these emerging mobile malware and the
                 lack of timely access to related samples. In this
                 paper, we focus on the {Android} platform and aim to
                 systematize or characterize existing {Android} malware.
                 Particularly, with more than one year effort, we have
                 managed to collect more than 1,200 malware samples that
                 cover the majority of existing {Android} malware
                 families, ranging from their debut in August 2010 to
                 recent ones in October 2011. In addition, we
                 systematically characterize them from various aspects,
                 including their installation methods, activation
                 mechanisms as well as the nature of carried malicious
                 payloads. The characterization and a subsequent
                 evolution-based study of representative families reveal
                 that they are evolving rapidly to circumvent the
                 detection from existing mobile anti-virus software.
                 Based on the evaluation with four representative mobile
                 security software, our experiments show that the best
                 case detects 79.6\% of them while the worst case
                 detects only 20.2\% in our dataset. These results
                 clearly call for the need to better develop
                 next-generation anti-mobile-malware solutions.",
}

@InProceedings{fahl2012,
  title =        "Why Eve and Mallory love {Android}: An analysis of
                 {Android} {SSL} (in) security",
  author =       "Sascha Fahl and Marian Harbach and Thomas Muders and
                 Lars Baumg{\"a}rtner and Bernd Freisleben and Matthew
                 Smith",
  booktitle =    "Proceedings of the 2012 ACM conference on Computer and
                 communications security",
  pages =        "50--61",
  year =         "2012",
  organization = "ACM",
}

@Book{hoog2011,
  title =        {Android Forensics: Investigation, Analysis and Mobile
                 Security for Google {Android}},
  author =       "Andrew Hoog",
  year =         "2011",
  publisher =    "Elsevier",
}

@InProceedings{berger2011,
  title =        "An {Android} security case study with bauhaus",
  author =       "Bernhard J Berger and Michaela Bunke and Karsten
                 Sohr",
  booktitle =    "Reverse Engineering (WCRE), 2011 18th Working
                 Conference on",
  pages =        "179--183",
  year =         "2011",
  organization = "IEEE",
}

@Article{hobarth2011,
  title =        {A Framework for On-Device Privilege Escalation Exploit
                 Execution on {Android}},
  author =       "Sebastian H{\"o}barth and Rene Mayrhofer",
  journal =      "3rd Int Workshop on Security and Privacy in
                 Spontaneous Interaction and Mobile Phone Use,
                 IWSSI/SPMU",
  volume =       "20",
  number =       "4",
  pages =        "50--52",
  year =         "2011",
  note =         {\url{https://doc.to/downloads/publications/IWSSI2011-Android-Exploit-Framework.pdf}},
                 \url{http://www.medien.ifi.lmu.de/iwssi2011/},
  annote =       "Sebastian Höbarth Upper Austria University of Applied
                 Sciences sebastian.hoebarth@fh-hagenberg.at Rene
                 Mayrhofer Upper Austria University of Applied Sciences
                 rene.mayrhofer@fh-hagenberg.at ABSTRACT Exploits on
                 mobile phones can be used for various reasons; a benign
                 one may be to achieve system-level access on a device
                 that was locked by the manufacturer or service provider
                 (also known as ‘jailbreaking’ or ‘rooting’),
                 while potentially malicious reasons are manifold.
                 Independently of the use case however, a specific
                 exploit is not sufficient to achieve the desired access
                 rights. Typically, exploits provide temporary privilege
                 escalation immediately after their execution. To
                 provide additional access to applications, permanent
                 privilege escalation is required – in the benign
                 case, including secure access control for the user to
                 decide which (parts of) applications are granted
                 elevated access. In this paper, we present a framework
                 that can use arbitrary temporary exploits on {Android}
                 devices to achieve permanent ‘root’ capabilities
                 for select (parts of) applications.",
}

@Article{shabtai2010,
  title =        "Google {Android}: {A} Comprehensive Security
                 Assessment",
  author =       "Asaf Shabtai and Yuval Fledel and Uri Kanonov and
                 Yuval Elovici and Shlomi Dolev and Chanan Glezer",
  journal =      "IEEE Security and Privacy",
  volume =       "8",
  number =       "2",
  pages =        "35--44",
  year =         "2010",
  publisher =    "IEEE Educational Activities Department",
}

@InCollection{armando2013,
  title =        "Formal modeling and reasoning about the {{Android}}
                 security framework",
  author =       "Alessandro Armando and Gabriele Costa and Alessio
                 Merlo",
  booktitle =    "Trustworthy Global Computing",
  pages =        "64--81",
  year =         "2013",
  publisher =    "Springer",
  note =         {\url{http://www.csec.it/pubs/tgc2012.pdf}},
  annote =       "Abstract. {Android} OS is currently the most widespread
                 mobile operating system and is very likely to remain so
                 in the near future. The number of available {Android}
                 applications will soon reach the staggering figure of
                 500,000, with an average of 20,000 applications being
                 introduced in the {Android} Market over the last 6
                 months. Since many applications (e.g., home banking
                 applications) deal with sensitive data, the security of
                 {Android} is receiving a growing attention by the
                 research community. However, most of the work assumes
                 that {Android} meets some given high-level security goals
                 (e.g. sandboxing of applications). Checking whether
                 these security goals are met is therefore of paramount
                 importance. Unfortunately this is also a very difficult
                 task due to the lack of a detailed security model
                 encompassing not only the interaction among
                 applications but also the interplay between the
                 applications and the functionalities offered by
                 {Android}. To remedy this situation in this paper we
                 propose a formal model of {Android} OS that allows one to
                 formally state the high-level security goals as well as
                 to check whether these goals are met or to identify
                 potential security weaknesses.",
}

@InProceedings{tesfay2012,
  title =        "Reputation Based Security Model for {Android}
                 Applications",
  author =       "Welderufael Berhane Tesfay and Todd Booth and Karl
                 Andersson",
  booktitle =    "Trust, Security and Privacy in Computing and
                 Communications (TrustCom), 2012 IEEE 11th International
                 Conference on",
  pages =        "896--901",
  year =         "2012",
  organization = "IEEE",
  note =         {\url{https://pure.ltu.se/portal/files/37020526/4745a896.pdf}},
  annote =       "Abstract The market for smart phones has been booming
                 in the past few years. There are now over 400,000
                 applications on the {Android} market. Over 10 billion
                 {Android} applications have been downloaded from the
                 {Android} market. Due to the {Android} popularity, there
                 are now a large number of malicious vendors targeting
                 the platform. Many honest end users are being
                 successfully hacked on a regular basis. In this work, a
                 cloud based reputation security model has been proposed
                 as a solution which greatly mitigates the malicious
                 attacks targeting the {Android} market. Our security
                 solution takes advantage of the fact that each
                 application in the {Android} platform is assigned a
                 unique user id (UID). Our solution stores the
                 reputation of {Android} applications in an anti-malware
                 providers’ cloud (AM Cloud). The experimental results
                 witness that the proposed model could well identify the
                 reputation index of a given application and hence its
                 potential of being risky or not.",
}

@Book{Azzola2014,
  author =       "Francesco ",
  title =        {Android} Bound Service: {IPC} with Messenger",
  year =         "2014",
  publisher =    "SurvivingWithAndroid.com",
  note =         {\url{http://www.survivingwithAndroid.com/},
}

@Book{misra2013,
  title =        {Android Security: Attacks and Defenses},
  author =       "Anmol Misra and Abhishek Dubey",
  year =         "2013",
  publisher =    "CRC Press",
}

@Book{annuzzi2013,
  title =        "Introduction to {Android} application development:
                 {Android} essentials",
  author =       "Joseph {Annuzzi Jr} and Lauren Darcey and Shane
                 Conder",
  year =         "2013",
  publisher =    "Pearson Education",
}

@InProceedings{luo2011,
  title =        "Attacks on WebView in the {Android} system",
  author =       "Tongbo Luo and Hao Hao and Wenliang Du and Yifei Wang
                 and Heng Yin",
  booktitle =    "Proceedings of the 27th Annual Computer Security
                 Applications Conference",
  pages =        "343--352",
  year =         "2011",
  organization = "ACM",
  note =         {\url{http://surface.syr.edu/cgi/viewcontent.cgi?article=1217&context=eecs},
}

@InProceedings{Yin2007,
  author =       "Heng Yin and Dawn Song and Manuel Egele and
                 Christopher Kruegel and Engin Kirda",
  title =        "Panorama: Capturing System-wide Information Flow for
                 Malware Detection and Analysis",
  booktitle =    "Proceedings of the 14th ACM Conference on Computer and
                 Communications Security",
  series =       "CCS '07",
  year =         "2007",
  ISBN =         "978-1-59593-703-2",
  location =     "Alexandria, Virginia, USA",
  pages =        "116--127",
  note =         {\url{http://repository.cmu.edu/cgi/viewcontent.cgi?article=1006&context=ece},
  numpages =     "12",
  URL =          "http://doi.acm.org/10.1145/1315245.1315261",
  publisher =    "ACM",
  address =      "New York, NY, USA",
  keywords =     "dynamic taint analysis, malware analysis, malware
                 detection, spyware",
  annote =       "Heng Yin∗† Dawn Song‡∗ Manuel Egele,
                 Christopher Kruegel, Engin Kirda§ hyin@ece.cmu.edu
                 dawnsong@cs.berkeley.edu
                 {pizzaman,chris,ek}@seclab.tuiwen.ac.at ∗ Carnegie
                 Mellon University, Pittsburgh, PA, USA †College of
                 William and Mary, Williamsburg, VA, USA ‡ UC
                 Berkeley, Berkeley, CA, USA § Technical University
                 Vienna, Austria ABSTRACT Malicious programs spy on
                 users’ behavior and compromise their privacy. Even
                 software from reputable vendors, such as Google Desktop
                 and Sony DRM media player, may perform undesirable
                 actions. Unfortunately, existing techniques for
                 detecting malware and analyzing unknown code samples
                 are insufficient and have significant shortcomings. We
                 observe that malicious information access and
                 processing behavior is the fundamental trait of
                 numerous malware categories breaching users’ privacy
                 (including keyloggers, password thieves, network
                 sniffers, stealth backdoors, spyware and rootkits),
                 which separates these malicious applications from
                 benign software. We propose a system, Panorama, to
                 detect and analyze malware by capturing this
                 fundamental trait. In our extensive experiments,
                 Panorama successfully detected all the malware samples
                 and had very few false positives. Furthermore, by using
                 Google Desktop as a case study, we show that our system
                 can accurately capture its information access and
                 processing behavior, and we can con- firm that it does
                 send back sensitive information to remote servers in
                 certain settings. We believe that a system such as
                 Panorama will offer indispensable assistance to code
                 analysts and malware researchers by enabling them to
                 quickly comprehend the behavior and innerworkings of an
                 unknown sample. Categories and Subject Descriptors
                 D.4.6 [Operating Systems]: Security and
                 Protection—Invasive software",
}

@InProceedings{Fiebig2014,
  author =       "Tobias Fiebig and Jan Krissler and Ronny H{\"a}nsch",
  title =        "Security Impact of High Resolution Smartphone
                 Cameras",
  booktitle =    "8th USENIX Workshop on Offensive Technologies (WOOT
                 14)",
  year =         "2014",
  month =        Aug,
  address =      "San Diego, CA",
  URL =          "https://www.usenix.org/conference/woot14/workshop-program/presentation/fiebig",
  publisher =    "USENIX Association",
  note =         {\url{https://www.usenix.org/system/files/conference/woot14/woot14-fiebig.pdf}},
  annote =       "Tobias Fiebig, Jan Krissler, and Ronny Hänsch, Berlin
                 University of Technology Abstract: Nearly every modern
                 mobile device includes two cameras. With advances in
                 technology the resolution of these sensors has
                 constantly increased. While this development provides
                 great convenience for users, for example with
                 video-telephony or as dedicated camera replacement, the
                 security implications of including high resolution
                 cameras on such devices has yet to be considered in
                 greater detail. With this paper we demonstrate that an
                 attacker may abuse the cameras in modern smartphones to
                 extract valuable information from a victim. First, we
                 consider exploiting a front-facing camera to capture a
                 user’s keystrokes. By observing facial reflections,
                 it is possible to capture user input with the camera.
                 Subsequently, individual keystrokes can be extracted
                 from the images acquired with the camera. Furthermore,
                 we demonstrate that these cameras can be used by an
                 attacker to extract and forge the fingerprints of a
                 victim. This enables an attacker to perform a wide
                 range of malicious actions, including authentication
                 bypass on modern biometric systems and falsely
                 implicating a person by planting fingerprints in a
                 crime scene. Finally, we introduce several mitigation
                 strategies for the identified threats.",
}

@InProceedings{jin2014,
  title =        "Code Injection Attacks on {HTML5}-based Mobile Apps:
                 Characterization, Detection and Mitigation",
  author =       "Xing Jin and Xuchao Hu and Kailiang Ying and Wenliang
                 Du and Heng Yin and Gautam Nagesh Peri",
  booktitle =    "Proceedings of the 2014 ACM SIGSAC Conference on
                 Computer and Communications Security",
  pages =        "66--77",
  year =         "2014",
  organization = "ACM",
  note =         {\url{http://www.cis.syr.edu/~wedu/Research/paper/code_injection_ccs2014.pdf}},
  annote =       "Xing Jin, Xunchao Hu, Kailiang Ying, Wenliang Du, Heng
                 Yin and Gautam Nagesh Peri Department of Electrical
                 Engineering \& Computer Science, Syracuse University,
                 Syracuse, New York, USA {xjin05, xhu31, kying, wedu,
                 heyin, nperi}@syr.edu ABSTRACT Due to the portability
                 advantage, HTML5-based mobile apps are getting more and
                 more popular. Unfortunately, the web technology used by
                 HTML5-based mobile apps has a dangerous feature, which
                 allows data and code to be mixed together, making code
                 injection attacks possible. In this paper, we have
                 conducted a systematic study on this risk in
                 HTML5-based mobile apps. We found a new form of code
                 injection attack, which inherits the fundamental cause
                 of Cross-Site Scripting attack (XSS), but it uses many
                 more channels to inject code than XSS. These channels,
                 unique to mobile devices, include Contact, SMS,
                 Barcode, MP3, etc. To assess the prevalence of the code
                 injection vulnerability in HTML5- based mobile apps, we
                 have developed a vulnerability detection tool to
                 analyze 15,510 PhoneGap apps collected from Google
                 Play. 478 apps are flagged as vulnerable, with only
                 2.30\% false-positive rate. We have also implemented a
                 prototype called NoInjection as a Patch to PhoneGap in
                 {Android} to defend against the attack. Categories and
                 Subject Descriptors D.4.6 [OPERATING SYSTEMS]: Security
                 and Protection; D.2.5 [SOFTWARE ENGINEERING]: Testing
                 and Debugging—Code inspections and walk-throughs.",
}

@InProceedings{wang2014,
  title =        {Compac: Enforce component-level access control in
                 {Android}},
  author =       "Yifei Wang and Srinivas Hariharan and Chenxi Zhao and
                 Jiaming Liu and Wenliang Du",
  booktitle =    "Proceedings of the 4th ACM conference on Data and
                 application security and privacy",
  pages =        "25--36",
  year =         "2014",
  organization = "ACM",
  annote =       "Yifei Wang, Srinivas Hariharan, Chenxi Zhao, Jiaming
                 Liu, and Wenliang Du Dept. of Electrical Engineering \&
                 Computer Science Syracuse University, Syracuse, New
                 York {ywang123,srhariha,chzhao,jliu20,wedu}@syr.edu
                 ABSTRACT In {Android} applications, third-party
                 components may bring potential security problems,
                 because they have the same privilege as the
                 applications but cannot be fully trusted. It is
                 desirable if their privileges can be restricted. To
                 minimize the privilege of the third-party components,
                 we develop Compac to achieve a fine-grained access
                 control at application’s component level. Compac
                 allows developers and users to assign a subset of an
                 application’s permissions to some of the
                 application’s components. By leveraging the runtime
                 Java package information, the system can acquire the
                 component information that is running in the
                 application. After that, the system makes decisions on
                 privileged access requests according to the policy
                 defined by the developer and user. We have implemented
                 the prototype in {Android} 4.0.4, and have conducted a
                 comprehensive evaluation. Our case studies show that
                 Compac can effectively restrict the thirdparty
                 components’ permissions. Antutu benchmark shows that
                 the overall score of our work achieves 97.4\%, compared
                 with the score of the original {Android}. In conclusion,
                 Compac can mitigate the damage caused by third-party
                 components with ignorable overhead.",
}

@InProceedings{spreitzenbarth2013,
  title =        "Mobile-sandbox: Having a deeper look into {Android}
                 applications",
  author =       "Michael Spreitzenbarth and Felix Freiling and Florian
                 Echtler and Thomas Schreck and Johannes Hoffmann",
  booktitle =    "Proceedings of the 28th Annual ACM Symposium on
                 Applied Computing",
  pages =        "1808--1815",
  year =         "2013",
  organization = "ACM",
  note =         {\url{
                 http://syssec.rub.de/media/emma/veroeffentlichungen/2013/09/17/spreitzenbarth2013mobilesandbox.pdf}},
  annote =       "Smartphones in general and {Android} in particular are
                 increasingly shifting into the focus of cybercriminals.
                 For understanding the threat to security and privacy it
                 is important for security researchers to analyze
                 malicious software written for these systems. The
                 exploding number of {Android} malware calls for
                 automation in the analysis. In this paper, we present
                 Mobile-Sandbox, a system designed to automatically
                 analyze {Android} applications in two novel ways: (1) it
                 combines static and dynamic analysis, i.e., results of
                 static analysis are used to guide dynamic analysis and
                 extend coverage of executed code, and (2) it uses
                 specific techniques to log calls to native (i.e.,
                 “non-Java”) APIs. We evaluated the system on more
                 than 36,000 applications from Asian thirdparty mobile
                 markets and found that 24\% of all applications
                 actually use native calls in their code.",
}

@MastersThesis{korczynski2015,
  title =        "ClusTheDroid: Clustering {Android} Malware",
  author =       "David Korczynski",
  school =       "",
  OPTkey =       "",
  OPTtype =      "",
  OPTaddress =   "",
  OPTmonth =     "",
  note =         "Supervisor: Lorenzo Cavallaro,
                 \url{https://www.ma.rhul.ac.uk/static/techrep/2015/RHUL-MA-2015-1.pdf}},
  year =         "2015",
  note =         {\url{https://www.ma.rhul.ac.uk/static/techrep/2015/RHUL-MA-2015-1.pdf}},
}

@Article{tsukasa2011,
  title =        "Yet Another {Android} Rootkit",
  author =       "OI Tsukasa",
  year =         "2011",
  journal =      {\url{blackhat.com},
  abstract =     {Android} devices have been repeatedly hacked for root
                 privileges. Sometimes by malware authors, and sometimes
                 by users themselves. This is because if someone gains
                 root privileges, he or she can gain control of the
                 parts of the system which are most useful for attackers
                 (and for users as well). But this is not the end of the
                 story - we need a bit more knowledge to gain much
                 privilege inside the {Android} application system. On the
                 other hand, some Japanese {Android} smartphones have an
                 extra Linux Security Module (LSM) to prevent these
                 rooting issues and protect the system from being
                 overwritten. But because of {Android}'s security
                 weaknesses and incomplete LSM protection, the {Android}
                 application system can still be taken over by
                 exploitation. This presentation explains what we
                 can/cannot do if we gain root privileges on an {Android}
                 device, and introduces a new kind of {Android} rootkit.
                 This rootkit needs only root privileges (no
                 kernel-mode, no ptrace) and bypasses all existing
                 security modules. This fact implies the possibility of
                 advanced {Android} malware.",
}

@Article{jaybhaye2015,
  title =        "Employee Monitoring System Using {Android} Smartphone",
  author =       "Ashwini Jaybhaye and Prajakta Kokare and Bhakti
                 Toradmal and Tanmay Kulkarni",
  year =         "2015",
  journal =      "International Engineering Research Journal",
  pages =        "32--35",
  note =         {\url{www.ierjournal.org},
                 \url{http://asqw.esy.es/papers/Employee Monitoring
                 System Using {Android} Smartphone.pdf}},
}

@Manual{CydiaSubstrate,
  title =        {Cydia Substrate for {Android}},
  OPTkey =       "",
  OPTauthor =    "",
  organization = "CydiaSubstrate.com",
  OPTaddress =   "",
  OPTedition =   "",
  OPTmonth =     "",
  year =         "2015",
  note =         {\url{http://www.cydiasubstrate.com/},
  annote =       "Similar to a framework called Xposed.  Substrate makes
                 it easy to modify software, even without the source
                 code. Code Injection. Substrate extensions are simply
                 classes that will be loaded immediately after the Java
                 VM is initialized, allowing an opportunity to use other
                 Substrate APIs.",
}

@Manual{Xposed-rovo89,
  title =        "Xposed",
  OPTkey =       "",
  author =       "rovo89",
  OPTorganization = "",
  OPTaddress =   "",
  OPTedition =   "",
  month =        mar,
  year =         "2012",
  note =         {\url{https://github.com/rovo89/XposedBridge/wiki/Development-tutorial},
  annote =       "There is a process that is called {"}Zygote{"}. This
                 is the heart of the {Android} runtime. Every application
                 is started as a copy ({"}fork{"}) of it. This process
                 is started by an /init.rc script when the phone is
                 booted. The process start is done with
                 /system/bin/app-process, which loads the needed classes
                 and invokes the initialization methods. This is where
                 Xposed comes into play. When you install the framework,
                 an extended app-process executable is copied to
                 /system/bin. This extended startup process adds an
                 additional jar to the classpath and calls methods from
                 there at certain places. For instance, just after the
                 VM has been created, even before the main method of
                 Zygote has been called. And inside that method, we are
                 part of Zygote and can act in its context. The jar is
                 located at
                 /data/data/de.robv.{Android}.xposed.installer/bin/XposedBridge.jar
                 and its source code can be found here. Looking at the
                 class XposedBridge, you can see the main method. This
                 is what I wrote about above, this gets called in the
                 very beginning of the process. Some initializations are
                 done there and also the modules are loaded (I will come
                 back to module loading later).",
}

@Article{park2015sbisurban,
  title =        {{SBIS}urban-Secure Urban Bus Information System based
                 on Smart Devices},
  author =       "Donghyuk Park and Hyunsung Kim",
  journal =      "International Journal of Security and Its
                 Applications",
  volume =       "9",
  number =       "1",
  pages =        "205--220",
  year =         "2015",
  note =         {\url{http://www.sersc.org/journals/IJSIA/vol9_no1_2015/21.pdf}},
}

@Article{andreolini2015collaborative,
  title =        "A collaborative framework for intrusion detection in
                 mobile networks",
  author =       "Mauro Andreolini and Michele Colajanni and Mirco
                 Marchetti",
  journal =      "Information Sciences",
  year =         "2015",
  publisher =    "Elsevier",
}

@Article{pandey2015mobile,
  title =        "Mobile Based Home Automation and Security System",
  author =       "Monu Pandey and M Rajasekhara Babu and Javvaji Manasa
                 and K Avinash",
  journal =      "Indian Journal of Science and Technology",
  volume =       "8",
  number =       "S2",
  pages =        "12--16",
  year =         "2015",
  note =         {\url{
                 http://www.indjst.org/index.php/indjst/article/viewFile/57792/45113},
}

@Misc{OnHaxAndroRat2014,
  OPTkey =       "",
  author =       "Andro AndroRat",
  title =        "How to Spy Any {Android} Device with AndroRat",
  howpublished = "web",
  month =        aug,
  year =         "2014",
  OPTnote =      {\url{http://onhax.net/androrat/},
  OPTannote =    "AndroRat is a client/server application developed in
                 Java {Android} for the client side and in Java/Swing for
                 the Server. The name Androrat is a mix of {Android} and
                 RAT (Remote Access Tool). The goal of the application
                 is to give the control of the {Android} system remotely
                 and retrieve information from it.",
}

@Article{anwar2015,
  title =        "Guess who is listening in to the board meeting: on the
                 use of mobile device applications as roving spy bugs",
  author =       "Zahid Anwar and Waqas Ahmad Khan",
  journal =      "Security and Communication Networks",
  year =         "2015",
  publisher =    "Wiley Online Library",
  annote =       "... The next entry, AndroRAT, is a fully featured
                 remote access Trojan for {Android} devices that lets
                 hackers remotely control various aspects of a mobile
                 device using Internet protocol communication over a
                 user datagram protocol port. Used together with a
                 binder software, it can be ...",
}

@Article{serce2015design,
  title =        "Design and Development of an {Android} Accessory",
  author =       "FC Serce and A Erpay and A Kara and B Unal and D
                 Ozgubar and A Ozturk and S Sekerci",
  year =         "2015",
  note =         {\url{http://www.ijeee.net/uploadfile/2015/0112/20150112045817331.pdf}},
  annote =       "... Although ADB works well on all {Android} devices, it
                 is not an ideal solution for security issues; enabling
                 ... International Journal of Electronics and Electrical
                 Engineering Vol. ... A firmware establishing
                 communication with {Android} device is prepared based on
                 Microchip's samples [8]. ... Abstract—During Google
                 I/O 2011, Google released the {Android} Open Accessory
                 standard and launched {Android} Open Accessory
                 Development Kit based on Arduino as a reference
                 implementation for hardware manufacturers and as a
                 starting point for building accessories for {Android}.
                 This technology allows {Android} applications to
                 communicate with real world devices such as keyboards,
                 robots, exercise machines, cars and more. It has the
                 potential to change the way we use and interact with
                 our smartphones and tablets. In this study, an {Android}
                 accessory has been designed, developed and
                 manufactured. The paper covers the details of the
                 development phases and experiences are shared at the
                 end.",
}

@InProceedings{islam2015secure,
  title =        "Secure end-to-end {SMS} communication over {GSM}
                 networks",
  author =       "Saad Islam and Inam Ul Haq and Amna Saeed",
  booktitle =    "Applied Sciences and Technology (IBCAST), 2015 12th
                 International Bhurban Conference on",
  pages =        "286--292",
  year =         "2015",
  organization = "IEEE",
}

@Article{hu2015,
  title =        "A Survey on Mobile Social Networks: Applications,
                 Platforms, System Architectures, and Future Research
                 Directions",
  author =       "Xiping Hu and Terry HS Chu and Victor CM Leung and
                 EC-H Ngai and Philippe Kruchten and Henry CB Chan",
  year =         "2015",
  publisher =    "IEEE",
}

@Article{navya2015,
  title =        {Android Based Children Tracking System Using Voice
                 Recognition},
  author =       "M Navya and S Mohammed Rafi and K Niranjan Reddy",
  year =         "2015",
  journal =      "International Journal of Computer Science and Mobile
                 Computing",
  volume =       "4",
}

@Article{abdelouahab2015,
  title =        "Adaptive Security Mechanism: a study on the different
                 approaches to mobile devices",
  author =       "Zair Abdelouahab and Cl{\'a}udio Aroucha and Denivaldo
                 Lopes and Jonathan Santos and Willian Ribeiro and Higo
                 Pires",
  journal =      "Journal of Information Sciences and Computing
                 Technologies",
  volume =       "2",
  number =       "2",
  pages =        "147--153",
  year =         "2015",
  note =         {\url{http://www.scitecresearch.com/journals/index.php/jisct/article/viewFile/70/38},
}

@Article{sun2015,
  title =        "High Secure Mobile Operating System Based on a New
                 Mobile Internet Device Hardware Architecture",
  author =       "Gengxin Sun and Sheng Bin",
  journal =      "International Journal of Future Generation
                 Communication and Networking",
  volume =       "8",
  number =       "1",
  pages =        "127--136",
  year =         "2015",
}

@Article{du2015,
  title =        "A static {Android} malicious code detection method based
                 on multi-source fusion",
  author =       "Yao Du and Xiaoqing Wang and Junfeng Wang",
  journal =      "Security and Communication Networks",
  year =         "2015",
  publisher =    "Wiley Online Library",
  annote =       "The rapid development of mobile malwares makes the
                 traditional signature-based and single-feature based
                 malware detec-tion methods a challenging task. The
                 surge of new malwares with more complex structures and
                 dynamic characteristicsleads to efficient fusion of
                 multi-source malicious information more difficult in
                 detection. In this paper, we propose anew multi-source
                 based method to detect {Android} malwares by emphasizing
                 on the traditional static features, control flowgraph,
                 and repacking characteristics. Each category of
                 features is treated as an independent information
                 source in fea-ture extracting rules building and
                 classification. Then, the Dempster–Shafer algorithm
                 is used to fuse these informationsources. This method
                 can improve accuracy of malware detection without
                 adding too many instability characteristics thatare
                 extracted from disassembled codes, and have better
                 performance in the resistance to code obfuscation
                 technologies. Toverify our method, different categories
                 of apps are collected to build the dataset in our
                 experiment. Based on the dataset,our method can achieve
                 97\% detection accuracy and 1.9\% false positive rate.
                 Copyright © 2015 John Wiley Sons, Ltd.",
}

@Article{zhao2015,
  title =        "A privacy-preserving location tracking system for
                 smartphones based on cloud storage",
  author =       "Kao Zhao and Hai Jin and Deqing Zou and Weiqi Dai and
                 Yang Xiang",
  journal =      "Security and Communication Networks",
  volume =       "8",
  number =       "3",
  pages =        "446--458",
  year =         "2015",
  publisher =    "Wiley Online Library",
}

@Article{chauhan2015,
  title =        "Near Field Communication: An Emerging Contactless
                 Technology",
  author =       "Rinki R Chauhan and Chirag Gohel",
  journal =      "Wireless Communication",
  volume =       "7",
  number =       "1",
  pages =        "15--19",
  year =         "2015",
}

@Article{kim2015,
  title =        "A Simple Security Architecture for Mobile Office",
  author =       "Seungcheon Kim and Hoon Jin",
  journal =      "International Journal of Security and Its
                 Applications",
  volume =       "9",
  number =       "1",
  pages =        "139--146",
  year =         "2015",
  note =         {\url{http://www.sersc.org/journals/IJSIA/vol9_no1_2015/15.pdf}},
}

@Article{park2015,
  title =        "A Secure Storage System for Sensitive Data Protection
                 Based on Mobile Virtualization",
  author =       "Su-Wan Park and JaeDeok Lim and Jeong Nyeo Kim",
  journal =      "International Journal of Distributed Sensor Networks",
  volume =       "2015",
  year =         "2015",
  publisher =    "Hindawi Publishing Corporation",
  note =         "929380.pdf,
                 \url{http://www.hindawi.com/journals/ijdsn/2015/929380/},
}

@Article{he2015,
  title =        "Mobile application security: malware threats and
                 defenses",
  author =       "Daojing He and Sammy Chan and Mohsen Guizani",
  journal =      "Wireless Communications, IEEE",
  volume =       "22",
  number =       "1",
  pages =        "138--144",
  year =         "2015",
  publisher =    "IEEE",
}

@Article{bagheri2015,
  title =        {Automated Dynamic Enforcement of Synthesized Security
                 Policies in {Android}},
  author =       "Hamid Bagheri and Alireza Sadeghi and Reyhaneh
                 Jabbarvand and Sam Malek",
  note =         {\url{http://cs.gmu.edu/~tr-admin/papers/GMU-CS-TR-2015-5.pdf}},
  annote =       "Abstract As the dominant mobile computing platform,
                 {Android} has become a prime target for cyber-security
                 attacks. Many of these attacks are manifested at the
                 application level, and through the exploitation of
                 vulnerabilities in apps downloaded from the popular app
                 stores. Increasingly, sophisticated attacks exploit the
                 vulnerabilities in multiple installed apps, making it
                 extremely difficult to foresee such attacks, as neither
                 the app developers nor the store operators know a
                 priori which apps will be installed together. This
                 paper presents an approach that allows the end-users to
                 safeguard a given bundle of apps installed on their
                 device from such attacks. The approach, realized in a
                 tool, called DROIDGUARD, combines static code analysis
                 with lightweight formal methods to automatically infer
                 security-relevant properties from a bundle of apps. It
                 then uses a constraint solver to synthesize possible
                 security exploits, from which fine-grained security
                 policies are derived and automatically enforced to
                 protect a given device. In our experiments with over
                 4,000 {Android} apps, DROIDGUARD has proven to be highly
                 effective at detecting previously unknown
                 vulnerabilities as well as preventing their
                 exploitation.",
}

@Article{charliepaul2014,
  title =        {Efficient Integrity Protection for {Android}
                 Mobile},
  author =       "C Kumar Charliepaul and G Immanual Gnanadurai",
  note =         {\url{http://ijets.in/Downloads/Published/E0140104005.pdf}},
  journal =      "International Journal On Engineering Technology and
                 Sciences -- IJETS",
  volume =       "I",
  issue =        "IV",
  month =        aug,
  year =         "2014",
  annote =       "Dr.C.Kumar Charliepaul Principal A.S.L Pauls College
                 of Engg \& Tech, Coimbatore. G.Immanual Gnanadurai
                 Assistant professor / CSE Dhaya College of Engineering,
                 Madurai. charliepaul1970@gmail.com imman8601@gmail.com
                 Abstract: Currently lot of studies regarding PC viruses
                 and worms but very less effect has been done regarding
                 the same issues in the mobile atmosphere. But
                 high-speed growth of smart phone users it increasingly
                 become the target of propagating viruses through the
                 Bluetooth and Wi-Fi and reaches into the mobile
                 networks. In a mobile viruses and malwares can cause
                 privacy leakage, extra charges, and reduction of
                 battery power, remote listening and accessing private
                 short message and call history logs etc. Additionally
                 they can scrape wireless servers by sending lot of spam
                 messages or track user positions. In proposed system
                 used a two layer network model for spreading virus
                 through both Bluetooth and SMS/MMS. Our work addressed
                 the effect of human behaviors, i.e., Operational
                 behavior and Mobile behavior on virus propagation. In
                 addition observe two strategies for avoid mobile virus
                 propagation i.e., Pre immunization and Adaptive
                 Dissemination strategies represent on the methodology
                 of Autonomy-Oriented Computing. Here refer to these
                 malware or viruses as cell-phone worms which are
                 malicious codes that act vulnerability in cell-phone
                 software and spread in networks through current
                 services such as Bluetooth and Short / Multimedia
                 Messaging Service (SMS/MMS). A user can be
                 automatically exciting for various SPAM messages
                 generated by the worm and the phone battery will be
                 quickly tired. Many studies reported the damages of
                 mobile viruses. Keywords-Autonomy oriented
                 computing,Malwares,{Android} platform. ;; ... However,
                 Clark-Wilson has the requirement that programs undergo
                 formal semantic verification. ... [4]
                 Enck.W,Ongtang.M,andMcDaniel.P,“Understanding {Android}
                 Security,”IEEE Security and Privacy, vol. 7, no. 1,
                 pp. 50-57, Jan.[2009]. ...",
}

@InProceedings{you2015,
  title =        {Android Implicit Information Flow Demystified},
  author =       "Wei You and Bin Liang and Jingzhe Li and Wenchang Shi
                 and Xiangyu Zhang",
  booktitle =    "Proceedings of the 10th ACM Symposium on Information,
                 Computer and Communications Security",
  pages =        "585--590",
  year =         "2015",
  organization = "ACM",
  note =         {\url{http://iser.ruc.edu.cn/file/achievements/YouWei2015.pdf}},
  annote =       "Renmin University of China, Beijing, P. R. China
                 {youwei, liangb, lijingzhe, wenchang}@ruc.edu.cn
                 Xiangyu Zhang Purdue University, Indiana, USA
                 xyzhang@cs.purdue.edu ABSTRACT In this paper, a
                 comprehensive analysis of implicit information flow
                 (IIF) on the {Android} bytecode is presented to identify
                 all potential IIF forms, determine their
                 exploitability, and mitigate the potential threat. By
                 applying controltransfer-oriented semantic analysis of
                 the bytecode language, we identify five IIF forms, some
                 of which are not studied by existing IIF literature. We
                 develop proof-of-concepts (PoCs) for each IIF form to
                 demonstrate their exploitability. The experimental
                 results show that all these PoCs can effectively and
                 efficiently transmit sensitive data, as well as
                 successfully evade the detection of a state-of-the-art
                 privacy monitor TaintDroid. To mitigate the threat of
                 IIF, we propose a solution to defending against IIF
                 leveraging a special control dependence tracking
                 technique and implement a prototype system. The
                 evaluation shows that the prototype can effectively
                 detect information leak by all the identified IIF forms
                 and also real-world malware with an acceptable
                 overhead. In summary, our study gives in-depth insight
                 into {Android} IIF from both offensive and defensive
                 perspectives, and provides a foundation for further
                 research on {Android} IIF. Categories and Subject
                 Descriptors D.4.6 [Operating System]: Security and
                 Protection",
}

@Article{dawson2015understanding,
  title =        "Understanding the Methods behind Cyber Terrorism",
  author =       "Maurice E {Dawson Jr} and Marwan Omar and Jonathan
                 Abramson",
  year =         "2015",
  publisher =    "Information Science Reference",
}

@Article{londhe2015,
  title =        {Android Based Health Monitoring System},
  author =       "Mahesh Londhe and Sandip Vandre and Atul Narote and
                 Amol Nirmal and Sumit Khandelwal",
  journal = {International Journal of Advance Foundation and Research
                  in Computer (IJAFRC)},
  volume = 2,
  year = {2015},
  month = {1},
  annote = { (NCRTIT 2015), January 2015. ISSN www.ijafrc.org
                  Department of Computer Engineering, Pune University,
                  Pune 412105 maheshlondhe004@gmail.com,
                  sandipwandre31101993@gmail.com, atulntr23@gmail.com,
                  amolnrml@gmail.com, sumit3khandelwal@gmail.com},
}

@InProceedings{kyle2015,
  title =        "Application of Domain-aware Binary Fuzzing to Aid
                 {Android} Virtual Machine Testing",
  author =       "Stephen Kyle and Hugh Leather and Bj{\"o}rn Franke and
                 Dave Butcher and Stuart Monteith",
  booktitle =    "Proceedings of the 11th ACM SIGPLAN/SIGOPS
                 International Conference on Virtual Execution
                 Environments",
  pages =        "121--132",
  year =         "2015",
  organization = "ACM",
}

@Article{martinez2015privacy,
  title =        "Privacy and Security in Mobile Health Apps: {A} Review
                 and Recommendations",
  author =       "Borja Mart{\'\i}nez-P{\'e}rez and Isabel De La
                 Torre-D{\'\i}ez and Miguel L{\'o}pez-Coronado",
  journal =      "Journal of medical systems",
  volume =       "39",
  number =       "1",
  pages =        "1--8",
  year =         "2015",
  publisher =    "Springer",
}

@InProceedings{zheng2015enpublic,
  title =        "Enpublic Apps: Security Threats Using i{OS} Enterprise
                 and Developer Certificates",
  author =       "Min Zheng and Hui Xue and Yulong Zhang and Tao Wei and
                 John CS Lui",
  booktitle =    "Proceedings of the 10th ACM Symposium on Information,
                 Computer and Communications Security",
  pages =        "463--474",
  year =         "2015",
  organization = "ACM",
  annote =       "Enpublic Apps: Security Threats Using iOS Enterprise
                 and Developer Certificates Min Zheng † , Hui Xue § ,
                 Yulong Zhang § , Tao Wei § and John C.S. Lui† †
                 The Chinese University of Hong Kong, § FireEye Inc.
                 ABSTRACT Compared with {Android}, the conventional wisdom
                 is that iOS is more secure. However, both jailbroken
                 and nonjailbroken iOS devices have number of
                 vulnerabilities. For iOS, apps need to interact with
                 the underlying system using Application Programming
                 Interfaces (APIs). Some of these APIs remain
                 undocumented and Apple forbids apps in App Store from
                 using them. These APIs, also known as “private
                 APIs”, provide powerful features to developers and
                 yet they may have serious security consequences if
                 misused. Furthermore, apps which use private APIs can
                 bypass the App Store and use the “Apple’s
                 Enterprise/Developer Certificates” for distribution.
                 This poses a significant threat to the iOS ecosystem.
                 So far, there is no formal study to understand these
                 apps and how private APIs are being encapsulated. We
                 call these iOS apps which distribute to the public
                 using enterprise certificates as “enpublic” apps.
                 In this paper, we present the design and implementation
                 of iAnalytics, which can automatically analyze
                 “enpublic” apps’ private API usages and
                 vulnerabilities. Using iAnalytics, we crawled and
                 analyzed 1,408 enpublic iOS apps. We discovered that:
                 844 (60\%) out of the 1408 apps do use private APIs, 14
                 (1\%) apps contain URL scheme vulnerabilities, 901 (64\%)
                 enpublic apps transport sensitive information through
                 unencrypted channel or store the information in
                 plaintext on the phone. In addition, we summarized 25
                 private APIs which are crucial and security sensitive
                 on iOS 6/7/8, and we have filed one CVE (Common
                 Vulnerabilities and Exposures) for iOS devices.",
}

@Article{sicari2015security,
  title =        "Security, privacy and trust in Internet of Things: The
                 road ahead",
  author =       "S Sicari and A Rizzardi and LA Grieco and A
                 Coen-Porisini",
  journal =      "Computer Networks",
  volume =       "76",
  pages =        "146--164",
  year =         "2015",
  publisher =    "Elsevier",
  annote =       "Survey Paper Security, privacy and trust in Internet
                 of Things: The road ahead S. Sicari a,⇑ , A. Rizzardi
                 a , L.A. Grieco b , A. Coen-Porisini a aDISTA, Dep. of
                 Theoretical and Applied Science, University of
                 Insubria, v. Mazzini 5, 21100 Varese, Italy bDEI, Dep.
                 of Electrical and Information Engineering, Politecnico
                 di Bari, v. Orabona 4, 70125 Bari, Italy article info
                 Article history: Received 15 July 2014 Received in
                 revised form 30 October 2014 Accepted 5 November 2014
                 Available online 18 November 2014 Keywords: Internet of
                 Things Security Privacy Trust abstract Internet of
                 Things (IoT) is characterized by heterogeneous
                 technologies, which concur to the provisioning of
                 innovative services in various application domains. In
                 this scenario, the satisfaction of security and privacy
                 requirements plays a fundamental role. Such
                 requirements include data confidentiality and
                 authentication, access control within the IoT network,
                 privacy and trust among users and things, and the
                 enforcement of security and privacy policies.
                 Traditional security countermeasures cannot be directly
                 applied to IoT technologies due to the different
                 standards and communication stacks involved. Moreover,
                 the high number of interconnected devices arises
                 scalability issues; therefore a flexible infrastructure
                 is needed able to deal with security threats in such a
                 dynamic environment. In this survey we present the main
                 research challenges and the existing solutions in the
                 field of IoT security, identifying open issues, and
                 suggesting some hints for future research.",
}

@Article{yangstatic,
  title =        "Static Control-Flow Analysis of User-Driven Callbacks
                 in {Android} Applications",
  author =       "Shengqian Yang and Dacong Yan and Haowei Wu and Yan
                 Wang and Atanas Rountev",
  annote =       "http://dacongy.github.io/papers/yang-icse15.pdf Static
                 Control-Flow Analysis of User-Driven Callbacks in
                 {Android} Applications Shengqian Yang, Dacong Yan, Haowei
                 Wu, Yan Wang, and Atanas Rountev Ohio State University
                 Email:
                 {yangs,yan,wuhaow,wang10,rountev}@cse.ohio-state.edu
                 Abstract—{Android} software presents many challenges
                 for static program analysis. In this work we focus on
                 the fundamental problem of static control-flow
                 analysis. Traditional analyses cannot be directly
                 applied to {Android} because the applications are
                 framework-based and event-driven. We consider
                 user-eventdriven components and the related sequences
                 of callbacks from the {Android} framework to the
                 application code, both for lifecycle callbacks and for
                 event handler callbacks. We propose a program
                 representation that captures such callback sequences.
                 This representation is built using contextsensitive
                 static analysis of callback methods. The analysis
                 performs graph reachability by traversing
                 context-compatible interprocedural control-flow paths
                 and identifying statements that may trigger callbacks,
                 as well as paths that avoid such statements. We also
                 develop a client analysis that builds a static model of
                 the application’s GUI. Experimental evaluation shows
                 that this context-sensitive approach leads to
                 substantial precision improvements, while having
                 practical cost.",
}

@Article{leeinformation,
  title =        "Information Security and Cryptology--{ICISC} 2014",
  author =       "Jooyoung Lee and Jongsung Kim",
  publisher =    "Springer",
}

@Article{narotesmart,
  title =        {Smart Home Automation using {ARM11}},
  author =       "Amit Narote and Abhishek Dsilva and Selma Misquitta
                 and Palak Khandelwal",
  annote =       "http://inpressco.com/wp-content/uploads/2015/02/Paper86472-476.pdf
                 International Journal of Current Engineering and
                 Technology E-ISSN 2277 – 4106, P-ISSN 2347 – 5161
                 ©2015INPRESSCO®, All Rights Reserved Available at
                 http://inpressco.com/category/ijcet Project Research
                 Article 472| International Journal of Current
                 Engineering and Technology, Vol.5, No.1 (Feb 2015)
                 Smart Home Automation using ARM11 Amit Narote† ,
                 Abhishek Dsilva†* , Selma Misquitta† and Palak
                 Khandelwal† † Information Technology Department,
                 Xavier Institute of Engineering, Mahim (W), Mumbai,
                 India Accepted 24 Feb 2015, Available online 27 Feb
                 2015, Vol.5, No.1 (Feb 2015) Abstract The Smart Home
                 Automation System is a mobile web based application
                 that allows users to monitor and control home/office
                 using their mobile device. This system is established
                 for all the home/office users after gaining access form
                 administrator. This system includes the remote control
                 and monitoring of home appliances and security through
                 a live video feed, providing security and energy
                 management. Once all appliances of Home or office are
                 automated and connected, it becomes important to
                 consider issues of security, authentication and access
                 control. Through this literature review, scope of
                 project and user requirements can be retrieved whether
                 how big the project is. The use of methodology helps to
                 produce a better quality product, in terms of
                 documentation standards, acceptability to the user,
                 maintainability and consistency of software. Waterfall
                 model has been chosen as a methodology for this project
                 and will be implemented along the system development
                 process to ensure the objectives of the project can be
                 fulfilled. With the latest and powerful technology, the
                 system is not only expected to be workable, but also
                 highly efficient in terms of execution speed and
                 response time. The Intelligent Home automation System
                 will contribute effort to users. Keywords: Smart Home
                 Automation System, Mobile web based application,
                 Waterfall model, Monitoring of home appliances,
                 Security through live feed.",
}

@InCollection{starov2015testing,
  title =        "Testing-as-a-Service for Mobile Applications:
                 State-of-the-Art Survey",
  author =       "Oleksii Starov and Sergiy Vilkomir and Anatoliy
                 Gorbenko and Vyacheslav Kharchenko",
  booktitle =    "Dependability Problems of Complex Information
                 Systems",
  pages =        "55--71",
  year =         "2015",
  publisher =    "Springer",
  annote =       "... deal with small apps and do not adhere to a formal
                 development process [5 ... To guarantee these mobile
                 applications' reliability and security, sufficient
                 testing is required on a ... {Android} development is the
                 most representative example of how different
                 applications should function ...",
}

@Article{ferry2015security,
  title =        "Security evaluation of the {OA}uth 2.0 framework",
  author =       "Eugene Ferry and John O Raw and Kevin Curran",
  journal =      "Information \& Computer Security",
  volume =       "23",
  number =       "1",
  pages =        "73--101",
  year =         "2015",
  publisher =    "Emerald Group Publishing Limited",
  annote =       "... A formal analysis model for OAuth 2.0 was devised
                 by Google Chrome (2013) utilising the automated
                 security protocol evaluation tool ProVerif. Several
                 vulnerabilities with popular vendors, such as Yahoo and
                 WordPress, were identified. ...",
}

@Article{peralta2015,
  title =        "Reasoning about security in sensor networks",
  author =       "Manuel Peralta and Supratik Mukhopadhyay and Ramesh
                 Bharadwaj",
  journal =      "Concurrency and Computation: Practice and Experience",
  year =         "2015",
  publisher =    "Wiley Online Library",
}

@InProceedings{chin2011,
  title =        {Analyzing inter-application communication in {Android}},
  author =       "Erika Chin and Adrienne Porter Felt and Kate Greenwood
                 and David Wagner",
  booktitle =    "Proceedings of the 9th international conference on
                 Mobile systems, applications, and services",
  pages =        "239--252",
  year =         "2011",
  organization = "ACM",
  note =         {\url{https://www.eecs.berkeley.edu/~daw/papers/intents-mobisys11.pdf}},
}

@InProceedings{octeau2015,
  title =        "Composite Constant Propagation: Application to {Android}
                 Inter-Component Communication Analysis",
  author =       "Damien Octeau and Daniel Luchaup and Matthew Dering
                 and Somesh Jha and Patrick McDaniel",
  booktitle =    "Proceedings of the 37th International Conference on
                 Software Engineering (ICSE)",
  year =         "2015",
  note =         {\url{http://siis.cse.psu.edu/pubs/octeau-icse15.pdf}},
  annote =       "Damien Octeau1,2, Daniel Luchaup1,3, Matthew Dering2 ,
                 Somesh Jha1 , and Patrick McDaniel2 1Department of
                 Computer Sciences, University of Wisconsin 2Department
                 of Computer Science and Engineering, Pennsylvania State
                 University 3CyLab, Carnegie Mellon University
                 octeau@cs.wisc.edu, luchaup@andrew.cmu.edu,
                 dering@cse.psu.edu, jha@cs.wisc.edu,
                 mcdaniel@cse.psu.edu Abstract—Many program analyses
                 require statically inferring the possible values of
                 composite types. However, current approaches either do
                 not account for correlations between object fields or
                 do so in an ad hoc manner. In this paper, we introduce
                 the problem of composite constant propagation. We
                 develop the first generic solver that infers all
                 possible values of complex objects in an
                 interprocedural, flow and context-sensitive manner,
                 taking field correlations into account. Composite
                 constant propagation problems are specified using COAL,
                 a declarative language. We apply our COAL solver to the
                 problem of inferring {Android} Inter-Component
                 Communication (ICC) values, which is required to
                 understand how the components of {Android} applications
                 interact. Using COAL, we model ICC objects in {Android}
                 more thoroughly than the state-of-the-art. We compute
                 ICC values for 460 applications from the Play store.
                 The ICC values we infer are substantially more precise
                 than previous work. The analysis is efficient, taking
                 slightly over two minutes per application on average.
                 While this work can be used as the basis for many
                 whole-program analyses of {Android} applications, the
                 COAL solver can also be used to infer the values of
                 composite objects in many other contexts.",
}

@InProceedings{Hay2015,
  author =       "Roee Hay and Omer Tripp and Marco Pistoia",
  title =        "Dynamic Detection of Inter-application Communication
                 Vulnerabilities in {Android},
  OPTcrossref =  "",
  OPTkey =       "",
  booktitle =    "International Symposium on Software Testing and
                 Analysis",
  year =         "2015",
  OPTeditor =    "",
  OPTvolume =    "",
  OPTnumber =    "",
  OPTseries =    "",
  OPTpages =     "",
  OPTmonth =     "",
  OPTaddress =   "",
  OPTorganization = "",
  OPTpublisher = "",
  OPTnote =      "",
  OPTannote =    "",
}

@InProceedings{li2015,
  title =        {IccTA}: Detecting Inter-Component Privacy Leaks in
                 {Android} Apps",
  author =       "Li Li and Alexandre Bartel and Tegawend{\'e}
                 Fran{\c{c}}ois D Assise Bissyande and Jacques Klein and
                 Yves Le Traon and Steven Arzt and Siegfried Rasthofer
                 and Eric Bodden and Damien Octeau and Patrick
                 McDaniel",
  booktitle =    "IEEE/ACM 37th IEEE International Conference on
                 Software Engineering (ICSE)",
  year =         "2015",
  note =         {\url{http://orbilu.uni.lu/bitstream/10993/20058/1/li-iccta-preprint.pdf}},
}

@Article{huang2015,
  title =        {Scalable and Precise Taint Analysis for {Android}},
  author =       "Wei Huang and Yao Dong Ana Milanova and Julian Dolby",
  year =         "2015",
  journal =      "International Symposium on Software Testing and
                 Analysis",
  note =         {\url{http://www.cs.rpi.edu/~milanova/docs/issta15.pdf}},
  annote =       "Wei Huang Google, USA huangwe@google.com Yao Dong Ana
                 Milanova RPI, USA {dongy6,milana2}@rpi.edu Julian Dolby
                 IBM Research, USA dolby@us.ibm.com ABSTRACT We propose
                 a type-based taint analysis for {Android}. Concretely, we
                 present DFlow, a context-sensitive information flow
                 type system, and DroidInfer, the corresponding type
                 inference analysis for detecting privacy leaks in
                 {Android} apps. We present novel techniques for error
                 reporting based on CFL-reachability, as well as novel
                 techniques for handling of {Android}-specific features,
                 including libraries, multiple entry points and
                 callbacks, and inter-component communication. Empirical
                 results show that our approach is scalable and precise.
                 DroidInfer scales well in terms of time and memory and
                 has false-positive rate of 15.7\%. It detects privacy
                 leaks in apps from the Google Play Store and in known
                 malware. Categories and Subject Descriptors F.3.2
                 [Semantics of Programming Languages]: Program analysis;
                 D.4.6 [Security and Protection]: Information flow
                 controls",
}

@Article{schneier2015surreptitiously,
  title =        "Surreptitiously Weakening Cryptographic Systems",
  author =       "Bruce Schneier and Matthew Fredrikson and Tadayoshi
                 Kohno and Thomas Ristenpart",
  year =         "2015",
  note =         {\url{
                 https://www.cyberwar.nl/d/20150209_Surreptitiously-Weakening-Cryptographic-Systems_Schneier-Fredrikson-Kohno-Ristenpart.pdf}},
}

@Article{mohrjodroid,
  title =        "JoDroid: Adding {Android} Support to a Static
                 Information Flow Control Tool",
  author =       "Martin Mohr and J{\"u}rgen Graf and Martin Hecker",
  annote =       "http://ceur-ws.org/Vol-1337/paper25.pdf Martin Mohr,
                 Jurgen Graf, Martin Hecker ¨ Karlsruhe Institute of
                 Technology Abstract We present our ongoing work on the
                 extension of our PDG-based information flow control
                 tool Joana to handle {Android} applications. We elaborate
                 on the challenges posed by {Android} applications,
                 outline what we have already done and discuss what we
                 intend to do in the future",
}

@InProceedings{campbell2015experience,
  title =        "An Experience Report: Using Mobile Development To
                 Teach Software Design",
  author =       "Jennifer Campbell and Anya Tafliovich",
  booktitle =    "Proceedings of the 46th ACM Technical Symposium on
                 Computer Science Education",
  pages =        "506--511",
  year =         "2015",
  organization = "ACM",
  annote =       "... In future, the instructors will plan a formal
                 training session on {Android} and will aim to identify
                 TAs who are more expert in this area to become the
                 go-to for this type of consultation. ... Learning
                 mobile security with {Android} security labware. ...",
}

@InProceedings{shaikh2015,
  title =        "An extended approach for securing the Short Messaging
                 Services of {GSM} using multi-threading elliptical
                 curve cryptography",
  author =       "Ansar Ahemad Shaikh and Nilesh S Vani",
  booktitle =    "Communication, Information \& Computing Technology
                 (ICCICT), 2015 International Conference on",
  pages =        "1--5",
  year =         "2015",
  organization = "IEEE",
  annote =       "... Abstract Currently, mobile phones are not only
                 used for formal communication but also for sending and
                 receiving sensitive information. ... Finally, an
                 {Android} application as shown in figure 3 is developed
                 to provide end to end security to the SMS messages.
                 ...",
}

@article{bagheri2015covert,
  title = {{COVERT}: Compositional Analysis of {Android} Inter-App
                 Vulnerabilities},
  author={Bagheri, Hamid and Sadeghi, Alireza and Garcia, Joshua and Malek, Sam},
  journal={IEEE Transactions on Software Engineering},
  volume={41},
  number={9},
  pages={866--886},
  year={2015},
  publisher={IEEE}
  note =         {\url{http://cs.gmu.edu/~tr-admin/papers/GMU-CS-TR-2015-1.pdf}},
  annote =       "Abstract: {Android} is the most popular platform for
                 mobile devices. It facilitates sharing of data and
                 services among applications using a rich inter-app
                 communication system. While access to resources can be
                 controlled by the {Android} permission system, enforcing
                 permissions is not sufficient to prevent security
                 violations, as permissions may be mismanaged,
                 intentionally or unintentionally. {Android}’s
                 enforcement of the permissions is at the level of
                 individual apps, allowing multiple malicious apps to
                 collude and combine their permissions or to trick
                 vulnerable apps to perform actions on their behalf that
                 are beyond their individual privileges. In this paper,
                 we present COVERT, a tool for compositional analysis of
                 {Android} inter-app vulnerabilities. COVERT’s analysis
                 is modular to enable incremental analysis of
                 applications as they are installed, updated, and
                 removed. It statically analyzes the reverse engineered
                 source code of each individual app, and extracts
                 relevant security specifications in a format suitable
                 for formal verification. Given a collection of
                 specifications extracted in this way, a formal analysis
                 engine (e.g., model checker) is then used to verify
                 whether it is safe for a combination of
                 applications—holding certain permissions and
                 potentially interacting with each other—to be
                 installed together. Our experience with using COVERT to
                 examine over 200 real-world apps corroborates its
                 ability to find inter-app vulnerabilities in bundles of
                 some of the most popular apps on the market.",
}

@Article{bella2013,
  title =        "Special issue on the Security Track at the {ACM}
                 Symposium on Applied Computing 2013",
  author =       "Giampaolo Bella and Helge Janicke",
  journal =      "International Journal of Information Security",
  pages =        "1--2",
  year =         "2013",
  publisher =    "Springer",
}

@Article{rasthofer2015,
  title =        "An Investigation of the {Android}/BadAccents Malware
                 which Exploits a new {Android} Tapjacking Attack",
  author =       "Siegfried Rasthofer and Irfan Asrar and Stephan Huber
                 and Eric Bodden",
  year =         "2015",
  note =         {\url{https://www.informatik.tu-darmstadt.de/fileadmin/user_upload/Group_EC-Spride/Publikationen/BadAccents_TR.pdf}},
  annote =       "Abstract. We report on a new threat campaign, underway
                 in Korea, which infected around 20,000 {Android} users
                 within two months. The campaign attacked mobile users
                 with malicious applications spread via di↵erent
                 channels, such as email attachments or SMS spam. A
                 detailed investigation of the {Android} malware resulted
                 in the identification of a new {Android} malware family
                 {Android}/BadAccents. The family represents current
                 state-of-the-art in mobile malware development for
                 banking trojans. In this paper, we describe in detail
                 the techniques this malware family uses and confront
                 them with current state-of-the-art static and dynamic
                 code-analysis techniques for {Android} applications. We
                 highlight various challenges for automatic malware
                 analysis frameworks that significantly hinder the fully
                 automatic detection of malicious components in the
                 malware. Furthermore, the malware exploits a previously
                 unknown tapjacking vulnerability in the {Android}
                 operating system, which we describe in detail. As a
                 result of this work, the vulnerability, a↵ecting all
                 {Android} versions, has been patched in the {Android} Open
                 Source Project. Keywords: Botnet, Threat Campaign,
                 {Android} Malware, Code Analysis, Banking Trojans,
                 Vulnerability",
}

@Article{shabtai2015,
  title =        "Evaluation of Security Solutions for {Android} Systems",
  author =       "Asaf Shabtai and Dudu Mimran and Yuval Elovici",
  journal =      "arXiv preprint arXiv:1502.04870",
  year =         "2015",
  note =         {\url{http://arxiv.org/pdf/1502.04870.pdf}},
  annote =       "ABSTRACT With the increasing usage of smartphones a
                 plethora of security solutions are being designed and
                 developed. Many of the security solutions fail to cope
                 with advanced attacks and are not aways properly
                 designed for smartphone platforms. Therefore, there is
                 a need for a methodology to evaluate their
                 effectiveness. Since the {Android} operating system has
                 the highest market share today, we decided to focus on
                 it in this study in which we review some of the
                 state-of-the-art security solutions for {Android}-based
                 smartphones. In addition, we present a set of
                 evaluation criteria aiming at evaluating security
                 mechanisms that are specifically designed for
                 {Android}-based smartphones. We believe that the proposed
                 framework will help security solution designers develop
                 more effective solutions and assist security experts
                 evaluate the effectiveness of security solutions for
                 {Android}-based smartphones.",
}

@Article{wu2015paddyfrog,
  title =        "PaddyFrog: systematically detecting confused deputy
                 vulnerability in {Android} applications",
  author =       "Jianliang Wu and Tingting Cui and Tao Ban and Shanqing
                 Guo and Lizhen Cui",
  journal =      "Security and Communication Networks",
  year =         "2015",
  publisher =    "Wiley Online Library",
}

@InProceedings{pak2015,
  title =        "Detecting and tracing leaked private phone number data
                 in {Android} smartphones",
  author =       "Wooguil Pak and Youngrok Cha and Sunki Yeo",
  booktitle =    "Information Networking (ICOIN), 2015 International
                 Conference on",
  pages =        "503--508",
  year =         "2015",
  organization = "IEEE",
  note =         {\url{http://secnwnet.kmu.ac.kr/paper/secnwnet/edas.paper-1570044183.pdf}},
}

@Misc{demetriou2015,
  title =        "What’s in Your Dongle and Bank Account? Mandatory
                 and Discretionary Protection of {Android} External
                 Resources",
  author =       "Soteris Demetriou and Xiaoyong Zhou and Muhammad
                 Naveed and Yeonjoon Lee and Kan Yuan and X Wang and
                 Carl A Gunter",
  year =         "2015",
  publisher =    "unpublished",
}

@Manual{AOSPsecurity,
  title =        {Android Open Source Project: Security Overview},
  OPTkey =       "",
  author =       "Google.com",
  OPTorganization = "",
  OPTaddress =   "",
  OPTedition =   "",
  OPTmonth =     "",
  year =         "201x",
  note =         {\url{http://source.{Android}.com/tech/security/index.html},
  OPTannote =    "",
}

@Manual{LollipopSrc,
  title =        {AOSP Lollipop Source Code Git Repository},
  OPTkey =       "",
  author =       "Google.com",
  organization = "Google.com",
  address =      "CA, USA",
  edition =      "5.0.1",
  month =        apr,
  year =         "2015",
  note =         {\url{https://{Android}.googlesource.com/},
  OPTannote =    "",
}

@Article{Lina2013,
  author =       "Ying-Dar Lina and Cheng-Yuan Hob and Yuan-Cheng Laic
                 and Tzu-Hsiung Dua and Shun-Lee Changa",
  title =        "Booting, browsing and streaming time profiling, and
                 bottleneck analysis on {Android}-based systems",
  journal =      "Journal of Network and Computer Applications",
  year =         "2013",
  OPTkey =       "",
  volume =       "36",
  number =       "4",
  pages =        "1208--1218",
  OPTmonth =     "July",
  OPTnote =      "",
  annote =       "Abstract {Android}-based systems perform slowly in three
                 scenarios: booting, browsing, and streaming. Time
                 profiling on {Android} devices involves three unique
                 constraints: (1) the execution flow of a scenario
                 invokes multiple software layers, (2) these software
                 layers are implemented in different programming
                 languages, and (3) log space is limited. To compensate
                 for the first and second constraints, we assumed a
                 staged approach using different profiling tools applied
                 to different layers and programming languages. As for
                 the last constraint and to avoid generating enormous
                 quantities of irrelevant log data, we began profiling
                 scenarios from an individual module, and then
                 iteratively profiled an increased number of modules and
                 layers, and finally consolidated the logs from
                 different layers to identify bottlenecks. Because of
                 this iteration, we called this approach a staged
                 iterative instrumentation approach. To analyze the time
                 required to boot the devices, we conducted experiments
                 using off-the-shelf {Android} products. We determined
                 that 72\% of the booting time was spent initializing
                 the user-space environment, with 44.4\% and 39.2\%
                 required to start {Android} services and managers, and
                 preload Java classes and resources, respectively.
                 Results from analyzing browsing performance indicate
                 that networking is the most significant factor,
                 accounting for at least 90\% of the delay in browsing.
                 With regard to online streaming, networking and
                 decoding technologies are two most important factors
                 occupying 77\% of the time required to prepare a 22 MB
                 video file over a Wi-Fi connection. Furthermore, the
                 overhead of this approach is low. For example, the
                 overhead of CPU loading is about 5\% in the browsing
                 scenario. We believe that this proposed approach to
                 time profiling represents a major step in the
                 optimization and future development of {Android}-based
                 devices.",
}

@Article{Kaart2014,
  author =       "M. Kaart and S. Laraghy",
  title =        {Android} forensics: Interpretation of timestamps",
  journal =      "Digital Investigation",
  year =         "2014",
  OPTkey =       "",
  volume =       "11",
  OPTnumber =    "",
  pages =        "234--248",
  OPTmonth =     "",
  OPTnote =      "Special Issue: Embedded Forensics",
  annote =       "Abstract Interpretation of traces found on {Android}
                 devices is an important aspect of mobile forensics.
                 This is especially true for timestamps encountered on
                 the device under investigation. In the presence of both
                 naive and UTC timestamps, some form of timestamp
                 normalisation is required. In addition, the
                 investigator needs to gain some understanding of
                 potential clock skew that may exist, especially when
                 evidence from the device under investigation has to be
                 correlated to real world events or evidence from other
                 devices. A case study is presented where the time zone
                 on the {Android} device was set incorrectly, while the
                 clock was set to correspond to the time zone where the
                 device was actually located. Initially, the fact that
                 both time zones enforced daylight saving time (DST) at
                 different periods was expected to complicate the
                 timestamps normalisation. However, it was found that
                 the version of the Time Zone Database on the device was
                 outdated and did not correspond to the actual time zone
                 rules for the given period. After the case study, the
                 results of experiments on a broader range of devices
                 are presented. Among other things, these results
                 demonstrate a method to detect clock skew based on the
                 mmssms.db database. However, it was also found that the
                 applicability of this method is highly dependent on
                 specific implementation choices made by different
                 vendors.",
}

@Article{Maiorca2015,
  author =       "Davide Maiorca and Davide Ariu and Igino Corona and
                 Marco Aresu and Giorgio Giacinto",
  title =        "Stealth attacks: An extended insight into the
                 obfuscation effects on {Android} malware",
  journal =      "Computers \& Security",
  year =         "2015",
  OPTkey =       "",
  volume =    "51",
  OPTnumber =    "",
  pages =     "16–31",
  OPTmonth =     "",
  OPTnote =      "",
  annote =       "Abstract In order to effectively evade anti-malware
                 solutions, {Android} malware authors are progressively
                 resorting to automatic obfuscation strategies. Recent
                 works have shown, on small-scale experiments, the
                 possibility of evading anti-malware engines by applying
                 simple obfuscation transformations on previously
                 detected malware samples. In this paper, we provide a
                 large-scale experiment in which the detection
                 performances of a high number of anti-malware solutions
                 are tested against two different sets of malware
                 samples that have been obfuscated according to
                 different strategies. Moreover, we show that
                 anti-malware engines search for possible malicious
                 content inside assets and entry-point classes. We also
                 provide a temporal analysis of the detection
                 performances of anti-malware engines to verify if their
                 resilience has improved since 2013. Finally, we show
                 how, by manipulating the area of the {Android} executable
                 that contains the strings used by the application, it
                 is possible to deceive anti-malware engines so that
                 they will identify legitimate samples as malware. On
                 one hand, the attained results show that anti-malware
                 systems have improved their resilience against trivial
                 obfuscation techniques. On the other hand, more complex
                 changes to the application executable have proved to be
                 still effective against detection. Thus, we claim that
                 a deeper static (or dynamic) analysis of the
                 application is needed to improve the robustness of such
                 systems.",
}

@Article{Salva12014,
  author =       "Sébastien Salva1 and Stassia R. Zafimiharisoa",
  title =        "Detection of Intent-Based Vulnerabilities in {Android}
                 Applications",
  journal =      "Emerging Trends in ICT Security",
  year =         "2014",
  OPTkey =       "",
  OPTvolume =    "",
  OPTnumber =    "",
  pages =        "397--417",
  OPTmonth =     "",
  OPTnote =      "",
  annote =       "The intent mechanism of the {Android} platform is a
                 powerful message-passing system that allows for sharing
                 data among components and applications. Nevertheless,
                 it might also be used as an entry point for security
                 attacks if incautiously employed. Attacks can be easily
                 sent through intents to components, which can
                 indirectly forward them to other components, and so on.
                 In this context, this chapter proposes a model-based
                 security testing approach to attempt to detect data
                 vulnerabilities in {Android} applications. In other
                 words, this approach generates test cases to check
                 whether components are vulnerable to attacks, sent
                 through intents that expose personal data. Our method
                 takes {Android} applications and intent-based
                 vulnerabilities formally expressed with models called
                 vulnerability patterns. Then, and this is the
                 originality of our approach, partial specifications are
                 automatically generated from {Android} applications with
                 algorithms reflecting the {Android} documentation. These
                 specifications avoid false positives and refine test
                 verdicts. A tool called APSET is presented and
                 evaluated with tests on some {Android} applications.",
}

@Article{lee2015,
  title =        "Screening smartphone applications using malware family
                 signatures",
  author =       "Jehyun Lee and Suyeon Lee and Heejo Lee",
  journal =      "Computers \& Security",
  year =         "2015",
  publisher =    "Elsevier",
}

@Article{Dong2013,
  author =       "Christopher Dong and Xing Liu",
  title =        "Development of {Android} Application for Language
                 Studies ☆",
  journal =      "IERI Procedia",
  year =         "",
  OPTkey =       "",
  OPTvolume =    "",
  OPTnumber =    "",
  OPTpages =     "Volume 4, 2013, Pages 8–16",
  OPTmonth =     "",
  OPTnote =      "2013 International Conference on Electronic
                 Engineering and Computer Science (EECS 2013)",
  annote =       "Abstract Mobile devices are becoming very popular
                 nowadays. Language textbooks with learning aids on
                 mobile devices can greatly help students with their
                 studies. The authors have been developing learning aids
                 on mobile devices that can be used in language courses.
                 This paper introduces an {Android} application that can
                 help students to memorize vocabulary. The vocabulary is
                 based on a published textbook. Students who are using
                 the textbook in their courses can review the vocabulary
                 of the textbook using the virtual flashcards and
                 multiple choice quizzes provided by the application
                 which runs on an {Android} device.",
}

@Article{Guido2013,
  author =       "Mark Guido and Jared Ondricek and Justin Grover and
                 David Wilburn and Thanh Nguyen and Andrew Hunt",
  title =        "Automated identification of installed malicious
                 {Android} applications",
  journal =      "Digital Investigation",
  year =         "2013",
  OPTkey =       "",
  volume =       "Volume 10, Supplement",
  OPTnumber =    "",
  pages =        "S96--S104",
  OPTmonth =     "",
  OPTnote =      "The Proceedings of the Thirteenth Annual Digital
                 Forensics Research DFRWS Conference",
  OPTannote =    "Abstract Increasingly, {Android} smartphones are
                 becoming more pervasive within the government and
                 industry, despite the limited ways to detect malicious
                 applications installed to these phones' operating
                 systems. Although enterprise security mechanisms are
                 being developed for use on {Android} devices, these
                 methods cannot detect previously unknown malicious
                 applications. As more sensitive enterprise information
                 becomes available and accessible on these smartphones,
                 the risk of data loss inherently increases. A malicious
                 application's actions could potentially leave sensitive
                 data exposed with little recourse. Without an effective
                 corporate monitoring solution in place for these mobile
                 devices, organizations will continue to lack the
                 ability to determine when a compromise has occurred.
                 This paper presents research that applies traditional
                 digital forensic techniques to remotely monitor and
                 audit {Android} smartphones. The smartphone sends changed
                 file system data to a remote server, allowing for
                 expensive forensic processing and the offline
                 application of traditional tools and techniques rarely
                 applied to the mobile environment. The research aims at
                 ascertaining new ways of identifying malicious {Android}
                 applications and ultimately attempts to improve the
                 state of enterprise smartphone monitoring. An on-phone
                 client, server, database, and analysis framework was
                 developed and tested using real mobile malware. The
                 results are promising that the developed detection
                 techniques identify changes to important system
                 partitions; recognize file system changes, including
                 file deletions; and find persistence and triggering
                 mechanisms in newly installed applications. It is
                 believed that these detection techniques should be
                 performed by enterprises to identify malicious
                 applications affecting their phone infrastructure.",
}

@Article{Armandoa2013,
  author =       "Alessandro Armandoa and Alessio Merloa and Mauro
                 Migliardid and Luca Verderamea",
  title =        "Breaking and fixing the {Android} Launching Flow",
  journal =      "Computers \& Security",
  year =         "2013",
  OPTkey =       "",
  volume =       "Volume 39, Part A",
  OPTnumber =    "",
  pages =        "104--115",
  OPTmonth =     "November",
  OPTnote =      "27th IFIP International Information Security
                 Conference",
  annote =       "Abstract The security model of the {Android} OS is based
                 on the effective combination of a number of well-known
                 security mechanisms (e.g. statically defined
                 permissions for applications, the isolation offered by
                 the Dalvik Virtual Machine, and the well-known Linux
                 discretionary access control model). Although each
                 security mechanism has been extensively tested and
                 proved to be effective in isolation, their combination
                 may suffer from unexpected security flaws. We show that
                 this is actually the case by presenting a severe
                 vulnerability in {Android} related to the application
                 launching flow. This vulnerability is based on a
                 security flaw affecting a kernel-level socket (namely,
                 the Zygote socket). We also present an exploit of the
                 vulnerability that allows a malicious application to
                 mount a severe Denial-of-Service attack that makes the
                 {Android} devices become totally unresponsive. Besides
                 explaining the vulnerability (which affects all
                 versions of {Android} up to version 4.0.3) we propose two
                 fixes. One of the two fixes has been adopted in the
                 official release of {Android}, starting with version 4.1.
                 We empirically assess the impact of the vulnerability
                 as well as the efficacy of the countermeasures on the
                 end user. We conclude by extending our security
                 analysis to the whole set of sockets, showing that
                 other sockets do not suffer from the same vulnerability
                 as the Zygote one.",
}

@Article{Grovera2013,
  author =       "Justin Grovera",
  title =        "{Android} forensics: Automated data collection and
                 reporting from a mobile device",
  journal =      "Digital Investigation",
  year =         "2013",
  OPTkey =       "",
  OPTvolume =    "Volume 10, Supplement",
  OPTnumber =    "",
  pages =        "S12--S20",
  OPTmonth =     "",
  note =         "The Proceedings of the Thirteenth Annual Digital
                 Forensics Research (DFRWS) Conference",
  annote =       "Abstract In this research, a prototype enterprise
                 monitoring system for {Android} smartphones was developed
                 to continuously collect many data sets of interest to
                 incident responders, security auditors, proactive
                 security monitors, and forensic investigators. Many of
                 the data sets covered were not found in other available
                 enterprise monitoring tools. The prototype system
                 neither requires root privileges nor the exploiting of
                 the {Android} architecture for proper operation, thereby
                 increasing interoperability among {Android} devices and
                 avoiding a spyware classification for the system. An
                 anti-forensics analysis on the system was performed to
                 identify and further strengthen areas vulnerable to
                 tampering. The contributions of this research include
                 the release of the first open-source {Android} enterprise
                 monitoring solution of its kind, a comprehensive guide
                 of data sets available for collection without elevated
                 privileges, and the introduction of a novel design
                 strategy implementing various {Android} application
                 components useful for monitoring on the {Android}
                 platform.",
}

@Article{wu2015,
  title =        "Detect repackaged {Android} application based on {HTTP}
                 traffic similarity",
  author =       "Xueping Wu and Dafang Zhang and Xin Su and WenWei Li",
  journal =      "Security and Communication Networks",
  year =         "2015",
  publisher =    "Wiley Online Library",
}

@Article{Lina2013,
  author =       "Ying-Dar Lina and Yuan-Cheng Laib and Chien-Hung Chena
                 and Hao-Chuan Tsaic",
  title =        "Identifying {Android} malicious repackaged applications
                 by thread-grained system call sequences",
  journal =      "Computers \& Security",
  year =         "2013",
  OPTkey =       "",
  volume =       "39",
  OPTnumber =    "",
  pages =        "Volume 39, Part B, November 2013, Pages 340–350",
  OPTmonth =     "",
  OPTnote =      "",
  annote =       "Abstract {Android} security has become highly desirable
                 since adversaries can easily repackage malicious codes
                 into various benign applications and spread these
                 malicious repackaged applications (MRAs). Most MRA
                 detection mechanisms on {Android} focus on detecting a
                 specific family of MRAs or requiring the original
                 benign application to compare with the malicious ones.
                 This work proposes a new mechanism, SCSdroid (System
                 Call Sequence Droid), which adopts the thread-grained
                 system call sequences activated by applications. The
                 concept is that even if MRAs can be camouflaged as
                 benign applications, their malicious behavior would
                 still appear in the system call sequences. SCSdroid
                 extracts the truly malicious common subsequences from
                 the system call sequences of MRAs belonging to the same
                 family. Therefore, these extracted common subsequences
                 can be used to identify any evaluated application
                 without requiring the original benign application.
                 Experimental results show that SCSdroid falsely
                 detected only two applications among 100 evaluated
                 benign applications, and falsely detected only one
                 application among 49 evaluated malicious applications.
                 As a result, SCSdroid achieved up to 95.97\% detection
                 accuracy, i.e., 143 correct detections among 149
                 applications.",
}

@Article{Payeta2012,
  author =       "Etienne Payeta and Fausto Spotob",
  title =        "Static analysis of {Android} programs",
  journal =      "Information and Software Technology",
  year =         "2012",
  OPTkey =       "",
  volume =       "54",
  number =       "11",
  pages =        "1192--1201",
  OPTmonth =     "",
  OPTnote =      "",
  annote =       "Abstract Context {Android} is a programming language
                 based on Java and an operating system for embedded and
                 mobile devices, whose upper layers are written in the
                 {Android} language itself. As a language, it features an
                 extended event-based library and dynamic inflation of
                 graphical views from declarative XML layout files. A
                 static analyzer for {Android} programs must consider such
                 features, for correctness and precision. Objective Our
                 goal is to extend the Julia static analyzer, based on
                 abstract interpretation, to perform formally correct
                 analyses of {Android} programs. This article is an
                 in-depth description of such an extension, of the
                 difficulties that we faced and of the results that we
                 obtained. Method We have extended the class analysis of
                 the Julia analyzer, which lies at the heart of many
                 other analyses, by considering some {Android} key
                 specific features such as the potential existence of
                 many entry points to a program and the inflation of
                 graphical views from XML through reflection. We also
                 have significantly improved the precision of the
                 nullness analysis on {Android} programs. Results We have
                 analyzed with Julia most of the {Android} sample
                 applications by Google and a few larger open-source
                 programs. We have applied tens of static analyses,
                 including classcast, dead code, nullness and
                 termination analysis. Julia has found, automatically,
                 bugs, flaws and inefficiencies both in the Google
                 samples and in the open-source applications. Conclusion
                 Julia is the first sound static analyzer for {Android}
                 programs, based on a formal basis such as abstract
                 interpretation. Our results show that it can analyze
                 real third-party {Android} applications, without any user
                 annotation of the code, yielding formally correct
                 results in at most 7 min and on standard hardware.
                 Hence it is ready for a first industrial use.",
}

@Article{Garousi2013,
  author =       "Vahid Garousi and Riley Kotchorek and Michael Smith",
  title =        "Test Cost-Effectiveness and Defect Density: {A} Case
                 Study on the {Android} Platform",
  journal =      "Advances in Computers",
  year =         "2013",
  OPTkey =       "",
  volume =       "89",
  OPTnumber =    "",
  pages =        "163--206",
  OPTmonth =     "",
  OPTnote =      "",
  annote =       "Abstract The {Android} operating system is one of the
                 most popular open-source platforms in the mobile
                 operating system market. It had a worldwide smart-phone
                 market share of 68\% at the second quarter of 2012.
                 However, there has been little research on test
                 coverage and test cost-effectiveness in this platform.
                 The goal of this case study reported in this paper is
                 to assess test coverage, fault detection effectiveness,
                 test cost-effectiveness, and defect density in
                 code-base of version 2.1 of the {Android} platform. We
                 raise and address five research questions (RQs) in this
                 study. Among our results are: (1) in contrary to what
                 one would expect, for packages with larger coverage
                 values (meaning more rigorous testing), it is not
                 necessarily true that less defects have been reported
                 by the users after release. Also, it is not necessarily
                 true that components with low coverage have more
                 defects; (2) we re-confirm (replicate) the existence of
                 correlation between code coverage and mutation score,
                 similar to existing studies; and (3) the package with
                 the highest defect density (DD) in the {Android}
                 code-base is Music (DD = 0.19 per 1 KLOC) and the
                 package with the lowest DD value is ContactsProvider
                 (DD = 0.0003). Results of our study will help us and
                 other researchers to get a better view on test
                 coverage, fault detection effectiveness, test
                 cost-effectiveness, and defect density in {Android}
                 code-base.",
}


@Article{Ntantogian2014,
  author =       "Christoforos Ntantogian and Dimitris Apostolopoulos
                 and Giannis Marinakis and Christos Xenakis",
  title =        "Evaluating the privacy of {Android} mobile applications
                 under forensic analysis",
  journal =      "Computers \& Security",
  year =         "2014",
  OPTkey =       "",
  OPTvolume =    "42",
  OPTnumber =    "",
  OPTpages =     "66--76",
  OPTmonth =     "",
  OPTnote =      "",
  annote =       "Abstract In this paper, we investigate and evaluate
                 through experimental analysis the possibility of
                 recovering authentication credentials of mobile
                 applications from the volatile memory of {Android} mobile
                 devices. Throughout the carried experiments and
                 analysis, we have, exclusively, used open-source and
                 free forensic tools. Overall, the contribution of this
                 paper is threefold. First, it thoroughly, examines
                 thirteen (13) mobile applications, which represent four
                 common application categories that elaborate sensitive
                 users' data, whether it is possible to recover
                 authentication credentials from the physical memory of
                 mobile devices, following thirty (30) different
                 scenarios. Second, it explores in the considered
                 applications, if we can discover patterns and
                 expressions that indicate the exact position of
                 authentication credentials in a memory dump. Third, it
                 reveals a set of critical observations regarding the
                 privacy of {Android} mobile applications and devices.",
}

@Article{Fanga2014,
  author =       "Zheran Fanga and Weili Hana and Yingjiu Lib",
  title =        "Permission based {Android} security: Issues and
                 countermeasures",
  journal =      "Computers \& Security",
  year =         "2014",
  OPTkey =       "",
  OPTvolume =    "43",
  OPTnumber =    "",
  pages =        "205--218",
  OPTmonth =     "June",
  OPTnote =      "",
  OPTannote =    "Abstract {Android} security has been a hot spot recently
                 in both academic research and public concerns due to
                 numerous instances of security attacks and privacy
                 leakage on {Android} platform. {Android} security has been
                 built upon a permission based mechanism which restricts
                 accesses of third-party {Android} applications to
                 critical resources on an {Android} device. Such
                 permission based mechanism is widely criticized for its
                 coarse-grained control of application permissions and
                 difficult management of permissions by developers,
                 marketers, and end-users. In this paper, we investigate
                 the arising issues in {Android} security, including
                 coarse granularity of permissions, incompetent
                 permission administration, insufficient permission
                 documentation, over-claim of permissions, permission
                 escalation attack, and TOCTOU (Time of Check to Time of
                 Use) attack. We illustrate the relationships among
                 these issues, and investigate the existing
                 countermeasures to address these issues. In particular,
                 we provide a systematic review on the development of
                 these countermeasures, and compare them according to
                 their technical features. Finally, we propose several
                 methods to further mitigate the risk in {Android}
                 security.",
}


@Article{Dendroid2014,
  author =       "Guillermo Suarez-Tangil and Juan E. Tapiador and Pedro
                 Peris-Lopez and Jorge Blasco",
  title =        "Dendroid: {A} text mining approach to analyzing and
                 classifying code structures in {Android} malware
                 families",
  journal =      "Expert Systems with Applications",
  year =         "2014",
  OPTkey =       "",
  volume =       "41",
  OPTnumber =    "",
  pages =        "1104–1117",
  month =        mar,
  OPTnote =      "",
  annote =       "Abstract The rapid proliferation of smartphones over
                 the last few years has come hand in hand with and
                 impressive growth in the number and sophistication of
                 malicious apps targetting smartphone users. The
                 availability of reuse-oriented development
                 methodologies and automated malware production tools
                 makes exceedingly easy to produce new specimens. As a
                 result, market operators and malware analysts are
                 increasingly overwhelmed by the amount of newly
                 discovered samples that must be analyzed. This
                 situation has stimulated research in intelligent
                 instruments to automate parts of the malware analysis
                 process. In this paper, we introduce Dendroid, a system
                 based on text mining and information retrieval
                 techniques for this task. Our approach is motivated by
                 a statistical analysis of the code structures found in
                 a dataset of {Android} OS malware families, which reveals
                 some parallelisms with classical problems in those
                 domains. We then adapt the standard Vector Space Model
                 and reformulate the modelling process followed in text
                 mining applications. This enables us to measure
                 similarity between malware samples, which is then used
                 to automatically classify them into families. We also
                 investigate the application of hierarchical clustering
                 over the feature vectors obtained for each malware
                 family. The resulting dendograms resemble the so-called
                 phylogenetic trees for biological species, allowing us
                 to conjecture about evolutionary relationships among
                 families. Our experimental results suggest that the
                 approach is remarkably accurate and deals efficiently
                 with large databases of malware instances.",
}

@InProceedings{wang2015,
  title =        {CICC: A Fine-Grained, Semantic-Aware, and
                 Transparent Approach to Preventing Permission Leaks for
                 {Android} Permission Managers},
  author =       "Daibin Wang and Haixia Yao and Yingjiu Li and Hai Jin
                 and Deqing Zou and Robert H Deng",
  booktitle =    "Proceedings of the 8th ACM Conference on Security \&
                 Privacy in Wireless and Mobile Networks",
  pages =        "6",
  year =         "2015",
  organization = "ACM",
  note =         {\url{http://www.researchgate.net/profile/Wang_Daibin/publication/275347653_CICC_A_Fine-Grained_Semantic-Aware_and_Transparent_Approach_to_Preventing_Permission_Leaks_for_Android_Permission_Managers/links/558cbba708ae40781c205b6e.pdf}},
}

@InProceedings{wang2015,
  title =        "DeepDroid: Dynamically Enforcing Enterprise Policy on
                 {Android} Devices",
  author =       "Xueqiang Wang and Kun Sun and Yuewu Wang and Jiwu
                 Jing",
  booktitle =    "Proc. of 18th Annual Network and Distributed System
                 Security Symposium (NDSS)",
  year =         "2015",
  note =         {\url{http://www.internetsociety.org/sites/default/files/02_5_1.pdf}},
}

@Article{torregrosa2015framework,
  title =        "A framework for detection of malicious software in
                 {Android} handheld systems using Machine Learning
                 techniques",
  author =       "Blas Torregrosa Garc{\'\i}a",
  year =         "2015",
  publisher =    "Universitat Oberta de Catalunya",
}

@Article{sheen2015,
  title =        {Android based malware detection using a multifeature
                 collaborative decision fusion approach},
  author =       "Shina Sheen and R Anitha and V Natarajan",
  journal =      "Neurocomputing",
  volume =       "151",
  pages =        "905--912",
  year =         "2015",
  publisher =    "Elsevier",
  note =         {\url{http://www.sciencedirect.com/science/article/pii/S0925231214012739},
}

@Article{Elisha-2014,
  author =       "Karim O. Elisha and Xiaokui Shua and Danfeng (Daphne)
                 Yaoa and Barbara G. Rydera and Xuxian Jiangb",
  title =        "Profiling user-trigger dependence for {Android} malware
                 detection",
  journal =      "Computers \& Security",
  year =         "2015",
  pages =        "255--273",
  OPTkey =       "",
  volume =       "49",
  OPTnumber =    "",
  note =         {\url{http://www.sciencedirect.com/science/article/pii/S0167404814001631},
  annote =       "Abstract As mobile computing becomes an integral part
                 of the modern user experience, malicious applications
                 have infiltrated open marketplaces for mobile
                 platforms. Malware apps stealthily launch operations to
                 retrieve sensitive user or device data or abuse system
                 resources. We describe a highly accurate classification
                 approach for detecting malicious {Android} apps. Our
                 method statically extracts a data-flow feature on how
                 user inputs trigger sensitive API invocations, a
                 property referred to as the user-trigger dependence.
                 Our evaluation with 1433 malware apps and 2684 free
                 popular apps gives a classification accuracy (2.1\%
                 false negative rate and 2.0\% false positive rate) that
                 is better than, or at least competitive against, the
                 state-of-the-art. Our method also discovers new
                 malicious apps in the Google Play market that cannot be
                 detected by virus scanning tools. Our thesis in this
                 mobile app classification work is to advocate the
                 approach of benign property enforcement, i.e.,
                 extracting unique behavioral properties from benign
                 programs and designing corresponding classification
                 policies.",
}

@Article{do2015,
  title =        "Exfiltrating data from {Android} devices",
  author =       "Quang Do and Ben Martini and Kim-Kwang Raymond Choo",
  journal =      "Computers \& Security",
  volume =       "48",
  pages =        "74--91",
  year =         "2015",
  publisher =    "Elsevier",
}

@Article{chen2015,
  title =        "SimApp: {A} Framework for Detecting Similar Mobile
                 Applications by Online Kernel Learning",
  author =       "Ning Chen and Steven CH Hoi and Shaohua Li and Xiaokui
                 Xiao",
  year =         "2015",
  booktitle =    {\url{ http://www.wsdm-conference.org/2015/},
}

@InProceedings{cao2015,
  title =        "EdgeMiner: Automatically Detecting Implicit Control
                 Flow Transitions through the {Android} Framework",
  author =       "Yinzhi Cao and Yanick Fratantonio and Antonio Bianchi
                 and Manuel Egele and Christopher Kruegel and Giovanni
                 Vigna and Yan Chen",
  year =         "2015",
  note =         {\url{http://cs.northwestern.edu/~ychen/Papers/NDSS15_edgeMinder.pdf}},
  booktitle =    "Network and Distributed System Security Symposium
                 (NDSS)",
  month =        feb,
  address =      "San Diego, CA, USA",
}

@Manual{OWASP,
  title =        {{OWASP} Mobile Security Project},
  OPTkey =       "",
  author =       "OWASP.org",
  OPTorganization = "",
  OPTaddress =   "",
  OPTedition =   "",
  OPTmonth =     "",
  year =         "2015",
  note =         {\url{https://www.owasp.org/index.php/OWASP_Mobile_Security_Project},
  annote =       "Our mission is to make software security visible, so
                 that individuals and organizations worldwide can make
                 informed decisions about true software security
                 risks.",
}

@InProceedings{pak2015,
  title =        "Detecting and tracing leaked private phone number data
                 in {Android} smartphones",
  author =       "Wooguil Pak and Youngrok Cha and Sunki Yeo",
  booktitle =    "Information Networking (ICOIN), 2015 International
                 Conference on",
  pages =        "503--508",
  year =         "2015",
  organization = "IEEE",
}

@InProceedings{que2015,
  title =        "Lightweight Optimization of {Android} Permission Model",
  author =       "Peixin Que and Xiao Guo and Zhen Wang",
  booktitle =    "Proceedings of the 4th International Conference on
                 Computer Engineering and Networks",
  pages =        "1043--1050",
  year =         "2015",
  organization = "Springer",
}

@Article{mayavan2015,
  title =        "Security Dangers to Versatile Interactive Media
                 Applications: Cam Based Assaults on Versatile
                 Telephones",
  author =       "R Mayavan and A Thamizh Selvan",
  keywords =     "pocket spy",
  year =         "2015",
  note =         {\url{http://www.ijasrd.org/in/wp-content/uploads/2015/03/V2114.pdf}},
}

@Article{dwivedi2015,
  title =        {Android Phone Security Using Wi-Fi Positioning
                  System},
  author =       "Aditya Dwivedi and Preeti Saxena",
  journal =      "International Journal of Electrical and Electronic
                 Engineering \& Telecommunications",
  year =         "2015",
  pages =        "1--6",
  note =         {\url{http://ijeetc.com/ijeetcadmin/upload/IJEETC_54acc0e4f294c.pdf}},
}

@InProceedings{Zhang2015,
  author =       "Zhongwen Zhang and Peng Liu and Ji Xiang and Jiwu Jing
                 and Lingguang Lei",
  title =        "How Your Phone Camera Can Be Used to Stealthily Spy on
                 You: Transplantation Attacks Against {Android} Camera
                 Service",
  booktitle =    "Proceedings of the 5th ACM Conference on Data and
                 Application Security and Privacy",
  series =       "CODASPY '15",
  year =         "2015",
  ISBN =         "978-1-4503-3191-3",
  location =     "San Antonio, Texas, USA",
  pages =        "99--110",
  numpages =     "12",
  URL =          "http://doi.acm.org/10.1145/2699026.2699103",
  publisher =    "ACM",
  address =      "New York, NY, USA",
  keywords =     {Android}, {Android} camera service, spy, transportation
                 attack",
}

@Article{burket2015,
  title =        "Making DidFail Succeed: Enhancing the {CERT} Static
                 Taint Analyzer for {Android} App Sets",
  author =       "Johnathon Burket and Lori Flynn and Will Klieber and
                 Jonathan Lim and William Snavely",
  year =         "2015",
  note =         {\url{http://repository.cmu.edu/cgi/viewcontent.cgi?article=1825&context=sei},
}

@InProceedings{jia2015,
  title =        {A Framework for Privacy Information Protection on
                 {Android}},
  author =       "Peng Jia and Xiang He and Liang Liu and Binjie Gu and
                 Yong Fang",
  booktitle =    "Computing, Networking and Communications (ICNC), 2015
                 International Conference on",
  pages =        "1127--1131",
  year =         "2015",
  month =        "2",
  organization = "IEEE",
  abstract =     "Permissions-based security model of {Android}
                 increasingly shows its vulnerability in protecting
                 users' privacy information. According to the
                 permissions-based security model, an application should
                 have the appropriate permissions before gaining various
                 resources (including data and hardware) in the phone.
                 This model can only restrict an application to access
                 system resources without appropriate permissions, but
                 can not prevent malicious accesses to privacy data
                 after the application having obtained permissions.
                 During the installation of an application, the system
                 will prompt what permissions the application is
                 requesting. Users have no choice but to allow all the
                 requested permissions if they want to use the
                 application. Once an application is successfully
                 installed, the system is unable to control its behavior
                 dynamically, and at this time the application can
                 obtain privacy information and send them out without
                 the acknowledgements of users. Therefore, there is a
                 great security risk of the permissions-based security
                 model. This paper researches on different ways to
                 access users' privacy information and proposes a
                 framework named PriGuard for dynamically protecting
                 users' privacy information based on Binder
                 communication interception technology and feature
                 selection algorithm. Applications customarily call
                 system services remotely by using the Binder mechanism,
                 then access the equipment and obtain information
                 through system services. By redirecting the Binder
                 interface function of Native layer, PriGuard intercepts
                 Binder messages, as a result, intercepting the
                 application's Remote Procedure Call (RPC) for system
                 services, then it can dynamically monitor the
                 application's behaviors that access privacy
                 information. In this paper, we collect many different
                 types of benign Application Package File (APK) samples,
                 and get the Application Programming Interface (API)
                 calls of each sample when it is running. Afterwards we
                 transform these API calls of each sample into f- ature
                 vectors. Feature selection algorithm is used to
                 generate the optimal feature subset. PriGuard
                 automatically completes the privacy policy
                 configuration on the newly installed software according
                 to the optimal feature subset, and then control the
                 calls on system service of the software using Binder
                 message interception technology, which achieves the
                 purpose of protecting users' privacy information.",
}

@Article{almin2015,
  title =        "A Novel Approach to Detect {Android} Malware",
  author =       "Shaikh Bushra Almin and Madhumita Chatterjee",
  journal =      "Procedia Computer Science International Conference on
                 Advanced Computing Technologies and Applications
                 (ICACTA)",
  volume =       "45",
  pages =        "407--417",
  year =         "2015",
  publisher =    "Elsevier",
}

@Article{talha2015,
  title =        {APK Auditor: Permission-Based {Android} Malware
                 Detection System},
  author =       "Kabakus Abdullah Talha and Dogru Ibrahim Alper and
                 Cetin Aydin",
  journal =      "Digital Investigation",
  volume =       "13",
  pages =        "1--14",
  year =         "2015",
  publisher =    "Elsevier",
}

@Article{marforio2015,
  title =        "Personalized Security Indicators to Detect Application
                 Phishing Attacks in Mobile Platforms",
  author =       "Claudio Marforio and Ramya Jayaram Masti and Claudio
                 Soriente and Kari Kostiainen and Srdjan Capkun",
  journal =      "arXiv preprint arXiv:1502.06824",
  year =         "2015",
  note =         {\url{http://arxiv.org/pdf/1502.06824.pdf}}, Department
                 of Computer Science, ETH Zurich
                 {firstname.lastname}@inf.ethz.ch",
}

@Article{sharma2015,
  title =        "System Evaluation on the {Android} Mobile Platform",
  author =       "Anirudh Sharma and Ankit Panday and Gowri Shankar",
  journal =      "International Journal of Computer Society \&
                 Communication Engineering",
  volume =       "1",
  number =       "2",
  year =         "2015",
  note =         {\url{http://ijcsce.com/final/VOLUME_1_ISSUE_2/VOL1ISS2-28.pdf}},
  institution =  "Pune University",
}

@InProceedings{mengxuan2014,
  title =        {Android Privacy Information Encoding Mechanism
                 ({APIEM})},
  author =       "Lee Mengxuan and Song Jiaxing and Liu Weidong",
  booktitle =    "Parallel Architectures, Algorithms and Programming
                 (PAAP), 2014 Sixth International Symposium on",
  pages =        "224--229",
  year =         "2014",
  organization = "IEEE",
}

@Article{li2014,
  title =        {I Know What Leaked in Your Pocket: Uncovering
                 Privacy Leaks on {Android} Apps with Static Taint
                 Analysis},
  author =       "Li Li and Alexandre Bartel and Jacques Klein and Yves
                 Le Traon and Steven Arzt and Siegfried Rasthofer and
                 Eric Bodden and Damien Octeau and Patrick Mcdaniel",
  journal =      "arXiv preprint arXiv:1404.7431",
  year =         "2014",
}

@InProceedings{Xiao2014,
  author =       "Qiuyu Xiao and Jiayi Chen and Le Yu and Huaxin Li and
                 Haojin Zhu and Muyuan Li and Kui Ren",
  title =        {POSTER}: LocMask: {A} Location Privacy Protection
                 Framework in {Android} System",
  booktitle =    "Proceedings of the 2014 ACM SIGSAC Conference on
                 Computer and Communications Security",
  series =       "CCS '14",
  year =         "2014",
  ISBN =         "978-1-4503-2957-6",
  location =     "Scottsdale, Arizona, USA",
  pages =        "1526--1528",
  URL =          "http://doi.acm.org/10.1145/2660267.2662367",
  doi =          "10.1145/2660267.2662367",
  acmid =        "2662367",
  publisher =    "ACM",
  address =      "New York, NY, USA",
  keywords =     {Android}, location privacy, smartphone security",
}

@InProceedings{mohsen2014,
  title =        {Android System Broadcast Actions Broadcasts Your
                 Privacy},
  author =       "Fadi Mohsen and Mohamed Shehab and Emmanuel
                 Bello-Ogunu and Abeer Al Jarrah",
  booktitle =    "Proceedings of the 2014 ACM SIGSAC Conference on
                 Computer and Communications Security",
  pages =        "1484--1486",
  year =         "2014",
  organization = "ACM",
}

@InProceedings{li2015,
  title =        {IccTA}: Detecting Inter-Component Privacy Leaks in
                 {Android} Apps",
  author =       "Li Li and Alexandre Bartel and Tegawend{\'e}
                 Fran{\c{c}}ois D Assise Bissyande and Jacques Klein and
                 Yves Le Traon and Steven Arzt and Siegfried Rasthofer
                 and Eric Bodden and Damien Octeau and Patrick
                 McDaniel",
  booktitle =    "IEEE/ACM 37th IEEE International Conference on
                 Software Engineering (ICSE 2015)",
  year =         "2015",
}


@Article{Vouk2008,
  title =        {Cloud {Computing} -- {Issues}, {Research} and
                 {Implementations}},
  author =       "Mladen A Vouk",
  journal =      "CIT. Journal of Computing and Information Technology",
  year =         "2008",
  number =       "4",
  pages =        "235--246",
  volume =       "16",
  publisher =    "SRCE-Sveu{\v{c}}ili{\v{s}}ni ra{\v{c}}unski centar",
  note =         {\url{http://hrcak.srce.hr/file/69202},
  annote={
  Mladen A. Vouk
Department of Computer Science, North Carolina State University, Raleigh, North Carolina, USA
“Cloud” computing – a relatively recent term, builds on
decades of research in virtualization, distributed computing,
utility computing, and more recently networking,
web and software services. It implies a service oriented
architecture, reduced information technology overhead
for the end-user, great flexibility, reduced total cost of
ownership, on-demand services and many other things.
This paper discusses the concept of “cloud” computing,
some of the issues it tries to address, related research
topics, and a “cloud” implementation available today.
Keywords: “cloud” computing, virtual computing lab,
virtualization, utility computing, end-to-end quality of
service
  },
}

@InCollection{Droidapiminer2013,
  title =        {DroidAPIMiner: Mining {API}-level features for
                 robust malware detection in {Android}},
  author =       "Yousra Aafer and Wenliang Du and Heng Yin",
  booktitle =    {Security and Privacy in Communication Networks},
  publisher =    "Springer",
  year =         "2013",
  pages =        "86--103",
}

@Article{adams2013,
  title =        {Have Money, Will Travel: A Brief Survey of the Mobile
                 Payments Landscape},
  author =       "Carlisle Adams",
  year =         "2013",
}

@InProceedings{agarwal2013,
  title =        {ProtectMyPrivacy: Detecting and Mitigating Privacy
                 Leaks on {iOS} Devices Using Crowdsourcing},
  author =       "Yuvraj Agarwal and Malcolm Hall",
  booktitle =    {Proceeding of the 11th annual international
                 conference on Mobile systems, applications, and
                 services},
  year =         "2013",
  organization = "ACM",
  pages =        "97--110",
  note={\url{http://www.synergylabs.org/yuvraj/docs/Agarwal_MobiSys2013_ProtectMyPrivacy.pdf}},
}


@InProceedings{Akhawe-Felt2013,
  title =        {Alice in {Warningland}: A Large-Scale Field Study of
                 Browser Security Warning Effectiveness},
  author =       "Devdatta Akhawe and Adrienne Porter Felt",
  year =         "2013",
  series =       {USENIX Security Symposium 2013},
}

@article{alberts2011,
  title = {Beating up on {Android}},
  author = "Bas Alberts and Massimiliano Oldani",
  journal = "http://titanium.immunityinc.com/",
  year = "2011",
 note= {\url{http://titanium.immunityinc.com/infiltrate/archives.html}},
}

@InProceedings{TwoFactor2014,
  title =        "On the (In)Security of Mobile Two-Factor
                 Authentication",
  author =       "Ahmad-Reza Sadeghi {Alexandra Dmitrienko, Christopher
                 Liebchen, Christian Rossow},
  booktitle =    "Financial Cryptography and Data Security (FC'14)",
  year =         "2014",
  note =         {\url{http://www.icri-sc.org/fileadmin/user_upload/Group_TRUST/PubsPDF/Dmitrienko-127-camera-ready.pdf}},
  annote =       "Abstract: Two-factor authentication (2FA) schemes aim
                 at strengthening the security of login password-based
                 authentication by deploying secondary authentication
                 tokens. In this context, mobile 2FA schemes require no
                 additional hardware (e.g., a smartcard) to store and
                 handle the secondary authentication token, and hence
                 are considered as a reasonable trade-off between
                 security, usability and costs. They are widely used in
                 online banking and increasingly deployed by Internet
                 service providers. In this paper, we investigate 2FA
                 implementations of several well-known Internet service
                 providers such as Google, Dropbox, Twitter and
                 Facebook. We identify various weaknesses that allow an
                 attacker to easily bypass them, even when the secondary
                 authentication token is not under attacker's control.
                 We then go a step further and present a more general
                 attack against mobile 2FA schemes. Our attack relies on
                 cross-platform infection that subverts control over
                 both end points (PC and a mobile device) involved in
                 the authentication protocol. We apply this attack in
                 practice and successfully circumvent diverse schemes:
                 {SMS}-based TAN solutions of four large banks, one
                 instance of a visual TAN scheme, 2FA login verification
                 systems of Google, Dropbox, Twitter and Facebook
                 accounts, and the Google Authenticator app currently
                 used by 32 third-party service providers. Finally, we
                 cluster and analyze hundreds of real-world malicious
                 {Android} apps that target mobile 2FA schemes and show
                 that banking Trojans already deploy mobile counterparts
                 that steal 2FA credentials like TANs.",
}

@InProceedings{alhamed2013,
  title =        "Comparing privacy control methods for smartphone
                 platforms",
  author =       "Mohammed Alhamed and Khalid Amiri and Mansoor Omari
                 and Wei Le",
  booktitle =    "Engineering of Mobile-Enabled Systems (MOBS), 2013 1st
                 International Workshop on the",
  year =         "2013",
  organization = "IEEE",
  pages =        "36--41",
}

@InProceedings{DroidBarrier2014,
  title =        {DroidBarrier: Know what is executing on your
                 {Android}},
  author =       "Hussain MJ Almohri and Danfeng Daphne Yao and Dennis
                 Kafura",
  booktitle =    "Proceedings of the 4th ACM conference on Data and
                 Application Security and Privacy",
  year =         "2014",
  organization = "ACM",
  pages =        "257--264",
}

@Book{altheide2011,
  title =        "Digital Forensics with Open Source Tools: Using Open
                 Source Platform Tools for Performing Computer Forensics
                 on TargetSystems: Windows, Mac, Linux, Unix, etc",
  author =       "Cory Altheide and Harlan Carvey",
  publisher =    "Elsevier",
  year =         "2011",
}

@Manual{anatomyofAndroid,
  title =        {Anatomy of {Android}},
  author =       "  Jorge Suarez Rivaya",
  organization = {\url{http://anatomyof{Android}.com},
  annote =       "a superficial description of internals, often quoting
                 Yaghmour and AOSP src code chunks",
  year =         "2013",
}

@InCollection{apostolopoulos2013,
  title =        "Discovering Authentication Credentials in Volatile
                 Memory of {Android} Mobile Devices",
  author =       "Dimitris Apostolopoulos and Giannis Marinakis and
                 Christoforos Ntantogian and Christos Xenakis",
  booktitle =    "Collaborative, Trusted and Privacy-Aware
                 e/m-Services",
  publisher =    "Springer",
  year =         "2013",
  key =          "forensics",
  pages =        "178--185",
}

@Article{Fattori2014,
  title =        "On the Reconstruction of {Android} Malware Behaviors",
  author =       "Lorenzo Cavallaro {Aristide Fattori, Kimberly Tam,
                 Salahuddin J. Khan} and Alessandro Reina",
  year =         "2014",
  annote =       "This is pioneering work which uses Binder as a central
                 component of an {Android} malware analysis system.",
  OPTnote =      {\url{http://www.isg.rhul.ac.uk/sullivan/pubs/tr/MA-2014-01.pdf}},
}

@InProceedings{armando2013,
  title =        {Bring Your Own Device, Securely},
  author =       "Alessandro Armando and Gabriele Costa and Alessio
                 Merlo",
  booktitle =    "Proceedings of the 28th Annual ACM Symposium on
                 Applied Computing",
  year =         "2013",
  organization = "ACM",
  pages =        "1852--1858",
}

@InCollection{armando2012,
  title =        "Would You Mind Forking This Process? {A} Denial of
                 Service Attack on {Android} (and Some Countermeasures)",
  author =       "Alessandro Armando and Alessio Merlo and Mauro
                 Migliardi and Luca Verderame",
  booktitle =    "Information Security and Privacy Research",
  publisher =    "Springer",
  year =         "2012",
  pages =        "13--24",
}

@InProceedings{DREBIN2014,
  title =        {DREBIN: Effective and Explainable Detection of
                 {Android} Malware in Your Pocket},
  author =       "Daniel Arp and Michael Spreitzenbarth and Malte
                 H{\"u}bner and Hugo Gascon and Konrad Rieck and CERT
                 Siemens",
  year =         "2014",
  booktitle =    "Network and Distributed System Security Symposium
                 (NDSS)",
}

@Article{Artenstein2014,
  title =        {Man in the {Binder}: He Who Controls {IPC}, Controls
                 the {Droid}},
  author =       "Nitay Artenstein and Idan Revivo",
  year =         "2014",
  note =         {\url{https://www.blackhat.com/docs/eu-14/materials/eu-14-Artenstein-Man-In-The-Binder-He-Who-Controls-IPC-Controls-The-Droid-wp.pdf}},
}

@InProceedings{arzt2013,
  title =        "Instrumenting {Android} and Java Applications as Easy as
                 abc",
  author =       "Steven Arzt and Siegfried Rasthofer and Eric Bodden",
  booktitle =    "Runtime Verification",
  year =         "2013",
  note =         {\url{https://www.informatik.tu-darmstadt.de/fileadmin/user_upload/Group_EC-Spride/Publikationen/Instrumenting_Android_and_Java_Applications_as_Easy_as_abc.pdf}},
  organization = "Springer",
  pages =        "364--381",
}

@PhdThesis{Aswathy2019,
  title =        "Mobile Device {OS} Architectures for Privacy",
  author =       "Aswathy Asok",
  school =       "Amrita Vishwa Vidyapeetham",
  year =         "201x",
}

@Article{MobileTrustedComputing,
  title =        "Mobile Trusted Computing",
  author =       "N. Asokan and Jan-Erik Ekberg and Kari Kostiainen and
                 Anand Rajan and Carlos Rozas and Ahmad-Reza Sadeghi and
                 Steffen Schulz and and Christian Wachsmann",
  journal =      "Proceedings of the IEEE",
  year =         "2014",
  month =        aug,
  number =       "8",
  volume =       "102",
  pubkeywords =  "TUD-CS-2014-0871",
  research_area = "ICRI-SC, System Security Lab",
  research_sub_area = "- SST: CASED, Secure Things",
}

@InProceedings{Pscout2012,
  title =        {Pscout: Analyzing the {Android} Permission
                 Specification},
  author =       "Kathy Wain Yee Au and Yi Fan Zhou and Zhen Huang and
                 David Lie",
  booktitle =    {Proceedings of the 2012 ACM conference on Computer
                 and communications security},
  year =         "2012",
  organization = "ACM",
  pages =        "217--228",
}

@InProceedings{backes2014,
  title =        {Android Security Framework: Extensible multi-layered
                 access control on {Android}},
  author =       "Michael Backes and Sven Bugiel and Sebastian Gerling
                 and Philipp von Styp-Rekowsky",
  booktitle =    "Proceedings of the 30th Annual Computer Security
                 Applications Conference",
  year =         "2014",
  note =         {\url{https://infsec.cs.uni-saarland.de/~bugiel/publications/pdfs/bugiel14-acsac1.pdf}},
  organization = "ACM",
  pages =        "46--55",
}

@InProceedings{balebako2014privacy,
  title =        {The Privacy and Security Behaviors of Smartphone App
                 Developers},
  author =       "Rebecca Balebako and Abigail Marsh and Jialiu Lin and
                 Jason Hong and Lorrie Faith Cranor",
  booktitle =    "USEC",
  year =         "2014",
  note =         "23 February 2014, ISBN1-891562-37-1
                 http://dx.doi.org/10.14722/usec.2014.23006",
  OPTaddress =   "SanDiego, CA, USA",
}

@TechReport{ball2014detection,
  title =        "Detection and Prevention of {Android} Malware Attempting
                 to Root the Device",
  author =       "Justin R Ball",
  institution =  "DTIC Document",
  year =         "2014",
}

@InProceedings{baumann2013LibOS,
  title =        "Composing {OS} extensions safely and efficiently with
                 Bascule",
  author =       "Andrew Baumann and Dongyoon Lee and Pedro Fonseca and
                 Lisa Glendenning and Jacob R Lorch and Barry Bond and
                 Reuben Olinsky and Galen C Hunt",
  booktitle =    "Proceedings of the 8th ACM European Conference on
                 Computer Systems",
  year =         "2013",
  note =         {\url{http://www.msr-waypoint.net/pubs/180156/bascule_eurosys13.pdf}},
  organization = "ACM",
  pages =        "239--252",
}

@InProceedings{baumann2014shielding,
  title =        "Shielding applications from an untrusted cloud with
                 haven",
  author =       "Andrew Baumann and Marcus Peinado and Galen Hunt",
  booktitle =    "USENIX Symposium on Operating Systems Design and
                 Implementation (OSDI)",
  year =         "2014",
  note =         {\url{https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-baumann.pdf}},
}

@Book{beck2002,
  title =        {Linux {Kernel} Internals},
  author =       "Michael Beck and Robert Magnus and Ulrich Kunitz",
  publisher =    "Addison-Wesley Longman Publishing Co., Inc.",
  year =         "2002",
}

@InProceedings{Dune2012,
  title =        "Dune: Safe User-Level Access to Privileged {CPU}
                 Features",
  author =       "Adam Belay and Andrea Bittau and Ali Mashtizadeh and
                 David Terei and David Mazi{\`e}res and Christos
                 Kozyrakis",
  booktitle =    "10th USENIX Symposium on Operating Systems Design and
                 Implementation (OSDI 12)",
  year =         "2012",
  address =      "Hollywood, CA",
  note =         {\url{https://www.usenix.org/system/files/conference/osdi12/osdi12-final-117.pdf}},
  pages =        "335--348",
  publisher =    "USENIX",
  ISBN =         "978-1-931971-96-6",
  URL =          "https://www.usenix.org/conference/osdi12/technical-sessions/presentation/belay",
}

@Manual{Dune-Stanford,
  title =        "Dune: {A} {Linux} Kernel Extension for Privileged
                 {CPU} features",
  author =       "StanfordEdu",
  publisher =    "http://dune.scs.stanford.edu/",
  year =         "2013",
  note =         {\url{http://www.scs.stanford.edu/},
  annote =       "Dune provides ordinary user programs with safe and
                 efficient access to privileged CPU features that are
                 traditionally only available to kernels. It does so by
                 leveraging modern virtualization hardware, enabling
                 direct execution of privileged instructions in an
                 unprivileged context. We have implemented Dune for
                 Linux, using Intel's VT-x virtualization architecture
                 to expose access to exceptions, virtual memory,
                 privilege modes, and segmentation. By making these
                 hardware mechanisms available at user-level, Dune
                 creates opportunities to deploy novel systems without
                 specialized kernel modifications.",
}

@InProceedings{belay2014ix,
  title =        {IX: A protected dataplane operating system for
                 high throughput and low latency},
  author =       "Adam Belay and George Prekas and Ana Klimovic and
                 Samuel Grossman and Christos Kozyrakis and Edouard
                 Bugnion",
  booktitle =    "11th USENIX Symposium on Operating Systems Design and
                 Implementation (OSDI 14),(Broomfield, CO)",
  year =         "2014",
  note =         {\url{https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-belay.pdf}},
  pages =        "49--65",
}

@InCollection{benadjila2009,
  title =        "The Intel {AES} instructions set and the {SHA}-3
                 candidates",
  author =       "Ryad Benadjila and Olivier Billet and Shay Gueron and
                 Matt JB Robshaw",
  booktitle =    "Advances in Cryptology--ASIACRYPT 2009",
  publisher =    "Springer",
  year =         "2009",
  pages =        "162--178",
  annote =       "Abstract. The search for SHA-3 is now well-underway
                 and the 51 accepted submissions reflect a wide variety
                 of design approaches. A significant number are built
                 around Rijndael/AES-based operations and, in some
                 cases, the AES round function itself. Many of the
                 design teams have pointed to the forthcoming Intel AES
                 instructions set, to appear on Westmere chips during
                 2010, when making a variety of performance claims. In
                 this paper we study, for the first time, the likely
                 impact of the new AES instructions set on all the SHA-3
                 candidates that might benefit. As well as
                 distinguishing between those algorithms that are
                 AES-based and those that might be described as
                 AES-inspired, we have developed optimised code for all
                 the former. Since Westmere processors are not yet
                 available, we have developed a novel software technique
                 based on publicly available information that allows us
                 to accurately emulate the performance of these
                 algorithms on the currently available Nehalem
                 processor. This gives us the most accurate insight
                 to-date of the potential performance of SHA-3
                 candidates using the Intel AES instructions set",
}

@Book{benvenuti2006,
  title =        "Understanding Linux network internals",
  author =       "Christian Benvenuti",
  publisher =    "O'Reilly Media, Inc.",
  year =         "2006",
}

@InProceedings{ben2013nonkernel,
  title =        {The nonkernel: a Kernel Designed for the Cloud},
  author =       "Muli Ben-Yehuda and Omer Peleg and Orna Agmon
                 Ben-Yehuda and Igor Smolyar and Dan Tsafrir",
  booktitle =    "Proceedings of the 4th Asia-Pacific Workshop on
                 Systems",
  year =         "2013",
  note =         {\url{http://www.hypervisorconsulting.com/pubs/nom/nonkernel-apsys13.pdf}},
  organization = "ACM",
  pages =        "7",
}

@Misc{berezecki2014managing,
  title =        "Managing overhead associated with service requests via
                 software generated interrupts",
  author =       "Mateusz Berezecki",
  month =        may # "~20",
  note =         "US Patent 8,732,371",
  year =         "2014",
  publisher =    "Google Patents",
}

@Article{bhat2012open,
  title =        "Open Source Code Doesn’t Always Help: Case of File
                 System Development",
  author =       "Wasim Ahmad Bhat and SMK Quadri",
  journal =      "Trends in Information Management (TRIM)",
  year =         "2012",
  number =       "2",
  volume =       "7",
}

@Misc{black2014,
  title =        "Systems and methods for transparent per-file
                 encryption and decryption via metadata identification",
  author =       "W. Black and K. PRICE",
  month =        sep # "~11",
  note =         "US Patent App. 14/203,974",
  year =         "2014",
  publisher =    "Google Patents",
  URL =          "https://www.google.com/patents/US20140258720",
}

@InProceedings{bogdanov2014,
  title =        {ALE: {AES}-based lightweight authenticated
                 encryption},
  author =       "Andrey Bogdanov and Florian Mendel and Francesco
                 Regazzoni and Vincent Rijmen and Elmar Tischhauser",
  booktitle =    "Fast Software Encryption",
  year =         "2014",
  organization = "Springer",
  pages =        "447--466",
}

@InProceedings{bojinov2011,
  title =        "Address space randomization for mobile devices",
  author =       "Hristo Bojinov and Dan Boneh and Rich Cannings and
                 Iliyan Malchev",
  booktitle =    "Proceedings of the fourth ACM conference on Wireless
                 network security",
  year =         "2011",
  organization = "ACM",
  pages =        "127--138",
  key =          "ASLR",
}

@Article{borrego2013,
  title =        {An {NFC} based context-aware solution for access to
                 bibliographic sources in university environments},
  author =       "Francisco Borrego-Jaraba and Gonzalo Cerruela
                 Garc{\'i}a and Irene Luque Ruiz and Miguel {\'A}ngel
                 G{\'o}mez-Nieto",
  journal =      "Journal of Ambient Intelligence and Smart
                 Environments",
  year =         "2013",
  number =       "1",
  pages =        "105--118",
  volume =       "5",
  publisher =    "IOS Press",
}

@Book{Bovet2005,
  title =        {Understanding the {Linux} {Kernel}},
  author =       "Daniel P Bovet and Marco Cesati",
  publisher =    "O'Reilly Media, Inc.",
  year =         "2005",
}

@Article{bugiel2011,
  title =        {XmAndroid}: {A} new {Android} evolution to mitigate
                 privilege escalation attacks",
  author =       "Sven Bugiel and Lucas Davi and Alexandra Dmitrienko
                 and Thomas Fischer and Ahmad-Reza Sadeghi",
  journal =      "Technische Universit{\"a}t Darmstadt, Technical Report
                 TR-2011-04",
  year =         "2011",
}

@InProceedings{bugiel2013,
  title =        {Flexible and fine-grained mandatory access control on
                 {Android} for diverse security and privacy policies},
  author =       "Sven Bugiel and Stephan Heuser and Ahmad-Reza
                 Sadeghi",
  booktitle =    {22nd USENIX Security Symposium (USENIX
                 Security{\rq}13). USENIX},
  year =         "2013",
}

@Article{carata2014,
  title =        "A Primer on Provenance",
  author =       "Lucian Carata and Sherif Akoush and Nikilesh
                 Balakrishnan and Thomas Bytheway and Ripduman Sohan and
                 Margo Selter and Andy Hopper",
  journal =      "Communications of the ACM",
  year =         "2014",
  note =         {\url{ https://www.cl.cam.ac.uk/~sa497/pop_cacm.pdf}},
  number =       "5",
  pages =        "52--60",
  volume =       "57",
  publisher =    "ACM",
}

@InProceedings{Carlini-Felt-Wagner2012,
  title =        {An Evaluation of the Google Chrome Extension Security
                 Architecture},
  author =       "Nicholas Carlini and Adrienne Porter Felt and David
                 Wagner",
  year =         "2012",
  series =       {USENIX Security Symposium 2012},
}

@InProceedings{carroll2010analysis,
  title =        "An Analysis of Power Consumption in a Smartphone.",
  author =       "Aaron Carroll and Gernot Heiser",
  booktitle =    "USENIX annual technical conference",
  year =         "2010",
  pages =        "271--285",
}

@Article{ceolin2012trust,
  title =        "Trust Evaluation through User Reputation and
                 Provenance Analysis.",
  author =       "Davide Ceolin and Paul T Groth and Willem Robert Van
                 Hage and Archana Nottamkandath and Wan Fokkink",
  journal =      "URSW",
  year =         "2012",
  note =         {\url{http://ceur-ws.org/Vol-900/paper2.pdf}},
  pages =        "15--26",
  volume =       "900",
}

@Article{chakraborti2015,
  title =        "Application Security framework for Mobile App
                 Development in Enterprise setup",
  author =       "Subhamoy Chakraborti and DP Acharjya and Sugata
                 Sanyal",
  journal =      "arXiv preprint arXiv:1503.05992",
  year =         "2015",
  note =         {\url{http://arxiv.org/pdf/1503.05992.pdf}},
  annote =       "*Subhamoy Chakraborti Magma Fincorp Limited, India
                 Email: chakrabortisubhamoy@gmail.com D. P. Acharjya
                 School of Computing Science and Engineering, VIT
                 University, Vellore, India E mail: dpacharjya@gmail.com
                 Sugata Sanyal Corporate Technology Office, Tata
                 Consultancy Services, Mumbai, India Email:
                 sugata.sanyal@tcs.com *Corresponding author",
}

@InProceedings{chakraborty2014,
  title =        {ipShield: a framework for enforcing context-aware
                 privacy},
  author =       "Supriyo Chakraborty and Chenguang Shen and Kasturi
                 Rangan Raghavan and Yasser Shoukry and Matt Millar and
                 Mani Srivastava",
  booktitle =    {Proceedings of the 11th USENIX Conference on
                 Networked Systems Design and Implementation},
  year =         "2014",
  organization = "USENIX Association",
  pages =        "143--156",
}

@Article{Checkoway2013,
  title =        "Iago Attacks: Why the System Call {API} is a Bad
                 Untrusted {RPC} Interface",
  author =       "Stephen Checkoway",
  year =         "2013",
  note =         {\url{https://www.cs.jhu.edu/~s/papers/iago2013/iago2013.pdf}},
}

@InProceedings{Chin2011,
  title =        "Analyzing Inter-Application Communication in
                 {{Android}},
  author =       "Erika Chin and Adrienne Porter Felt and Kate Greenwood
                 and David Wagner",
  year =         "2011",
  note =         {\url{https://www.eecs.berkeley.edu/~daw/papers/intents-mobisys11.pdf}},
  series =       "Conference on Mobile Systems, Applications, and
                 Services (MobiSys) 2011",
  annote =       "ABSTRACT Modern smartphone operating systems support
                 the development of third-party applications with open
                 system APIs. In addition to an open API, the {Android}
                 operating system also provides a rich inter-application
                 message passing system. This encourages
                 inter-application collaboration and reduces developer
                 burden by facilitating component reuse. Unfortunately,
                 message passing is also an application attack surface.
                 The content of messages can be sniffed, modi- fied,
                 stolen, or replaced, which can compromise user privacy.
                 Also, a malicious application can inject forged or
                 otherwise malicious messages, which can lead to
                 breaches of user data and violate application security
                 policies. We examine {Android} application interaction
                 and identify security risks in application components.
                 We provide a tool, ComDroid, that detects application
                 communication vulnerabilities. ComDroid can be used by
                 developers to analyze their own applications before
                 release, by application reviewers to analyze
                 applications in the {Android} Market, and by end users.
                 We analyzed 20 applications with the help of ComDroid
                 and found 34 exploitable vulnerabilities; 12 of the 20
                 applications have at least one vulnerability.",
}

@Article{choi2012novel,
  title =        "A Novel Approach for {SMS} security",
  author =       "Jongseok Choi and Howon Kim",
  journal =      "International Journal of Security and Its
                 Applications",
  year =         "2012",
  pages =        "373--378",
  volume =       "6",
}

@Book{chou2001empirical,
  title =        "An empirical study of operating systems errors",
  author =       "Andy Chou and Junfeng Yang and Benjamin Chelf and Seth
                 Hallem and Dawson Engler",
  publisher =    "ACM",
  year =         "2001",
  number =       "5",
  volume =       "35",
}

@Misc{chow2014,
  title =        "Method and system for recording a selected computer
                 process for subsequent replay",
  author =       "J. Chow and T. GARFINKEL and D. LUCCHETTI",
  month =        feb # "~18",
  note =         "US Patent 8,656,222",
  year =         "2014",
  publisher =    "Google Patents",
  URL =          "https://www.google.com/patents/US8656222",
}

@Misc{chow2014method,
  title =        "Method and system for recording a selected computer
                 process for subsequent replay",
  author =       "J. Chow and T. GARFINKEL and D. LUCCHETTI",
  month =        feb # "~18",
  note =         "US Patent 8,656,222,
                 \url{https://www.google.com/patents/US8656222},
  year =         "2014",
  publisher =    "Google Patents",
  URL =          "https://www.google.com/patents/US8656222",
}

@InProceedings{Busold2014,
  title =        "Key2Share for Authentication Services",
  author =       "Christian Wachsmann and Christoph Busold and Alexandra
                 Dmitrienko",
  annote =       "Abstract: Key2Share is a smartphone-based solution for
                 authentication services that allows users to manage
                 their access rights to different physical resources on
                 their mobile device. The system is applicable to
                 various application scenarios, such as access control
                 to enterprise facilities, hotel rooms, houses and cars.
                 Key2Share complies with high security standards by
                 providing reliable protection for keys in transit and
                 on the mobile platform. Particularly, it employs modern
                 cryptography to protect keys in transfer and leverages
                 secure hardware (such as smartcards) for storing and
                 handling cryptographic secrets in isolation from
                 untrusted code, such as mobile operating system and
                 apps.",
  booktitle =    "SmartCard Workshop",
  OPTyear =      "2014",
}

@Book{cleary2014cyber,
  title =        "Cyber Security and Privacy: Third Cyber Security and
                 Privacy {EU} Forum, {CSP} Forum 2014, Athens, Greece,
                 May 21-22, 2014, Revised Selected Papers",
  author =       "Frances Cleary and Massimo Felici",
  publisher =    "Springer",
  year =         "2014",
  volume =       "470",
}

@Article{cooper2014,
  title =        {Tapjacking Threats and Mitigation Techniques for
                 {Android} Applications},
  author =       "Vanessa Cooper",
  year =         "2014",
  note =         {\url{http://digitalcommons.kennesaw.edu/},
}

@InProceedings{criswell2014,
  title =        "Virtual Ghost: Protecting applications from hostile
                 operating systems",
  author =       "John Criswell and Nathan Dautenhahn and Vikram Adve",
  booktitle =    "Proceedings of the 19th international conference on
                 Architectural support for programming languages and
                 operating systems",
  year =         "2014",
  note =         {\url{http://web.engr.illinois.edu/~dautenh1/downloads/publications/VirtualGhost-ASPLOS-2014.pdf}},
  organization = "ACM",
  pages =        "81--96",
}

@InCollection{crussell2013andarwin,
  title =        {AnDarwin: Scalable Detection of Semantically Similar
                 {Android} Applications},
  author =       "Jonathan Crussell and Clint Gibler and Hao Chen",
  booktitle =    {Computer Security--ESORICS 2013},
  publisher =    "Springer",
  year =         "2013",
  pages =        "182--199",
}

@InProceedings{KVM-ARM2014,
  title =        {{KVM/ARM}: the design and implementation of the
                 {Linux} {ARM} {Hypervisor}},
  author =       "Christoffer Dall and Jason Nieh",
  booktitle =    "Proceedings of the 19th international conference on
                 Architectural support for programming languages and
                 operating systems",
  year =         "2014",
  note =         {\url{http://www.cs.columbia.edu/~nieh/pubs/asplos2014_kvmarm.pdf}},
  organization = "ACM",
  pages =        "333--348",
}

@InProceedings{Deshotels2014,
  title =        "DroidLegacy: Automated Familial Classification of
                 {Android} Malware",
  author =       "Luke Deshotels and Vivek Notani and Arun Lakhotia",
  booktitle =    "Proceedings of ACM SIGPLAN on Program Protection and
                 Reverse Engineering Workshop 2014",
  year =         "2014",
  address =      "New York, NY, USA",
  pages =        "3:1--3:12",
  publisher =    "ACM",
  series =       "PPREW'14",
  acmid =        "2556467",
  articleno =    "3",
  doi =          "10.1145/2556464.2556467",
  ISBN =         "978-1-4503-2649-0",
  keywords =     {Android} malware, class dependence graphs, familial
                 classification, malware detection, module generation,
                 piggybacked malware, signature generation, static
                 analysis",
  location =     "San Diego, CA, USA",
  numpages =     "12",
  URL =          "http://doi.acm.org/10.1145/2556464.2556467",
}

@Article{desnos2011,
  title =        {Android: From Reversing to Decompilation},
  author =       "Anthony Desnos and Geoffroy Gueguen",
  journal =      "Proc. of Black Hat Abu Dhabi",
  year =         "2011",
}

@Book{despotovi2014,
  title =        "Handbook of Research on High Performance and Cloud
                 Computing in Scientific Research and Education",
  author =       "Marijana Despotovi-Zraki and Aleksandar Belic and
                 Veljko Milutinovi{\'c},
  publisher =    "IGI Global",
  year =         "2014",
}

@Article{diao2014,
  title =        "Your Voice Assistant is Mine: How to Abuse Speakers to
                 Steal Information and Control Your Phone",
  author =       "Wenrui Diao and Xiangyu Liu and Zhe Zhou and Kehuan
                 Zhang",
  journal =      "arXiv preprint arXiv:1407.4923",
  year =         "2014",
}

@InProceedings{dietz2011,
  title =        {QUIRE: Lightweight Provenance for Smart Phone
                 Operating Systems},
  author =       "Michael Dietz and Shashi Shekhar and Yuliy Pisetsky
                 and Anhei Shu and Dan S Wallach",
  booktitle =    "USENIX Security Symposium",
  year =         "2011",
}

@InProceedings{do2013,
  title =        {Enhancing User Privacy on {Android} Mobile Devices Via
                 Permissions Removal},
  author =       "Quang Do and Ben Martini and Kim-Kwang Raymond Choo",
  booktitle =    {47th Annual Hawaii International Conference on System
                 Sciences (HICSS 2014)},
  year =         "2013",
}

@Book{Drake2013,
  title =        {Android {Hacker's} {Handbook}},
  author =       "Joshua J. Drake and Zach Lanier and Collin Mulliner
                 and Pau Oliva and Stephen A. Ridley and Georg
                 Wicherski",
  publisher =    "Wiley",
  year =         "2013",
  note =         {\url{http://filepi.com/i/q0j0NIZ},
}

@Manual{eigler2014,
  title =        "Systemtap tutorial",
  author =       "Frank Ch Eigler",
  month =        "12",
  note =         {\url{http://www. sourceware. org/systemtap/tutorial.
                 pdf},
  organization = "sourceware.org",
  year =         "2014",
  annote =       "Systemtap is a tool that allows developers and
                 administrators to write and reuse simple scripts to
                 deeply examine the activities of a live Linux system.
                 Data may be extracted, filtered, and summarized quickly
                 and safely, to enable diagnoses of complex performance
                 or functional problems.",
}

@InProceedings{eigler2006,
  title =        "Problem solving with systemtap",
  author =       "Frank Ch Eigler and Red Hat",
  booktitle =    "Proc. of the Ottawa Linux Symposium",
  year =         "2006",
  organization = "Citeseer",
  pages =        "261--268",
}

@Article{eigler2005,
  title =        "Architecture of systemtap: a Linux trace/probe tool",
  author =       "Frank C Eigler and Vara Prasad and Will Cohen and Hien
                 Nguyen and Martin Hunt and Jim Keniston and Brad Chen",
  year =         "2005",
  publisher =    "Citeseer",
}

@Book{Elenkov2014,
  title =        {Android Security Internals: An In-Depth Guide to
                 {Android}'s Security Architecture},
  author =       "Nikolay Elenkov",
  publisher =    "No Starch Press",
  year =         "2014",
  address =      "San Francisco, CA, USA",
  edition =      "1st",
  ISBN =         "1-59327-581-1, 978-1-59327-581-5",
}

@Article{elinux-binder,
  title =        {Android Binder},
  author =       "elinux.org",
  journal =      "eLinux.org",
  year =         "2014",
  note =         {\url{http://elinux.org/{Android}_Binder}},
}

@InProceedings{Russello2011,
  title =        "Yaase: Yet Another {Android} Security Extension",
  author =       "Giovanni Russello and Bruno Crispo and Earlence
                 Fernandes and Yury Zhauniarovich",
  booktitle =    "Privacy, Security, Risk and Trust (PASSAT) and 2011
                 IEEE Third Inernational Conference on Social Computing
                 (SocialCom), 2011 IEEE Third International Conference
                 on",
  pages =        "1033--1040",
  year =         "2011",
  organization = "IEEE",
}

@Article{ongtang2012,
  title =        "Semantically Rich Application-Centric Security in
                 {Android}",
  author =       "Machigar Ongtang and Stephen McLaughlin and William
                 Enck and Patrick McDaniel",
  journal =      "Security and Communication Networks",
  volume =       "5",
  number =       "6",
  pages =        "658--673",
  year =         "2012",
  publisher =    "Wiley Online Library",
}

@InProceedings{wu2013,
  title =        "The Impact of Vendor Customizations on {Android}
                 Security",
  author =       "Lei Wu and Michael Grace and Yajin Zhou and Chiachih
                 Wu and Xuxian Jiang",
  booktitle =    "Proceedings of the 2013 ACM SIGSAC conference on
                 Computer \& communications security",
  pages =        "623--634",
  year =         "2013",
  organization = "North Carolina State University",
  note =         {\url{http://www.cs.ncsu.edu/faculty/jiang/pubs/CCS13.pdf}},
  annote =       "In this paper, we analyze ten representative stock
                 {Android} images from five popular smartphone vendors
                 (with two models from each vendor). Our goal is to
                 assess the extent of security issues that may be
                 introduced from vendor customizations and further
                 determine how the situation is evolving over time. In
                 particular, we take a three-stage process: First, given
                 a smartphone’s stock image, we perform provenance
                 analysis to classify each app in the image into three
                 categories: apps originating from the AOSP, apps
                 customized or written by the vendor, and third-party
                 apps that are simply bundled into the stock image. Such
                 provenance analysis allows for proper attribution of
                 detected security issues in the examined {Android}
                 images. Second, we analyze permission usages of
                 pre-loaded apps to identify overprivileged ones that
                 unnecessarily request more {Android} permissions than
                 they actually use. Finally, in vulnerability analysis,
                 we detect buggy pre-loaded apps that can be exploited
                 to mount permission re-delegation attacks or leak
                 private information. Our evaluation results are
                 worrisome: vendor customizations are significant on
                 stock {Android} devices and on the whole responsible for
                 the bulk of the security problems we detected in each
                 device. Specifically, our results show that on average
                 85.78\% of all preloaded apps in examined stock images
                 are overprivileged with a majority of them directly
                 from vendor customizations. In addition, 64.71\% to
                 85.00\% of vulnerabilities we detected in examined
                 images from every vendor (except for Sony) arose from
                 vendor customizations. In general, this pattern held
                 over time – newer smartphones, we found, are not
                 necessarily more secure than older ones.",
}

@Article{enck2009,
  title =        "Understanding {Android} Security",
  author =       "William Enck and Machigar Ongtang and Patrick
                 McDaniel",
  journal =      "IEEE Security \& Privacy",
  number =       "1",
  pages =        "50--57",
  year =         "2009",
  publisher =    "IEEE",
  note =         {\url{http://www.academia.edu/download/30867297/sp09.pdf}},
}

@InCollection{bauer2012,
  title =        "Runtime Verification Meets {Android} Security",
  author =       "Andreas Bauer and Jan-Christoph K{\"u}ster and Gil
                 Vegliach",
  booktitle =    "NASA Formal Methods",
  pages =        "174--180",
  year =         "2012",
  publisher =    "Springer",
  note =         {\url{http://kuester.multics.org/publications/NFM12.pdf}},
}

@InProceedings{enck2011,
  title =        "A Study of {Android} Application Security",
  author =       "William Enck and Damien Octeau and Patrick McDaniel
                 and Swarat Chaudhuri",
  booktitle =    "USENIX security symposium",
  volume =       "2",
  pages =        "2",
  year =         "2011",
}

@Article{enck2014,
  title =        {{TaintDroid}: an information-flow tracking system for
                 realtime privacy monitoring on smartphones},
  author =       "William Enck and Peter Gilbert and Seungyeop Han and
                 Vasant Tendulkar and Byung-Gon Chun and Landon P Cox
                 and Jaeyeon Jung and Patrick McDaniel and Anmol N
                 Sheth",
  journal =      "ACM Transactions on Computer Systems (TOCS)",
  year =         "2014",
  note =         {\url{http://static.usenix.org/events/osdi10/tech/full_papers/Enck.pdf}},
                 TaintDroid download:
                 \url{http://appanalysis.org/download.html},
  number =       "2",
  pages =        "5",
  volume =       "32",
  publisher =    "ACM",
}

@InProceedings{Falcone2012,
  title =        "Towards Distributed Monitoring of {Android}
                 Applications",
  author =       "Yli{\`e}s Falcone",
  year =         "2012",
  journal =      "Internet www.viseo.net",
}

@InProceedings{falcone2013runtime,
  title =        {Runtime Verification and Enforcement for {Android}
                 Applications with RV-Droid},
  author =       "Yli{\`e}s Falcone and Sebastian Currea and Mohamad
                 Jaber",
  booktitle =    {Runtime Verification},
  year =         "2013",
  organization = "Springer",
  pages =        "88--95",
}

@Article{fathy2014,
  title =        "Screen-based active user authentication",
  author =       "Mohammed E Fathy and Vishal M Patel and Tom Yeh and
                 Yangmuzi Zhang and Rama Chellappa and Larry S Davis",
  journal =      "Pattern Recognition Letters",
  year =         "2014",
  pages =        "122--127",
  volume =       "42",
  publisher =    "Elsevier",
}

@InProceedings{Felt-Evans-2008,
  title =        {Privacy Protection for Social Networking {APIs}},
  author =       "Adrienne Felt and David Evans",
  year =         "2008",
  series =       {Web 2.0 Security and Privacy (W2SP) 2008},
}

@Manual{enamel2013,
  title =        {Usable Security},
  author =       "Adrienne Porter Felt",
  note =         {\url{http://www.chromium.org/Home/chromium-security/enamel},
  organization = "chromium.org",
  year =         "2013",
  annote =       "One of the biggest security challenges is helping
                 users make safe decisions while they surf the web.",
}

@InProceedings{Felt-2011,
  title =        {{Android} Permissions Demystified},
  author =       "Adrienne Porter Felt and Erika Chin and Steve Hanna
                 and Dawn Song and David Wagner",
  booktitle =    "18th ACM Conference on Computer and Communications
                 Security",
  year =         "2011",
  address =      "New York, NY, USA",
  pages =        "627--638",
  publisher =    "ACM",
  series =       {CCS '11},
  abstract =     {Android} provides third-party applications with an
                 extensive API that includes access to phone hardware,
                 settings, and user data. Access to privacy- and
                 security-relevant parts of the API is controlled with
                 an install-time application permission system. We study
                 {Android} applications to determine whether {Android}
                 developers follow least privilege with their permission
                 requests. We built Stowaway, a tool that detects
                 overprivilege in compiled {Android} applications.
                 Stowaway determines the set of API calls that an
                 application uses and then maps those API calls to
                 permissions. We used automated testing tools on the
                 {Android} API in order to build the permission map that
                 is necessary for detecting overprivilege. We apply
                 Stowaway to a set of 940 applications and find that
                 about one-third are overprivileged. We investigate the
                 causes of overprivilege and find evidence that
                 developers are trying to follow least privilege but
                 sometimes fail due to insufficient API documentation.",
  acmid =        "2046779",
  doi =          "10.1145/2046707.2046779",
  ISBN =         "978-1-4503-0948-6",
  keywords =     {Android}; least privilege; permissions",
  location =     "Chicago, Illinois, USA",
  numpages =     "12",
}

@InProceedings{Felt-2012b,
  title =        {How to Ask For Permission},
  author =       "Adrienne Porter Felt and Serge Egelman and Matthew
                 Finifter and Devdatta Akhawe and David Wagner",
  year =         "2012",
  series =       {USENIX Workshop on Hot Topics in Security (HotSec)
                 2012},
}

@InProceedings{Felt-survey2011,
  title =        {A Survey of Mobile Malware in the Wild},
  author =       "Adrienne Porter Felt and Matthew Finifter and Erika
                 Chin and Steven Hanna and David Wagner",
  year =         "2011",
  series =       {ACM Workshop on Security and Privacy in Smartphones
                 and Mobile Devices (SPSM)},
}

@InProceedings{Felt-2012a,
  title =        {{Android} Permissions: User Attention, Comprehension,
                 and Behavior},
  author =       "Adrienne Porter Felt and Elizabeth Hay and Serge
                 Egelman and Ariel Haneyy and Erika Chin and David
                 Wagner",
  booktitle =    {Symposium on Usable Privacy and Security (SOUPS)
                 2012},
  year =         "2012",
  keywords =     {Android}; least privilege; permissions",
}

@Article{fernandes2014anception,
  title =        {Anception: Application Virtualization for {Android}},
  author =       "Earlence Fernandes and Alexander Crowell and Ajit
                 Aluri and Atul Prakash",
  journal =      "arXiv preprint arXiv:1401.6726",
  year =         "2014",
  note =         {\url{http://arxiv.org/pdf/1401.6726.pdf}},
}

@InProceedings{Armknecht2013,
  title =        "A Security Framework for Analysis and Design of
                 Software Attestation",
  author =       "Christian Wachsmann and Frederik Armknecht and
                 Ahmad-Reza Sadeghi and Steffen Schulz",
  OPTannote =    "Abstract: Software attestation has become a popular
                 and challenging research topic at many established
                 security conferences with an expected strong impact in
                 practice. It aims at verifying the software integrity
                 of (typically) resource-constrained embedded devices.
                 However, for practical reasons, software attestation
                 cannot rely on stored cryptographic secrets or
                 dedicated trusted hardware. Instead, it exploits
                 side-channel information, such as the time that the
                 underlying device needs for a specific computation. As
                 traditional cryptographic solutions and arguments are
                 not applicable, novel approaches for the design and
                 analysis are necessary. This is certainly one of the
                 main reasons why the security goals, properties and
                 underlying assumptions of existing software attestation
                 schemes have been only vaguely discussed so far,
                 limiting the confidence in their security claims. Thus,
                 putting software attestation on a solid ground and
                 having a founded approach for designing secure software
                 attestation schemes is still an important open problem.
                 We provide the first steps towards closing this gap.
                 Our first contribution is a security framework that
                 formally captures security goals, attacker models, and
                 various system and design parameters. Moreover, we
                 present a generic software attestation scheme that
                 covers most existing schemes in the literature.
                 Finally, we analyze its security within our framework,
                 yielding sufficient conditions for provably secure
                 software attestation schemes. We expect that such a
                 consolidating work allows for a meaningful security
                 analysis of existing schemes and supports the design of
                 arguably secure software attestation schemes and will
                 inspire new research in this area.",
  OPTbooktitle = "ACM Conference on Computer and Communications Security
                 (CCS)",
  OPTnote =      "http://eprint.iacr.org/2013/083",
  OPTorganization = "Technische Universität Darmstadt",
  OPTyear =      "2013",
}

@Article{friginal2014towards,
  title =        "Towards privacy-driven design of a dynamic carpooling
                 system",
  author =       "Jes{\'u}s Friginal and S{\'e}bastien Gambs and
                 J{\'e}r{\'e}mie Guiochet and Marc-Olivier Killijian",
  journal =      "Pervasive and Mobile Computing",
  year =         "2014",
  pages =        "71--82",
  volume =       "14",
  publisher =    "Elsevier",
}

@Manual{Fuse2014,
  title =        "Filesystem in Userspace",
  author =       "Fuse",
  note =         {\url{http://fuse.sourceforge.net/},
                 \url{http://sourceforge.net/p/fuse/wiki/FileSystems/},
  organization = {\url{http://fuse.sourceforge.net/},
  year =         "2014",
}

@InProceedings{Gargenta2012,
  title =        "Deep Dive into {{Android}} {IPC}/{Binder} Framework",
  author =       "Aleksandar (Sa2a) Gargenta",
  booktitle =    "AnDevCon: The {Android} Developer Conference",
  year =         "2012",
  annote =       "This is the goto resource for anybody wishing to get
                 started with Binder. Also watch the video.",
  note =         {\url{https://thenewcircle.com/s/post/1340/deep_dive_into_Android_ipc_binder_framework_at_andevcon_iv},
}

@InProceedings{garn2014,
  title =        "Eris: A Tool for Combinatorial Testing of the Linux
                 System Call Interface",
  author =       "Bernhard Garn and Dimitris E Simos",
  booktitle =    "Software Testing, Verification and Validation
                 Workshops (ICSTW), 2014 IEEE Seventh International
                 Conference on",
  year =         "2014",
  organization = "IEEE",
  pages =        "58--67",
}

@Article{Geneiatakisa2015,
  author =       "Dimitris Geneiatakisa and Igor Nai Fovinoa and Ioannis
                 Kounelisa and Paquale Stirparoa",
  title =        "A Permission verification approach for {Android} mobile
                 applications",
  journal =      "",
  year =         "2015",
  OPTkey =       "",
  volume =       "49",
  OPTnumber =    "",
  pages =        "192--205",
  month =        mar,
  OPTnote =      "",
  annote =       "Abstract Mobile applications build part of their
                 security and privacy on a declarative permission model.
                 In this approach mobile applications, to get access to
                 sensitive resources, have to define the corresponding
                 permissions in a manifest. However, mobile applications
                 may request access to permissions that they do not
                 require for their execution (over-privileges) and offer
                 opportunities to malicious software to gain access to
                 otherwise inaccessible resources. In this paper, we
                 investigate on the declarative permissions model on
                 which security and privacy services of {Android} rely
                 upon. We propose a practical and efficient permission
                 certification technique, in the direction of risk
                 management assessment. We combine both runtime
                 information and static analysis to profile mobile
                 applications and identify if they are over-privileged
                 or follow the least privilege principle. We demonstrate
                 a transparent solution that neither requires
                 modification to the underlying framework, nor access to
                 the applications' original source code. We assess the
                 effectiveness of our approach, using a randomly
                 selected varied set of mobile applications. Results
                 show that our approach can accurately identify whether
                 an application is over-privileged or not, whilst at the
                 same time guaranteeing the need of declaring specific
                 permissions in the manifest.",
}

@InCollection{geneiatakis2013,
  title =        {Security and Privacy in Mobile Cloud Under a
                 Citizen{\rq}s Perspective},
  author =       "Dimitris Geneiatakis and Ioannis Kounelis and Jan
                 Loeschner and Igor Nai Fovino and Pasquale Stirparo",
  booktitle =    "Cyber Security and Privacy",
  publisher =    "Springer",
  year =         "2013",
  pages =        "16--27",
}

@MastersThesis{Nikhil2015,
  title =        "Network {Ombudsman} for {Android}",
  author =       "Nikhil George",
  school =       "Amrita Vishwa Vidyapeetham",
  year =         "2015",
  address =      "Ettimadai, Tamil Nadu 641112, India",
  month =        jun,
  note =         "Advisor: Prabhaker Mateti",
  key =          {Android}, network, ombudsman, filtering,
                 crowd-sourcing, security",
}

@Article{ghosh2013securing,
  title =        "Securing {Android} Application with Anti-Reversing
                 Techniques",
  author =       "Sudipta Ghosh and Kamlesh Lahre and SR Tandan",
  journal =      "Automation and Autonomous System",
  year =         "2013",
  number =       "4",
  pages =        "149--154",
  volume =       "5",
}

@Book{gibler2012,
  title =        {AndroidLeaks: Automatically detecting potential
                 privacy leaks in {Android} applications on a large
                 scale},
  author =       "Clint Gibler and Jonathan Crussell and Jeremy Erickson
                 and Hao Chen",
  publisher =    "Springer",
  year =         "2012",
}

@InProceedings{Gisbert2014,
  title =        "On the Effectiveness of {NX}, {SSP}, {RenewSSP}, and
                 {ASLR} against Stack Buffer Overflows",
  author =       "Hector Marco Gisbert and Ismael Ripoll",
  booktitle =    "Network Computing and Applications (NCA), 2014 IEEE
                 13th International Symposium on",
  year =         "2014",
  organization = "IEEE",
  pages =        "145--152",
  keywords =     {Android} (operating system);ARM;ASLR
                 technique;{Android};GNU/Linux;NX;Renew SSP;SSP
                 technique;Windows;address space layout
                 randomization;buffer overflow attacks;byte-for-byte
                 attack;cyber security;entropy;forking servers;operating
                 systems;stack buffer overflow exploitation;stack
                 smashing protector;Computer
                 crashes;Entropy;Force;Layout;Libraries;Payloads;Servers",
  abstract =     "Stack Smashing Protector (SSP), Address-Space Layout
                 Randomization (ASLR) and Non-executable (NX) are
                 techniques for defending systems against buffer
                 overflow attacks but not limited to them. These
                 mechanism are available in modern operating systems
                 like {Android}, GNU/Linux and Windows. Unfortunately, to
                 keep up with the rapidly evolving landscape of
                 cyber-security it is necessary to reassess the
                 effectiveness of these protection techniques to avoid a
                 false sense of security. This paper assess the
                 effectiveness of these techniques against stack buffer
                 overflow exploitation. Our study indicates that the SSP
                 technique is the most effective against stack buffer
                 overflows. On forking servers, the ASLR technique is
                 almost useless on 32-bit architectures due to the
                 limited entropy provided by the size of the address
                 space. The recently proposed technique Renew SSP, which
                 is an improvement of the well known SSP, outperforms
                 the original SSP in all the cases, it is highly
                 effective against the dangerous byte-for-byte attack
                 and on systems with low secret entropy as x86 and
                 ARM.",
}

@Article{glavic2014primer,
  title =        "A Primer on Database Provenance",
  author =       "Boris Glavic",
  year =         "2014",
  note =         {\url{http://cs.iit.edu/~dbgroup/pdfpubls/G14.pdf}},
}

@Article{gold2013subverting,
  title =        {Subverting cellular technology: evolution, not
                 revolution},
  author =       "Steve Gold",
  journal =      "Network Security",
  year =         "2013",
  number =       "8",
  pages =        "14--19",
  volume =       "2013",
  publisher =    "Elsevier",
}

@InProceedings{gorla2014checking,
  title =        "Checking app behavior against app descriptions.",
  author =       "Alessandra Gorla and Ilaria Tavecchia and Florian
                 Gross and Andreas Zeller",
  booktitle =    "ICSE",
  year =         "2014",
  note =         {\url{https://www.st.cs.uni-saarland.de/publications/files/gorla-chabadaicse-2014.pdf}},
  pages =        "1025--1035",
}

@Article{groth2005,
  title =        "Preserv: Provenance recording for services",
  author =       "Paul Groth and Simon Miles and Luc Moreau",
  year =         "2005",
  note =         {\url{http://eprints.soton.ac.uk/262570/1/groth05preserv.pdf}},
  publisher =    "EPSRC",
}

@InProceedings{guan2014copker,
  title =        "Copker: Computing with Private Keys without {RAM},
  author =       "Le Guan and Jingqiang Lin and Bo Luo and Jiwu Jing",
  booktitle =    "Network and Distributed System Security Symposium
                 (NDSS)",
  year =         "2014",
}

@InProceedings{guha2011verified,
  title =        {Verified security for browser extensions},
  author =       "Guha and Arjun and Fredrikson and Matthew and Livshits
                 and Benjamin and Swamy and Nikhil",
  booktitle =    {Security and Privacy (SP), 2011 IEEE Symposium on},
  year =         "2011",
  organization = "IEEE",
  pages =        "115--130",
}

@TechReport{AA2014,
  title =        "Active Authentication {(AA)},
  author =       "Richard Guidorizzi",
  institution =  "DARPA",
  year =         "2014",
  annote =       "The Active Authentication (AA) program seeks to
                 develop novel ways of validating the identity of
                 computer users by focusing on the unique aspects of
                 individuals through software-based biometrics.
                 Biometrics are defined as the characteristics used to
                 recognize individuals based on one or more intrinsic
                 physical or behavioral traits. This program is focused
                 on behavioral biometrics.",
}

@Book{gupta2014,
  title =        "Learning Pentesting for {Android} Devices",
  author =       "Aditya Gupta",
  publisher =    "Packt Publishing Ltd",
  year =         "2014",
annote = {"cited by 4;"},
}

@InProceedings{Hamandi2013,
  title =        {Android {SMS} Malware: Vulnerability and Mitigation},
  author =       "Khodor Hamandi and Ali Chehab and Imad H Elhajj and
                 Ayman Kayssi",
  booktitle =    "Advanced Information Networking and Applications
                 Workshops (WAINA), 2013 27th International Conference
                 on",
  year =         "2013",
  organization = "IEEE",
  pages =        "1004--1009",
}

@InProceedings{hamandi2013,
  title =        {{Android} {SMS} Malware: Vulnerability and
                 Mitigation},
  author =       "Khodor Hamandi and Ali Chehab and Imad H Elhajj and
                 Ayman Kayssi",
  booktitle =    {Advanced Information Networking and Applications
                 Workshops (WAINA), 2013 27th International Conference
                 on},
  year =         "2013",
  organization = "IEEE",
  pages =        "1004--1009",
}

@InProceedings{han2013,
  title =        {Comparing Mobile Privacy Protection through
                 Cross-Platform Applications},
  author =       "Jin Han and Qiang Yan and Debin Gao and Jianying Zhou
                 and Robert Huijie Deng",
  booktitle =    {Proceedings of the Network and Distributed System
                 Security Symposium (NDSS), San Diego, CA, USA},
  year =         "2013",
}

@InProceedings{SIF2013,
  title =        {SIF: A Selective Instrumentation Framework for Mobile
                 Applications},
  author =       "Shuai Hao and Ding Li and William GJ Halfond and
                 Ramesh Govindan",
  booktitle =    {Proceeding of the 11th annual international
                 conference on Mobile systems, applications, and
                 services},
  year =         "2013",
  organization = "ACM",
  pages =        "167--180",
}

@MastersThesis{Hausner2014,
  title =        "Binderwall: Monitoring and Filtering {Android}
                 Interprocess Communication",
  author =       "Constanze Hausner",
  school =       "www.sec.in.tum.de",
  year =         "2014",
  note =         {\url{https://www.sec.in.tum.de/assets/Uploads/MAConstanzeHausner.pdf}},
  annote =       "This thesis offers rich technical information about
                 Binder, while focusing more on the defensive side.",
}

@Article{hay2014,
  title =        {Android KeyStore Stack Buffer Overflow},
  author =       "Roee Hay and Avi Dayan",
  year =         "2014",
  note =         {\url{http://milw00rm.com/lessons/1991.pdf}},
}

@PhdThesis{hecht2015detecting,
  title =        "Detecting Antipatterns in {Android} Apps",
  author =       "Geoffrey Hecht and Romain Rouvoy and Naouel Moha and
                 Laurence Duchien",
  school =       "INRIA Lille",
  year =         "2015",
}

@InProceedings{Herlands2014,
  title =        "Effective {Entropy}: Security-{Centric} {Metric} for
                 {Memory} {Randomization} {Techniques},
  author =       "William Herlands and Thomas Hobson and Paula J.
                 Donovan",
  booktitle =    "7th Workshop on Cyber Security Experimentation and
                 Test (CSET 14)",
  year =         "2014",
  address =      "San Diego, CA",
  month =        Aug,
  publisher =    "USENIX Association",
  abstract =     "User space memory randomization techniques are an
                 emerging field of cyber defensive technology which
                 attempts to protect computing systems by randomizing
                 the layout of memory. Quantitative metrics are needed
                 to evaluate their effectiveness at securing systems
                 against modern adversaries and to compare between
                 randomization technologies. We introduce Effective
                 Entropy, a measure of entropy in user space memory
                 which quantitatively considers an adversary’s ability
                 to leverage low entropy regions of memory via absolute
                 and dynamic inter-section connections. Effective
                 Entropy is indicative of adversary workload and enables
                 comparison between different randomization techniques.
                 Using Effective Entropy, we present a comparison of
                 static Address Space Layout Randomization (ASLR),
                 Position Independent Executable (PIE) ASLR, and a
                 theoretical fine grain randomization technique.",
  URL =          "https://www.usenix.org/conference/cset14/workshop-program/presentation/herlands",
}

@InProceedings{heuser2014,
  title =        {ASM}: {A} Programmable Interface for Extending
                 {Android} Security",
  author =       "Stephan Heuser and Adwait Nadkarni and William Enck
                 and Ahmad-Reza Sadeghi",
  booktitle =    "Proc. 23rd USENIX Security Symposium (SEC'14)",
  year =         "2014",
  institution =  "TU Darmstadt",
  number =       "TUD-CS-2014-0063",
}

@InProceedings{ho2014prec,
  title =        {PREC: practical root exploit containment for {Android}
                 devices},
  author =       "Tsung-Hsuan Ho and Daniel Dean and Xiaohui Gu and
                 William Enck",
  booktitle =    {Proceedings of the 4th ACM conference on Data and
                 application security and privacy},
  year =         "2014",
  organization = "ACM",
  pages =        "187--198",
}

@InProceedings{holavanalli2013flow,
  title =        {Flow permissions for {Android}},
  author =       "Shashank Holavanalli and Don Manuel and Vishwas
                 Nanjundaswamy and Brian Rosenberg and Feng Shen and
                 Steven Y Ko and Lukasz Ziarek",
  booktitle =    {Automated Software Engineering (ASE), 2013 IEEE/ACM
                 28th International Conference on},
  year =         "2013",
  organization = "IEEE",
  pages =        "652--657",
}

@InProceedings{hong2015,
  title =        "Poisoning Network Visibility in Software-Defined
                 Networks: New Attacks and Countermeasures",
  author =       "Sungmin Hong and Lei Xu and Haopei Wang and Guofei
                 Gu",
  year =         "2015",
  organization = "NDSS",
}

@InProceedings{CallerIDSpoof2014,
  title =        "You Can Call But You Can't Hide: Detecting Caller {ID}
                 Spoofing Attacks",
  author =       "Wenyuan Xu {Hossen Mustafa, Ahmad-Reza Sadeghi,
                 Steffen Schulz},
  booktitle =    "44th Annual IEEE/IFIP International Conference on
                 Dependable Systems and Networks (DSN)",
  year =         "2014",
  month =        jun,
}

@InProceedings{hunt2013,
  title =        "Security testing in {Android} networks: A Practical
                 Case Study",
  author =       "Ray Hunt",
  booktitle =    "Networks (ICON), 2013 19th IEEE International
                 Conference on",
  year =         "2013",
  organization = "IEEE",
  pages =        "1--6",
}

@InProceedings{hwang2014,
  title =        "Mortar: Filling the Gaps in Data Center Memory",
  author =       "Jinho Hwang and Ahsen Uppal and Timothy Wood and Howie
                 Huang",
  booktitle =    "Proceedings of the 10th ACM SIGPLAN/SIGOPS
                 international conference on Virtual execution
                 environments",
  year =         "2014",
  note =         {\url{http://www.seas.gwu.edu/~howie/publications/VEE14.pdf}},
  organization = "ACM",
  pages =        "53--64",
  abstract =     "Mortar does this by defining a new Linux system call
                 and a Xen hypercall which together provide the
                 interface to a key-value store. ... libfuse .. Data
                 center servers are typically overprovisioned, leaving
                 spare memory and CPU capacity idle to handle
                 unpredictable workload bursts by the virtual machines
                 running on them. While this allows for fast hotspot
                 mitigation, it is also wasteful. Unfortunately, making
                 use of spare capacity without impacting active
                 applications is particularly difficult for memory since
                 it typically must be allocated in coarse chunks over
                 long timescales. In this work we propose repurposing
                 the poorly utilized memory in a data center to store a
                 volatile data store that is managed by the hypervisor.
                 We present two uses for our Mortar framework: as a
                 cache for prefetching disk blocks, and as an
                 application-level distributed cache that follows the
                 memcached protocol. Both prototypes use the framework
                 to ask the hypervisor to store useful, but recoverable
                 data within its free memory pool. This allows the
                 hypervisor to control eviction policies and prioritize
                 access to the cache. We demonstrate the benefits of our
                 prototypes using realistic web applications and disk
                 benchmarks, as well as memory traces gathered from live
                 servers in our university’s IT department. By
                 expanding and contracting the data store size based on
                 the free memory available, Mortar improves average
                 response time of a web application by up to 35\%
                 compared to a fixed size memcached deployment, and
                 improves overall video streaming performance by 45\%
                 through prefetching.",
  keywords =     "new syscalls",
}

@InProceedings{hwang2008,
  title =        "Xen on {ARM}: System virtualization using Xen
                 hypervisor for {ARM}-based secure mobile phones",
  author =       "Joo-Young Hwang and Sang-Bum Suh and Sung-Kwan Heo and
                 Chan-Ju Park and Jae-Min Ryu and Seong-Yeol Park and
                 Chul-Ryun Kim",
  booktitle =    "Consumer Communications and Networking Conference,
                 2008. CCNC 2008. 5th IEEE",
  year =         "2008",
  organization = "IEEE",
  pages =        "257--261",
}

@Article{jacob2008,
  title =        "SystemTap: instrumenting the Linux kernel for
                 analyzing performance and functional problems",
  author =       "Bart Jacob and Paul Larson and B Leitao and SAMM da
                 Silva",
  journal =      "IBM Redbook",
  year =         "2008",
}

@InProceedings{jain2014sok,
  title =        "Sok: Introspections on trust and the semantic gap",
  author =       "Bhushan Jain and Mirza Basim Baig and Dongli Zhang and
                 Donald E Porter and Radu Sion",
  booktitle =    "Security and Privacy (SP), 2014 IEEE Symposium on",
  year =         "2014",
  note =         {\url{http://spin2013.cs.stonybrook.edu/~bpjain/docs/sok-sp14.pdf}},
  organization = "IEEE",
  pages =        "605--620",
}

@Article{kahanwal2014,
  title =        "File System Design Approaches",
  author =       "Brijender Kahanwal",
  journal =      "arXiv preprint arXiv:1403.5976",
  year =         "2014",
  note =         {\url{http://arxiv.org/pdf/1403.5976.pdf}},
  institution =  "Galaxy Global Group of Institutions Dinarpur, Ambala,
                 Haryana, INDIA",
  email =        "imkahanwal@gmail.com",
}

@InProceedings{Jeon2013,
  title =        {Enhancing Security Enforcement on Unmodified
                 {Android}},
  author =       "Cheol Jeon and WooChur Kim and Bongjae Kim and Yookun
                 Cho",
  booktitle =    {Proceedings of the 28th Annual ACM Symposium on
                 Applied Computing},
  year =         "2013",
  address =      "New York, NY, USA",
  pages =        "1655--1656",
  publisher =    "ACM",
  series =       {SAC '13},
  acmid =        "2480672",
  doi =          "10.1145/2480362.2480672",
  ISBN =         "978-1-4503-1656-9",
  location =     "Coimbra, Portugal",
  numpages =     "2",
  URL =          "http://doi.acm.org/10.1145/2480362.2480672",
}

@Article{jiang2013,
  title =        {JokerBot -- An {Android}-Based Botnet},
  author =       "Ruei Min Jiang and Jia Sian Jhang and Fu Hau Hsu and
                 Yan Ling Hwang and Pei Wen Huang and Yung Hoh Sheu",
  journal =      "Applied Mechanics and Materials",
  year =         "2013",
  pages =        "3454--3458",
  volume =       "284",
  publisher =    "Trans Tech Publ",
}

@Article{kashefi2013,
  title =        {A Survey on Mitigating Attacks Related to
                 Shortcomings of {Android} Permission Framework.},
  author =       "Iman Kashefi and Mazleena Salleh",
  journal =      "Journal of Theoretical \& Applied Information
                 Technology",
  year =         "2013",
  number =       "2",
  volume =       "55",
}

@Article{keil2013,
  title =        {{Android} Telephony},
  author =       "Matthias Keil",
  year =         "2013",
}

@InCollection{kelley2012conundrum,
  title =        {A conundrum of permissions: Installing applications
                 on an {Android} smartphone},
  author =       "Patrick Gage Kelley and Sunny Consolvo and Lorrie
                 Faith Cranor and Jaeyeon Jung and Norman Sadeh and
                 David Wetherall",
  booktitle =    {Financial Cryptography and Data Security},
  publisher =    "Springer",
  year =         "2012",
  pages =        "68--79",
}

@InProceedings{king2013come,
  title =        {``How Come I{\rq}m Allowing Strangers To Go Through
                 My Phone?''---Smartphones and Privacy Expectations},
  author =       "Jennifer King",
  booktitle =    {Symposium on Usable Privacy and Security (SOUPS)},
  year =         "2013",
}

@Article{kirda2013darkdroid,
  title =        {darkdroid-Exposing the dark Side of Malicious Mobile
                 Applications},
  author =       "Engin Kirda",
  journal =      "Mobile Computing",
  year =         "2013",
  pages =        "12",
}

@InProceedings{kivity2014osv,
  title =        {OS}v—Optimizing the Operating System for Virtual
                 Machines",
  author =       "Avi Kivity and Dor Laor and Glauber Costa and Pekka
                 Enberg and Nadav Har’El and Don Marti and Vlad
                 Zolotarov",
  booktitle =    "Proceedings of the 2014 USENIX conference on USENIX
                 Annual Technical Conference",
  year =         "2014",
  pages =        "61--72",
}

@InProceedings{kluge2014operating,
  title =        "An operating system for safety-critical applications
                 on manycore processors",
  author =       "Florian Kluge and Mike Gerdes and Theo Ungerer",
  booktitle =    "Object/Component/Service-Oriented Real-Time
                 Distributed Computing (ISORC), 2014 IEEE 17th
                 International Symposium on",
  year =         "2014",
  organization = "IEEE",
  pages =        "238--245",
}

@InProceedings{kono2014,
  title =        "FoxyFeed: Forging Device-Level Asynchronous Events for
                 Kernel Development",
  author =       "Kenji Kono and Shunsuke Miyahara and Hiroshi Yamada
                 and Takeshi Yoshimura",
  booktitle =    "Dependable Computing (PRDC), 2014 IEEE 20th Pacific
                 Rim International Symposium on",
  year =         "2014",
  organization = "IEEE",
  pages =        "145--154",
  annotate =     "Enhancing source code quality of operating systems
                 (OSes) is an essential and endless task in communities
                 of commodity OSes. Unfortunately, improving the quality
                 of the kernel code is not trivial because the kernel is
                 large and complex. In particular, asynchronous events
                 from peripheral devices such as interrupts make the
                 improvement quite hard due to their low
                 reproducibility. This paper presents Foxy Feed, a
                 mechanism based on virtual machine monitors that helps
                 to fix bugs caused by asynchronous device-level events.
                 Foxy Feed forges device-level events and injects them
                 to a debuggee kernel at the timing specified in
                 advance, and allows us to control the timing at which
                 asynchronous events occur for the debugging purpose.
                 Using our prototype implementation of Foxy Feed, which
                 is based on Xen 4.1.0, we demonstrate that Foxy Feed
                 reproduces failures caused by device-triggered bugs in
                 Linux and gives significant clues to the root causes.",
}

@Article{polla2013,
  title =        "A Survey on Security for Mobile Devices",
  author =       "Mariantonietta La Polla and Fabio Martinelli and
                 Daniele Sgandurra",
  journal =      "Communications Surveys \& Tutorials, IEEE",
  year =         "2013",
  note =         {\url{http://web.cs.wpi.edu/~rek/Adv_Nets/Papers/MobileSecurity.pdf}},
  number =       "1",
  pages =        "446--471",
  volume =       "15",
  publisher =    "IEEE",
}

@InProceedings{lalande2013,
  title =        "Hiding Privacy Leaks in {Android} Applications Using
                 Low-Attention Raising Covert Channels",
  author =       "Jean-Francois Lalande and Steffen Wendzel",
  booktitle =    "Availability, Reliability and Security (ARES), 2013
                 Eighth International Conference on",
  year =         "2013",
  organization = "IEEE",
  pages =        "701--710",
}

@InProceedings{Morula2014,
  title =        {From {Zygote} to {Morula}: Fortifying Weakened {ASLR}
                 on {Android}},
  author =       "Byoungyoung Lee and Long Lu and Tielei Wang and Taesoo
                 Kim and Wenke Lee",
  booktitle =    "IEEE Symposium on Security and Privacy",
  year =         "2014",
}

@InCollection{lee2014punobot,
  title =        {Punobot: Mobile Botnet Using Push Notification
                 Service in {Android}},
  author =       "Hayoung Lee and Taeho Kang and Sangho Lee and Jong Kim
                 and Yoonho Kim",
  booktitle =    {Information Security Applications},
  publisher =    "Springer",
  year =         "2014",
  pages =        "124--137",
  abstract =     "A botnet is a collection of computers compromised by
                 attackers, which is being increasingly used to advance
                 political or financial interests. Recently, mobile
                 botnets that rely on compromised mobile devices are
                 emerging due to their improvements in computation power
                 and communication capability. To cope with mobile
                 botnets, we need to anticipate and prevent their
                 command and control (C\&C) channels. In this paper, we
                 explore a new C\&C channel for mobile botnets that is
                 based on the push notification service (PNS) of
                 {Android}: Google Cloud Messaging for {Android} (GCM). We
                 find that (1) the registration process of the GCM only
                 checks the validity of Gmail address and (2)
                 applications can hide received push messages from
                 users. By exploiting these two vulnerabilities, we
                 evaluate the feasibility of the push notification
                 service-based mobile botnet (Punobot) in several
                 aspects. We show that Punobot is stealthy,
                 energy-efficient, and dangerous. We also recommend
                 remedies that any PNSs should consider to eliminate
                 their security weaknesses.",
}

@PhdThesis{lee2014,
  title =        "Towards a privacy-preserving platform for apps",
  author =       "Sangmin Lee",
  school =       "The University of Texas at Austin",
  year =         "2014",
  month =        "12",
  note =         {\url{http://repositories.lib.utexas.edu/bitstream/handle/2152/28360/LEE-DISSERTATION-2014.pdf?sequence=1},
  OPTannote =    "In this dissertation, we present two app platform
                 designs, piBox and CleanRoom, that strike a useful
                 balance between users’ privacy and apps’ functional
                 needs, thus shifting much of the responsibility for
                 protecting privacy from the app and its users to the
                 platform itself. ...",
}

@InProceedings{li2014minibox,
  title =        "MiniBox: {A} two-way sandbox for x86 native code",
  author =       "Yanlin Li and JM McCune and James Newsome and Adrian
                 Perrig and Brandon Baker and Will Drewry",
  booktitle =    "2014 USENIX Annual Technical Conference",
  year =         "2014",
  note =         {\url{https://www.usenix.org/system/files/conference/atc14/atc14-paper-li_yanlin.pdf}},
  abstract =     "To prevent Iago attacks caused by mmap or sysbrk, the
                 hypervisor checks that the newly ... to be mapped as
                 executable, as this represents a significant increase
                 in attack surface. ... in network I/O. In the MIEE, the
                 supported thread synchro- nization system calls include
                 semaphores Yanlin Li, CyLab/Carnegie Mellon University;
                 Jonathan McCune and James Newsome, CyLab/Carnegie
                 Mellon University and Google, Inc.; Adrian Perrig,
                 CyLab/Carnegie Mellon University; Brandon Baker and
                 Will Drewry, Google, Inc.",
}

@InProceedings{liang2013sound,
  title =        {Sound and precise malware analysis for {Android} via
                 pushdown reachability and entry-point saturation},
  author =       "Shuying Liang and Andrew W Keep and Matthew Might and
                 Steven Lyde and Thomas Gilray and Petey Aldous and
                 David {Van Horn},
  booktitle =    {Proceedings of the Third ACM workshop on Security and
                 privacy in smartphones \& mobile devices},
  year =         "2013",
  organization = "ACM",
  pages =        "21--32",
}

@InProceedings{liebergeld2013nomadic,
  title =        "Nomadic honeypots: {A} novel concept for smartphone
                 honeypots",
  author =       "Steffen Liebergeld and Matthias Lange and Collin
                 Mulliner",
  booktitle =    "Proceedings of W’shop on mobile security
                 technologies (MoST’13), in conjunction with the 34th
                 IEEE symposium on security and privacy, accepted for
                 publication",
  year =         "2013",
}

@InProceedings{liu2011cloud,
  title =        "Cloud mapreduce: {A} mapreduce implementation on top
                 of a cloud operating system",
  author =       "Huan Liu and Dan Orban",
  booktitle =    "Proceedings of the 2011 11th IEEE/ACM International
                 Symposium on Cluster, Cloud and Grid Computing",
  year =         "2011",
  organization = "IEEE Computer Society",
  pages =        "464--474",
}

@Book{love2010linux,
  title =        {Linux {Kernel} Development},
  author =       "Robert Love",
  publisher =    "Pearson Education",
  year =         "2010",
}

@Article{lu2014study,
  title =        "A study of Linux file system evolution",
  author =       "Lanyue Lu and Andrea C Arpaci-Dusseau and Remzi H
                 Arpaci-Dusseau and Shan Lu",
  journal =      "ACM Transactions on Storage (TOS)",
  year =         "2014",
  number =       "1",
  pages =        "3",
  volume =       "10",
  publisher =    "ACM",
}

@InProceedings{Davi2013,
  title =        {Gadge Me If You Can - Secure and Efficient Ad-hoc
                 Instruction-Level Randomization for x86 and ARM},
  author =       "Ahmad-Reza Sadeghi {Lucas Davi, Alexandra Dmitrienko,
                 Stefan Nürnberger},
  booktitle =    "8th ACM Symposium on Information, Computer and
                 Communications Security (ASIACCS 2013)",
  year =         "2013",
  note =         {\url{http://www.icri-sc.org/fileadmin/user_upload/Group_TRUST/PubsPDF/xifer-fullpaper.pdf}},
  annote =       "Abstract: Code reuse attacks such as return-oriented
                 programming are one of the most powerful threats to
                 contemporary software. ASLR was introduced to impede
                 these attacks by dispersing shared libraries and the
                 executable in memory. However, in practice its entropy
                 is rather low and, more importantly, the leakage of a
                 single address reveals the position of a whole library
                 in memory. The recent mitigation literature followed
                 the route of randomization, applied it at different
                 stages such as source code or the executable binary.
                 However, the code segments still stay in one block. In
                 contrast to previous work, our randomization solution,
                 called XIFER, (1) disperses all code (executable and
                 libraries) across the whole address space, (2)
                 re-randomizes the address space for each run, (3) is
                 compatible to code signing, and (4) does neither
                 require offline static analysis nor source-code. Our
                 prototype implementation supports the Linux ELF file
                 format and covers both mainstream processor
                 architectures x86 and ARM. Our evaluation demonstrates
                 that XIFER performs efficiently at load- and during
                 run-time (1.2\% overhead).",
}

@PhdThesis{ma2013,
  title =        {{Android} Application Install-time Permission
                 Validation and Run-time Malicious Pattern Detection},
  author =       "Zhongmin Ma",
  school =       "Virginia Polytechnic Institute and State University",
  year =         "2013",
}

@Article{madhavapeddy2014unikernels,
  title =        "Unikernels: the rise of the virtual library operating
                 system",
  author =       "Anil Madhavapeddy and David J Scott",
  journal =      "Communications of the ACM",
  year =         "2014",
  number =       "1",
  pages =        "61--69",
  volume =       "57",
  publisher =    "ACM",
}

@InProceedings{Malka:2015,
  title =        "r{IOMMU}: Efficient {IOMMU} for {I}/{O} Devices That
                 Employ Ring Buffers",
  author =       "Moshe Malka and Nadav Amit and Muli Ben-Yehuda and Dan
                 Tsafrir",
  booktitle =    "Proceedings of the Twentieth International Conference
                 on Architectural Support for Programming Languages and
                 Operating Systems",
  year =         "2015",
  address =      "New York, NY, USA",
  pages =        "355--368",
  publisher =    "ACM",
  series =       "ASPLOS '15",
  acmid =        "2694355",
  doi =          "10.1145/2694344.2694355",
  ISBN =         "978-1-4503-2835-7",
  keywords =     "I/O memory management unit",
  location =     "Istanbul, Turkey",
  numpages =     "14",
  URL =          "http://doi.acm.org/10.1145/2694344.2694355",
}

@InCollection{mannan2012mercury,
  title =        "Mercury: Recovering forgotten passwords using personal
                 devices",
  author =       "Mohammad Mannan and David Barrera and Carson D Brown
                 and David Lie and Paul C Van Oorschot",
  booktitle =    "Financial Cryptography and Data Security",
  publisher =    "Springer",
  year =         "2012",
  note =         {\url{http://elibrary.palcomtech.ac.id/wp-content/uploads/Financial-Cryptography-and-Data-Security.pdf}},
  pages =        "315--330",
}

@InProceedings{mannan2011unicorn,
  title =        "Unicorn: two-factor attestation for data security",
  author =       "Mohammad Mannan and Beom Heyn Kim and Afshar Ganjali
                 and David Lie",
  booktitle =    "Proceedings of the 18th ACM conference on Computer and
                 communications security",
  year =         "2011",
  organization = "ACM",
  pages =        "17--28",
}

@InCollection{mannan2007using,
  title =        "Using a personal device to strengthen password
                 authentication from an untrusted computer",
  author =       "Mohammad Mannan and Paul C van Oorschot",
  booktitle =    "Financial Cryptography and Data Security",
  publisher =    "Springer",
  year =         "2007",
  pages =        "88--103",
}

@Article{mannan2012,
  title =        {Passwords for both mobile and desktop computers:
                 {ObPwd} for {Firefox} and {Android}},
  author =       "Mohammad Mannan and PC Van Oorschot",
  journal =      "USENIX; login",
  year =         "2012",
  pages =        "28--37",
  volume =       "37",
  key =          "passwords",
  URL =          "http://users.encs.concordia.ca/~mmannan/publications/obpwd-usenixlogin-authorcopy.pdf",
}

@Article{mannan2012passwords,
  title =        {Passwords for both mobile and desktop computers: ObPwd
                 for Firefox and {Android}},
  author =       "Mohammad Mannan and PC Van Oorschot",
  journal =      "USENIX; login",
  year =         "2012",
  pages =        "28--37",
  volume =       "37",
  key =          "passwords",
  URL =          "http://users.encs.concordia.ca/~mmannan/publications/obpwd-usenixlogin-authorcopy.pdf",
}

@InProceedings{marco2013SAFECOMP,
  title =        "Preventing Memory Errors in Networked Vehicle Services
                 Through Diversification",
  author =       "H{\'e}ctor Marco and Juan-Carlos Ruiz and David De
                 Andr{\'e}s and Ismael Ripoll",
  booktitle =    "SAFECOMP 2013-Workshop CARS (2nd Workshop on Critical
                 Automotive applications: Robustness \& Safety) of the
                 32nd International Conference on Computer Safety,
                 Reliability and Security",
  year =         "2013",
  note =         {\url{https://hal.archives-ouvertes.fr/hal-00848245/document},
  pages =        "NA",
}

@Article{Gisbert2014Linux,
  title =        {On the {Effectiveness} of {Full-ASLR} on 64-bit
                 {Linux}},
  author =       "Hector Marco-Gisbert and Ismael Ripoll",
  year =         "2014",
  note =         {\url{http://cybersecurity.upv.es/attacks/offset2lib/offset2lib-paper.pdf}},
  annote =       "Address-Space Layout Randomization (ASLR) is a
                 technique used to thwart attacks which relies on
                 knowing the location of the target code or data. The
                 effectiveness of ASLR hinges on the entirety of the
                 address space layout remaining unknown to the attacker.
                 Only executables compiled as Position Independent
                 Executable (PIE) can obtain the maximum protection from
                 the ASLR technique since all the sections are loaded at
                 random locations. We have identified a security
                 weakness on the implementation of the ASLR in Linux
                 when the executable is PIE compiled, named offset2lib.
                 A PoC attack is described to illustrate how the
                 offset2lib can be exploited. Our attack bypasses the
                 three most widely adopted and effective protection
                 techniques: No-eXecutable bit (NX), address space
                 layout randomization (ASLR) and stack smashing
                 protector (SSP). A remote shell is got in less than one
                 second. Finally, how the RenewSSP technique can be used
                 as a workaround is discussed and how to remove the
                 offset2lib weakness from the current ASLR
                 implementation is also presented.",
}

@InProceedings{marco2013Canary,
  title =        "Preventing brute force attacks against stack canary
                 protection on networking servers",
  author =       "Hector Marco-Gisbert and Ismael Ripoll",
  booktitle =    "Network Computing and Applications (NCA), 2013 12th
                 IEEE International Symposium on",
  year =         "2013",
  note =         {\url{http://renewssp.com/data/Preventing_brute_force_attacks_against_stack_canary_protection_on_networking_servers-Slides.pdf}},
  organization = "IEEE",
  pages =        "243--250",
}

@InProceedings{Senftleben2014,
  title =        "Mo{P}-2-Mo{P} - Mobile private microblogging",
  author =       "Ahmad-Reza Sadeghi {Marius Senftleben, Mihai Bucicoiu,
                 Erik Tews, Frederik Armknecht, Stefan Katzenbeisser},
  booktitle =    "Book title: Financial Cryptography and Data Security
                 (FC'14)",
  year =         "2014",
  note =         {\url{http://www.icri-sc.org/fileadmin/user_upload/Group_TRUST/PubsPDF/fc14-paper99-final_draft_v3.pdf}},
  annote =       "Abstract: Microblogging services have become popular,
                 especially since smartphones made them easily
                 accessible for common users. However, current services
                 like Twitter rely on a centralized infrastructure,
                 which has serious drawbacks from privacy and
                 reliability perspectives. In this paper, we present a
                 decentralized privacy-preserving microblogging
                 infrastructure based on a distributed peer-to-peer
                 network of mobile users. It is resistant to censorship
                 and provides high availability. Our solution allows
                 secure distribution of encrypted messages over local
                 radio links to physically close peers. When
                 redistributing messages, each peer rerandomizes
                 encryptions to achieve unlinkability. Moreover, we show
                 the feasibility of our solution using diifferent
                 synchronization strategies.",
}

@Article{mashtizadeh2014,
  title =        "Cryptographically enforced control flow integrity",
  author =       "Ali Jose Mashtizadeh and Andrea Bittau and David
                 Mazieres and Dan Boneh",
  journal =      "arXiv preprint arXiv:1408.1451",
  year =         "2014",
  note =         {\url{http://arxiv.org/pdf/1408.1451.pdf}},
  annote =       "Abstract Recent Pwn2Own competitions have demonstrated
                 the continued effectiveness of control hijacking
                 attacks despite deployed countermeasures including
                 stack canaries and ASLR. A powerful defense called
                 Control flow Integrity (CFI) offers a principled
                 approach to preventing such attacks. However, prior CFI
                 implementations use static analysis and must limit
                 protection to remain practical. These limitations have
                 enabled attacks against all known CFI systems, as
                 demonstrated in recent work. This paper presents a
                 cryptographic approach to control flow integrity (CCFI)
                 that is both fine-grain and practical: using message
                 authentication codes (MAC) to protect control flow
                 elements such as return addresses, function pointers,
                 and vtable pointers. MACs on these elements prevent
                 even powerful attackers with random read/ write access
                 to memory from tampering with program control flow. We
                 implemented CCFI in Clang/LLVM, taking advantage of
                 recently available cryptographic CPU instructions. We
                 evaluate our system on several large software packages
                 (including nginx, Apache and memcache) as well as all
                 their dependencies. The cost of protection ranges from
                 a 3–18\% decrease in request rate.",
  institution =  "Stanford Univeristy",
}

@MastersThesis{Yadu2015,
  title =        {{Android} {Binder} in {Scala}},
  author =       "Yadu Kaladharan",
  school =       "Amrita Vishwa Vidyapeetham",
  year =         "2015",
  address =      "Ettimadai, Tamil Nadu 641112, India",
  month =        jun,
  note =         "Advisor: Prabhaker Mateti;
                 \url{http://cecs.wright.edu/~pmateti/Students/index.html},
  keywords =     {Android}, binder, scala",
}

@MastersThesis{Jamsheed2015,
  title =        "Auditing {{Android}} System for Anomalous Behavior",
  author =       "Jamsheed Kamardeen",
  school =       "Amrita Vishwa Vidyapeetham",
  year =         "2015",
  address =      "Ettimadai, Tami Nadu 641112, India",
  month =        jun,
  keywords =     {Android}, security, linux",
  note =         "Advisor: Prabhaker Mateti;
                 \url{http://cecs.wright.edu/~pmateti/Students/index.html},
}

@Unpublished{Mateti2015,
  author =       "Prabhaker Mateti",
  title =        "Rewriting Java and {C}/{C}++ Programs in Scala",
  note =         {\url{http://cecs.wright.edu/~pmateti/PM/pmResearch.html},
  OPTkey =       "",
  OPTmonth =     "",
  year =         "2015",
  annote =       "We have been rewring several existing pieces of Java
                 software in Scala. This report discusses the why and
                 howto, and our experience.",
}

@TechReport{Mateti2015,
  title =        "Design and Development of a new Secure {Android} {ROM},
  author =       "Prabhaker Mateti and Others",
  institution =  "Amrita Viswa Vidyapeetham and Wright State
                 University",
  year =         "2015",
  note =         "Advisor: Prabhaker Mateti",
}

@TechReport{MatetiIMSC2014,
  title =        "Semantics of Programs",
  author =       "Prabhaker Mateti",
  institution =  "Talk delivered at The Institute of Mathematical
                 Sciences, Chennai",
  year =         "2014",
  month =        dec,
  note =         {\url{http://cecs.wright.edu/~pmateti/Talks/Program-Semantics/},
}

@TechReport{MatetiCWP,
  title =        {Rigorous Re-Design of {Knuth's} Solution to the
                 {Common} {Words} {Problem}},
  author =       "Prabhaker Mateti",
  institution =  "Wright State University",
  year =         "1997",
}

@InProceedings{Mateti1991,
  title =        "Towards Precision Design and Construction of
                 Software",
  author =       "Prabhaker Mateti",
  booktitle =    "International Software Quality Conference",
  year =         "1991",
  month =        oct,
  pages =        "50--55",
}

@Book{mckusick2014design,
  title =        "The design and implementation of the Free{BSD}
                 operating system",
  author =       "Marshall Kirk McKusick and George V Neville-Neil and
                 Robert NM Watson",
  publisher =    "Pearson Education",
  year =         "2014",
}

@Article{LFO-Cloud2009,
  title =        "Linux: The Operating System of the Cloud",
  author =       "Amanda McPherson",
  journal =      {\url{https://www.linuxfoundation.org/},
  year =         "2009",
  note =         {\url{https://www.linuxfoundation.org/sites/main/files/publications/linuxincloud.html},
}

@InProceedings{mulliner2011sms,
  title =        {SMS} of Death: From Analyzing to Attacking Mobile
                 Phones on a Large Scale.",
  author =       "Collin Mulliner and Nico Golde and Jean-Pierre
                 Seifert",
  booktitle =    "USENIX Security Symposium",
  year =         "2011",
}

@InProceedings{mulliner2014virtualswindle,
  title =        "VirtualSwindle: an automated attack against in-app
                 billing on {Android},
  author =       "Collin Mulliner and William Robertson and Engin
                 Kirda",
  booktitle =    "Proceedings of the 9th ACM symposium on Information,
                 computer and communications security",
  year =         "2014",
  organization = "ACM",
  pages =        "459--470",
}

@InProceedings{muniswamy2006provenance,
  title =        "Provenance-Aware Storage Systems.",
  author =       "Kiran-Kumar Muniswamy-Reddy and David A Holland and
                 Uri Braun and Margo I Seltzer",
  booktitle =    "USENIX Annual Technical Conference, General Track",
  year =         "2006",
  note =         {\url{https://www.usenix.org/legacy/event/usenix06/tech/full_papers/muniswamy-reddy/muniswamy-reddy.pdf}},
  pages =        "43--56",
}

@Article{mylonas2013delegate,
  title =        {Delegate the smartphone user? Security awareness in
                 smartphone platforms},
  author =       "Alexios Mylonas and Anastasia Kastania and Dimitris
                 Gritzalis",
  journal =      "Computers \& Security",
  year =         "2013",
  pages =        "47--66",
  volume =       "34",
  publisher =    "Elsevier",
}

@Article{mylonas2013smartphone,
  title =        "Smartphone sensor data as digital evidence",
  author =       "Alexios Mylonas and Vasilis Meletiadis and Lilian
                 Mitrou and Dimitris Gritzalis",
  journal =      "Computers \& Security",
  year =         "2013",
  pages =        "51--75",
  volume =       "38",
  publisher =    "Elsevier",
}

@Article{mylonas2013assessing,
  title =        {Assessing privacy risks in {Android}: A user-centric
                 approach},
  author =       "Alexios Mylonas and Marianthi Theoharidou and Dimitris
                 Gritzalis",
  year =         "2013",
}

@MastersThesis{Sreenitha2015,
  title =        {SMS}cala: Secure {{Android}} {ServiceManager} Component
                 in {Scala},
  author =       "Sreenitha Narayanan",
  school =       "Amrita Vishwa Vidyapeetham",
  year =         "2015",
  address =      "Ettimadai, Tamil Nadu 641112, India",
  month =        jun,
  note =         "Advisor: Prabhaker Mateti;
                 \url{http://cecs.wright.edu/~pmateti/Students/index.html},
  keywords =     {Android}, Servicemanager, scala",
}

@InProceedings{oberheide2010,
  title =        "When mobile is harder than fixed (and vice versa):
                 demystifying security challenges in mobile
                 environments",
  author =       "Jon Oberheide and Farnam Jahanian",
  booktitle =    "Proceedings of the Eleventh Workshop on Mobile
                 Computing Systems \& Applications",
  year =         "2010",
  organization = "ACM",
  pages =        "43--48",
}

@TechReport{odersky2004,
  title =        "An Overview of the Scala Programming Language",
  author =       "Martin Odersky and Philippe Altherr and Vincent Cremet
                 and Burak Emir and Sebastian Maneth and St{\'e}phane
                 Micheloud and Nikolay Mihaylov and Michel Schinz and
                 Erik Stenman and Matthias Zenger",
  year =         "2004",
}

@InProceedings{Othman:2014:THR:2557977.2557990,
  title =        {Transforming High-level Requirements to Executable
                 Policies for {Android}},
  author =       "Abu Talib Othman and Mohammad Nauman and Shahrulniza
                 Musa and Sohail Khan",
  booktitle =    {Proceedings of the 8th International Conference on
                 Ubiquitous Information Management and Communication},
  year =         "2014",
  address =      "New York, NY, USA",
  pages =        "112:1--112:8",
  publisher =    "ACM",
  series =       {ICUIMC '14},
  acmid =        "2557990",
  articleno =    "112",
  doi =          "10.1145/2557977.2557990",
  ISBN =         "978-1-4503-2644-5",
  keywords =     {Android}; authorization; mobile platforms; privacy",
  location =     "Siem Reap, Cambodia",
  numpages =     "8",
  URL =          "http://doi.acm.org/10.1145/2557977.2557990",
}

@InProceedings{pan2014,
  title =        "Defensor: Lightweight and Efficient Security-Enhanced
                 Framework for {Android},
  author =       "Xuerui Pan and Yibing Zhongyang and Zhi Xin and Bing
                 Mao and Hao Huang",
  booktitle =    "Trust, Security and Privacy in Computing and
                 Communications (TrustCom), 2014 IEEE 13th International
                 Conference on",
  year =         "2014",
  organization = "IEEE",
  pages =        "260--267",
}

@InProceedings{pandita2013whyper,
  title =        {WHYPER: Towards automating risk assessment of mobile
                 applications},
  author =       "Rahul Pandita and Xusheng Xiao and Wei Yang and
                 William Enck and Tao Xie",
  booktitle =    {Presented as part of the 22nd USENIX Security
                 Symposium},
  year =         "2013",
  organization = "USENIX",
  pages =        "527--542",
}

@InProceedings{parker2014file,
  title =        "A File By Any Other Name: Managing File Names with
                 Metadata",
  author =       "Aleatha Parker-Wood and Darrell DE Long and Ethan
                 Miller and Philippe Rigaux and Andy Isaacson",
  booktitle =    "Proceedings of International Conference on Systems and
                 Storage",
  year =         "2014",
  note =         {\url{http://www.ssrc.ucsc.edu/Papers/parkerwood-systor14.pdf}},
  organization = "ACM",
  pages =        "1--11",
  abstract =     "File names are one of the earliest computing
                 abstractions, a string of characters to uniquely
                 identify a file for the system, and to help users
                 remember the contents when they look for it later. They
                 are also a rich source of semantic metadata about
                 files. However, this metadata is unstructured and
                 opaque to the rest of the system. As a result, metadata
                 in file names is often error-prone, and hard to search
                 for. File names can and should be more meaningful and
                 reliable, while simplifying application design and
                 encouraging users and applications to provide more
                 metadata for search. We describe a POSIX compliant
                 prototype file system, TrueNames, which demonstrates an
                 alternate approach to naming and metadata, called
                 metadata aware naming. TrueNames separates the task of
                 uniquely identifying a file from the task of helping
                 the user remember its contents. It captures metadata in
                 a structured format for later indexing, and uses it to
                 generate file names which are correct, regenerable, and
                 disambiguatable by design. TrueNames simplifies
                 application design by providing a consistent interface
                 for metadata aware naming, incurs a low overhead of
                 approximately 15\% under realistic workloads, and can
                 simplify a wide variety of data management tasks for
                 both applications and users.",
}

@InProceedings{EuroSys2014,
  author =       "Vijay Varadharajan {Patrick Koeberl, Steffen Schulz,
                 Ahmad-Reza Sadeghi},
  booktitle =    "European Conference on Computer Systems (EuroSys)",
  year =         "2014",
  address =      "Amsterdam, Netherlands",
}

@PhdThesis{Vipin2020,
  title =        "Mobile Device {OS} Design for Implementation in
                 Strongly Typed Languages",
  author =       "Vipin Pavithran",
  school =       "Amrita Vishwa Vidyapeetham",
  year =         "202x expected",
}

@Misc{PAX-2013,
  title =        "20 years of {PaX},
  author =       "PaX",
  note =         {\url{https://pax.grsecurity.net/docs/PaXTeam-SSTIC12-keynote-20-years-of-PaX.pdf}},
  year =         "2013",
  publisher =    "SSTIC",
}

@InProceedings{payet2014operational,
  title =        "An Operational Semantics for {{Android}} Activities",
  author =       "Etienne Payet and Fausto Spoto",
  booktitle =    "Proceedings of the ACM SIGPLAN 2014 workshop on
                 Partial evaluation and program manipulation",
  year =         "2014",
  organization = "ACM",
  pages =        "121--132",
}

@InProceedings{Arrakis2014,
  title =        "Arrakis: The Operating System is the Control Plane",
  author =       "Simon Peter and Jialin Li and Irene Zhang and Dan R.
                 K. Ports and Doug Woos and Arvind Krishnamurthy and
                 Thomas Anderson and Timothy Roscoe",
  booktitle =    "11th USENIX Symposium on Operating Systems Design and
                 Implementation (OSDI 14)",
  year =         "2014",
  address =      "Broomfield, CO",
  month =        Oct,
  note =         {\url{https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-peter_simon.pdf}},
  pages =        "1--16",
  publisher =    "USENIX Association",
  ISBN =         "978-1-931971-16-4",
  URL =          "https://www.usenix.org/conference/osdi14/technical-sessions/presentation/peter",
}

@Misc{pham2014auditing,
  title =        "Auditing and Maintaining Provenance in Software
                 Packages",
  author =       "Quan Pham and Tanu Malik and Ian Foster",
  note =         {\url{http://people.cs.uchicago.edu/~quanpt/sole/qpham_ipaw14.pdf}},
  year =         "2014",
  publisher =    "IPAW",
}

@Book{pino2014network,
  title =        "Network Science and Cybersecurity",
  author =       "Robinson E Pino",
  publisher =    "Springer",
  year =         "2014",
}

@InProceedings{pinto2014,
  title =        "Towards a lightweight embedded virtualization
                 architecture exploiting {ARM} TrustZone",
  author =       "Sandro Pinto and Daniel Oliveira and Jorge Pereira and
                 Nuno Cardoso and Mongkol Ekpanyapong and Jorge Cabral
                 and Adriano Tavares",
  booktitle =    "Emerging Technology and Factory Automation (ETFA),
                 2014 IEEE",
  year =         "2014",
  note =         {\url{http://www.researchgate.net/profile/Sandro_Pinto2/publication/266141329_Towards_a_Lightweight_Embedded_Virtualization_Architecture_Exploiting_ARM_TrustZone/links/54301f9d0cf27e39fa9cc92e.pdf}},
  organization = "IEEE",
  pages =        "1--4",
}

@Article{poeplau2014,
  title =        "Execute This! Analyzing Unsafe and Malicious Dynamic
                 Code Loading in {Android} Applications",
  author =       "Sebastian Poeplau and Yanick Fratantonio and Antonio
                 Bianchi and Christopher Kruegel and Giovanni Vigna",
  year =         "2014",
}

@Article{rangwala2014taxonomy,
  title =        "A taxonomy of privilege escalation attacks in {Android}
                 applications",
  author =       "Mohammed Rangwala and Ping Zhang and Xukai Zou and
                 Feng Li",
  journal =      "International Journal of Security and Networks",
  year =         "2014",
  note =         {\url{http://cs.iupui.edu/~xkzou/teaching/csci590-adv/SampleSurvey/IJSN},
  number =       "1",
  pages =        "40--55",
  volume =       "9",
  publisher =    "Inderscience",
}

@PhdThesis{raza2013IOT,
  title =        {Lightweight Security Solutions for the Internet of
                 Things},
  author =       "Shahid Raza",
  school =       "Swedish Institute of Computer Science, M{\"a}lardalen
                 University, Kista Stockholm, Sweden",
  year =         "2013",
  abstract =     "The future Internet will be an IPv6 network
                 interconnecting traditional computers and a large
                 number of smart object or networks such as Wireless
                 Sensor Networks (WSNs). This Internet of Things (IoT)
                 will be the foundation of many services and our daily
                 life will depend on its availability and reliable
                 operations. Therefore, among many other issues, the
                 challenge of implementing secure communication in the
                 IoT must be addressed. The traditional Internet has
                 established and tested ways of securing networks. The
                 IoT is a hybrid network of the Internet and
                 resource-constrained networks, and it is therefore
                 reasonable to explore the options of using security
                 mechanisms standardized for the Internet in the IoT.
                 The IoT requires multi-facet security solutions where
                 the communication is secured with confidentiality,
                 integrity, and authentication services; the network is
                 protected against intrusions and disruptions; and the
                 data inside a sensor node is stored in an encrypted
                 form. Using standardized mechanisms, communication in
                 the IoT can be secured at different layers: at the link
                 layer with IEEE 802.15.4 security, at the network layer
                 with IP security (IPsec), and at the transport layer
                 with Datagram Transport Layer Security (DTLS). Even
                 when the IoT is secured with encryption and
                 authentication, sensor nodes are exposed to wireless
                 attacks both from inside the WSN and from the Internet.
                 Hence an Intrusion Detection System (IDS) and firewalls
                 are needed. Since the nodes inside WSNs can be captured
                 and cloned, protection of stored data is also
                 important. This thesis has three main contributions.
                 (i) It enables secure communication in the IoT using
                 lightweight compressed yet standard compliant IPsec,
                 DTLS, and IEEE 802.15.4 link layer security; and it
                 discusses the pros and cons of each of these solutions.
                 The proposed security solutions are implemented and
                 evaluated in an IoT setup on real hardware. (ii) This
                 thesis also presents the design, implementation, and
                 evaluation of a novel IDS for the IoT. (iii) Last but
                 not least, it also provides mechanisms to protect data
                 inside constrained nodes. The experimental evaluation
                 of the different solutions shows that the
                 resource-constrained devices in the IoT can be secured
                 with IPsec, DTLS, and 802.15.4 security; can be
                 efficiently protected against intrusions; and the
                 proposed combined secure storage and communication
                 mechanisms can significantly reduce the
                 security-related operations and energy consumption.",
  URL =          "http://mdh.diva-portal.org/smash/get/diva2:619066/FULLTEXT02",
}

@Article{reina2013system,
  title =        "A system call-centric analysis and stimulation
                 technique to automatically reconstruct {Android} malware
                 behaviors",
  author =       "Alessandro Reina and Aristide Fattori and Lorenzo
                 Cavallaro",
  journal =      "EuroSec, April",
  year =         "2013",
}

@Article{rosen2014linux,
  title =        "Linux containers and the future cloud",
  author =       "Rami Rosen",
  journal =      "Linux J",
  year =         "2014",
  note =         "slides
                 \url{http://haifux.org/lectures/320/netLec8_final.pdf}},
  volume =       "240",
  abstract =     "Three system calls are used for namespaces: clone() -
                 creates a new process and a new namespace; the process
                 is ...",
}

@InProceedings{rosen2013appprofiler,
  title =        {Appprofiler: a flexible method of exposing
                 privacy-related behavior in {Android} applications to end
                 users},
  author =       "Sanae Rosen and Zhiyun Qian and Z Morely Mao",
  booktitle =    {Proceedings of the third ACM conference on Data and
                 application security and privacy},
  year =         "2013",
  organization = "ACM",
  pages =        "221--232",
}

@Article{roussev2014,
  title =        "Image-based kernel fingerprinting",
  author =       "Vassil Roussev and Irfan Ahmed and Thomas Sires",
  journal =      "Digital Investigation",
  year =         "2014",
  pages =        "S13--S21",
  volume =       "11",
  publisher =    "Elsevier",
}

@InProceedings{Russello2013,
  title =        {FireDroid: Hardening Security in Almost-stock
                 {Android}},
  author =       "Giovanni Russello and Arturo Blas Jimenez and Habib
                 Naderi and Wannes van der Mark",
  booktitle =    "Proceedings of the 29th Annual Computer Security
                 Applications Conference",
  year =         "2013",
  address =      "New York, NY, USA",
  pages =        "319--328",
  publisher =    "ACM",
  series =       {ACSAC '13},
  acmid =        "2523678",
  doi =          "10.1145/2523649.2523678",
  ISBN =         "978-1-4503-2015-3",
  keywords =     {Android} security enhancement; policy-based security;
                 system call interposition",
  location =     "New Orleans, Louisiana",
  numpages =     "10",
  URL =          "http://doi.acm.org/10.1145/2523649.2523678",
}

@Article{sae2014,
  title =        "Multitouch Gesture-Based Authentication.",
  author =       "Napa Sae-Bae and Nasir Memon and Katherine Isbister
                 and Kowsar Ahmed",
  journal =      "IEEE Transactions on Information Forensics and
                 Security",
  year =         "2014",
  note =         {\url{http://www.hades.in/BasePapers/Embedded/Transaction/Gesture/HEM
                 (87).pdf}},
  number =       "4",
  pages =        "568--582",
  volume =       "9",
}

@MastersThesis{Asish2015,
  title =        "System Call Additions and Deletions in {{Android}},
  author =       "Asish K Sahadevan",
  school =       "Amrita Vishwa Vidyapeetham",
  year =         "2015",
  address =      "Ettimadai, Tamil Nadu 641112, India",
  month =        jun,
  note =         "Advisor: Prabhaker Mateti",
  key =          {Android}, system calls, kernel, security",
}

@Article{Droidtrack2014,
  title =        {DroidTrack: Tracking and Visualizing Information
                 Diffusion for Preventing Information Leakage on
                 {Android}},
  author =       "Shunya Sakamoto and Kenji Okuda and Ryo Nakatsuka and
                 Toshihiro Yamauchi",
  journal =      "Journal of Internet Services and Information Security
                 (JISIS)",
  year =         "2014",
  number =       "2",
  pages =        "55--69",
  volume =       "4",
}

@InCollection{Droidtrack2013,
  title =        {DroidTrack: Tracking Information Diffusion and
                 Preventing Information Leakage on {Android}},
  author =       "Syunya Sakamoto and Kenji Okuda and Ryo Nakatsuka and
                 Toshihiro Yamauchi",
  booktitle =    {Multimedia and Ubiquitous Engineering},
  publisher =    "Springer",
  year =         "2013",
  pages =        "243--251",
}

@Article{Apset2014,
  title =        {APSET}, an {Android} aPplication {SE}curity Testing
                 tool for detecting intent-based vulnerabilities",
  author =       "S{\'e}bastien Salva and Stassia R Zafimiharisoa",
  journal =      "International Journal on Software Tools for Technology
                 Transfer",
  year =         "2014",
  note =         {\url{http://link.springer.com/article/10.1007/s10009-014-0303-8/fulltext.html},
  pages =        "1--21",
  annote =       "Abstract The {Android} messaging system, called intent,
                 is a mechanism that ties components together to build
                 applications for smartphones. Intents are kinds of
                 messages composed of actions and data, sent by a
                 component to another component to perform several
                 operations, e.g. launching a user interface. The intent
                 mechanism offers a lot of flexibility for developing
                 {Android} applications, but it might also be used as an
                 entry point for security attacks. The latter can be
                 easily sent with intents to components, that can
                 indirectly forward attacks to other components and so
                 on. In this context, this paper proposes APSET, a tool
                 for {Android} aPplication SEcurity Testing, which aims at
                 detecting intent-based vulnerabilities. It takes as
                 inputs {Android} applications and intent-based
                 vulnerabilities formally expressed with models called
                 vulnerability patterns. Then, and this is the
                 originality of our approach, class diagrams and partial
                 specifications are automatically generated from
                 applications with algorithms reflecting some knowledge
                 of the {Android} documentation. These partial
                 specifications avoid false positives and refine the
                 test result with special verdicts notifying that a
                 component is not compliant to its specification.
                 Furthermore, we propose a test case execution framework
                 which supports the receipt of any exception, the
                 detection of application crashes, and provides a final
                 XML test report detailing the test case verdicts. The
                 vulnerability detection effectiveness of APSET is
                 evaluated with experimentations on randomly chosen
                 {Android} applications of the {Android} Market.",
  publisher =    "Springer",
}

@Article{MAMA2013,
  title =        {MAMA: Manifest Analysis for Malware Detection in
                 {Android}},
  author =       "Borja Sanz and Igor Santos and Carlos Laorden and
                 Xabier Ugarte-Pedrero and Javier Nieves and Pablo G
                 Bringas and Gonzalo {{\'A}lvarez Mara{\~n}{\'o}n},
  journal =      "Cybernetics and Systems",
  year =         "2013",
  number =       "6-7",
  pages =        "469--488",
  volume =       "44",
  publisher =    "Taylor \& Francis",
}

@InProceedings{Kynoid2012,
  title =        {{Kynoid}: Real-Time Enforcement of Fine-Grained,
                 User-Defined, and Data-Centric Security Policies for
                 {Android}.},
  author =       "Daniel Schreckling and Joachim Posegga and Johannes
                 K{\"o}stler and Matthias Schaff",
  booktitle =    "WISTP",
  year =         "2012",
  editor =       "Ioannis G. Askoxylakis and Henrich Christopher
                 P{\"o}hls and Joachim Posegga",
  note =         {\url{http://dblp.uni-trier.de/db/conf/wistp/wistp2012.html},
  pages =        "208--223",
  publisher =    "Springer",
  series =       {Lecture Notes in Computer Science},
  volume =       "7322",
  ee =           "http://dx.doi.org/10.1007/978-3-642-30955-7_18",
  ISBN =         "978-3-642-30954-0",
}

@MastersThesis{Schreiber2011,
  title =        {Android} Binder",
  author =       "Thorsten Schreiber",
  school =       "Ruhr University, Bochum, Germany",
  address =      "http://www.ruhr-uni-bochum.de/",
  month =        oct,
  note =         {\url{http://www.nds.rub.de/media/attachments/files/2012/03/binder.pdf}},
  year =         "2011",
  annote =       "Advisors: Juraj Somorovsky, Daniel Bußmeyer. 34 pp. A
                 more general work, but good for an overview of
                 Binder.",
}

@InProceedings{shacham2004,
  title =        "On the effectiveness of address-space randomization",
  author =       "Hovav Shacham and Matthew Page and Ben Pfaff and
                 Eu-Jin Goh and Nagendra Modadugu and Dan Boneh",
  booktitle =    "Proceedings of the 11th ACM conference on Computer and
                 communications security",
  year =         "2004",
  organization = "ACM",
  pages =        "298--307",
  note =         {\url{http://www.hovav.net/dist/asrandom.pdf}},
}

@Article{shaerpour2013trends,
  title =        {Trends in {Android} Malware Detection.},
  author =       "Kaveh Shaerpour and Ali Dehghantanha and Ramlan
                 Mahmod",
  journal =      "Journal of Digital Forensics, Security \& Law",
  year =         "2013",
  number =       "3",
  volume =       "8",
}

@Article{IdentiDroid2014,
  title =        "IdentiDroid: {Android} Can Finally Wear Its Anonymous
                 Suit",
  author =       "Bilal Shebaro and Oyindamola Oluwatimi and Daniele
                 Midi and Elisa Bertino",
  journal =      "Trans. Data Privacy",
  year =         "2014",
  month =        apr,
  number =       "1",
  pages =        "27--50",
  volume =       "7",
  abstract =     "very often applications require device services and
                 information that go beyond the capabilities of
                 anonymous networks in protecting users' identity and
                 privacy. In this paper, we propose two solutions that
                 address this problem. The first solution is based on an
                 approach that shadows user and application data, device
                 information, and resources that can reveal the user
                 identity. Data shadowing is executed when the
                 smartphone switches to the 'anonymous modality'. Once
                 the smartphone returns to work in the normal i.e.
                 non-anonymous modality, application data, device
                 information and resources are returned back to the
                 state they had before the anonymous connection. The
                 second solution is based on run-time modifications of
                 {Android} application permissions. Permissions associated
                 with sensitive information are dynamically revoked at
                 run-time from applications when the smartphone is used
                 under the anonymous modality. They are re-instated back
                 when the smartphone returns to work in the normal
                 modality. In addition, both solutions offer protection
                 from applications that identify their users through
                 traces left in the application's data storage or
                 through exchanging identifying data messages. We
                 developed IdentiDroid, a customized {Android} operating
                 system, to deploy these solutions and built IdentiDroid
                 Profile Manager, a profile-based configuration tool
                 that allows one to set different configurations for
                 each installed {Android} application. With this tool,
                 applications running within the same device are
                 configured to be given different identifications and
                 privileges to limit the uniqueness of device and user
                 information. We analyzed 250 {Android} applications to
                 determine what information, services, and permissions
                 can identify users and devices. Our experiments show
                 that when IdentiDroid is deployed and properly
                 configured on {Android} devices, users' anonymity is
                 better guaranteed by either of the proposed solutions
                 with no significant impact on most device
                 applications.",
  acmid =        "2612165",
  address =      "Catalonia, Spain",
  ISSN =         "1888-5063",
  issue_date =   "April 2014",
  numpages =     "24",
  publisher =    "IIIA-CSIC",
  tags =         "privacy",
  URL =          "http://dl.acm.org/citation.cfm?id=2612163.2612165",
}

@InProceedings{shen2013,
  title =        {A Secure Play Store for {Android}},
  author =       "Feng Shen",
  booktitle =    "Proceedings of the 2013 companion publication for
                 conference on Systems, Programming, \& Applications:
                 Software for Humanity",
  year =         "2013",
  organization = "ACM",
  pages =        "57--60",
}

@MastersThesis{Priyanka2015,
  title =        {Enhancing the Security of {Zygote}/{Morula} in
                 {{Android}} {Lollipop}},
  author =       "Priyanka Shetti",
  school =       "Amrita Vishwa Vidyapeetham",
  year =         "2015",
  address =      "Ettimadai, Tamil Nadu 641112, India",
  month =        jun,
  keywords =     {Android}, zygote, security, ASLR, morula, scala",
  note =         "Advisor: Prabhaker Mateti;
                 \url{http://cecs.wright.edu/~pmateti/Students/index.html},
}

@Article{shewale2014,
  title =        "Analysis of {Android} Vulnerabilities and Modern
                 Exploitation Techniques",
  author =       "Himanshu Shewale and Sameer Patil and Vaibhav Deshmukh
                 and Pragya Singh",
  journal =      "ICTACT Journal on Communication Technology",
  year =         "2014",
  note =         {\url{http://ictactjournals.in/paper/IJCT_Paper_1_863_to_867.pdf}},
  number =       "1",
  volume =       "5",
  annote =       "Is this journal listed in Scopus?",
}

@TechReport{simmhan2005,
  title =        "A Survey of Data Provenance Techniques",
  author =       "Yogesh L Simmhan and Beth Plale and Dennis Gannon",
  institution =  "Computer Science Department, Indiana University,
                 Bloomington IN",
  year =         "2005",
  note =         {\url{http://www.cs.indiana.edu/pub/techreports/TR618.pdf}},
  volume =       "47405",
}

@InProceedings{do2014,
  title =        "Enhancing User Privacy on {Android} Mobile Devices via
                 Permissions Removal",
  author =       "Quang Do and Ben Martini and Kim-Kwang Raymond Choo",
  booktitle =    "System Sciences (HICSS), 2014 47th Hawaii
                 International Conference on",
  pages =        "5070--5079",
  year =         "2014",
  organization = "IEEE",
}

@Article{sunyaev2014,
  title =        "Availability and quality of mobile health app privacy
                 policies",
  author =       "Ali Sunyaev and Tobias Dehling and Patrick L Taylor
                 and Kenneth D Mandl",
  journal =      "Journal of the American Medical Informatics
                 Association",
  pages =        "0--0",
  year =         "2014",
  publisher =    "The Oxford University Press",
}

@Article{skillen2013implementing,
  title =        "On implementing deniable storage encryption for mobile
                 devices",
  author =       "Adam Skillen and Mohammad Mannan",
  year =         "2013",
  note =         {\url{http://spectrum.library.concordia.ca/975074/1/Mobiflage-NDSS13.pdf}},
}

@InProceedings{erturk2012,
  title =        "A case study in open source software security and
                 privacy: {Android} adware",
  author =       "Emre Erturk",
  booktitle =    "Internet Security (WorldCIS), 2012 World Congress on",
  pages =        "189--191",
  year =         "2012",
  organization = "IEEE",
}

@InProceedings{chaudhuri2009,
  title =        {Language-based security on {Android}},
  author =       "Avik Chaudhuri",
  booktitle =    "Proceedings of the ACM SIGPLAN fourth workshop on
                 programming languages and analysis for security",
  pages =        "1--7",
  year =         "2009",
  organization = "ACM",
  annote =       "Abstract In this paper, we initiate a formal study of
                 security on {Android}: Google’s new open-source
                 platform for mobile devices. Specifically, we present a
                 core typed language to describe {Android} applications,
                 and to reason about their data- flow security
                 properties. Our operational semantics and type system
                 provide some necessary foundations to help both users
                 and developers of {Android} applications deal with their
                 security concerns. Categories and Subject Descriptors
                 D.4.6 [Operating Systems]: Security and
                 Protection—Access controls, Verifi- cation; D.3.3
                 [Programming Languages]: Language Constructs and
                 Features—Control constructs General Terms Security,
                 Languages, Verification Keywords data-flow security,
                 hybrid type system, mobile code, certified
                 compilation",
}

@Article{smalley2011,
  title =        {The case for {SE} {Android}},
  author =       "Stephen Smalley",
  journal =      "Linux Security Summit",
  year =         "2011",
}

@InProceedings{smalley2013,
  title =        "Security Enhanced ({SE}) {Android}: Bringing Flexible
                 {MAC} to {Android}.",
  author =       "Stephen Smalley and Robert Craig",
  booktitle =    "20th Annual Network and Distributed System Security
                 Symposium (NDSS'13)",
  year =         "2013",
}

@InProceedings{sokolova2014,
  title =        {Privacy by Design Permission System for Mobile
                 Applications},
  author =       "Karina Sokolova and Marc Lemercier and Jean-Baptiste
                 Boisseau",
  booktitle =    {PATTERNS 2014, The Sixth International Conferences on
                 Pervasive Patterns and Applications},
  year =         "2014",
  pages =        "89--95",
}

@InProceedings{zhauniarovich2015,
  title =        "StaDyn{A}: Addressing the Problem of Dynamic Code
                 Updates in the Security Analysis of {Android}
                 Applications",
  author =       "Yury Zhauniarovich and Maqsood Ahmad and Olga
                 Gadyatskaya and Bruno Crispo and Fabio Massacci",
  booktitle =    "Proceedings of the 5th ACM Conference on Data and
                 Application Security and Privacy",
  pages =        "37--48",
  year =         "2015",
  note =         {\url{http://www.zhauniarovich.com/files/pubs/Stadyna_Zhauniarovich2015.pdf}},
  organization = "ACM",
  annote =       "Yury Zhauniarovich University of Trento Trento, Italy
                 yury.zhauniarovich@unitn.it Maqsood Ahmad University of
                 Trento Trento, Italy maqsood.ahmad@unitn.it Olga
                 Gadyatskaya SnT, University of Luxembourg Luxembourg
                 olga.gadyatskaya@uni.lu Bruno Crispo University of
                 Trento, Italy DistriNet, KU Leuven, Belgium
                 bruno.crispo@unitn.it Fabio Massacci University of
                 Trento Trento, Italy fabio.massacci@unitn.it Abstract
                 Static analysis of {Android} applications can be hindered
                 by the presence of the popular dynamic code update
                 techniques: dynamic class loading and reflection.
                 Recent {Android} malware samples do actually use these
                 mechanisms to conceal their malicious behavior from
                 static analyzers. These techniques defuse even the most
                 recent static analyzers (e.g., [12, 21, 31]) that
                 usually operate under the “closed world” assumption
                 (the targets of reflective calls can be resolved at
                 analysis time; only classes reachable from the class
                 path at analysis time are used at runtime). Our
                 proposed solution allows existing static analyzers to
                 remove this assumption. This is achieved by combining
                 static and dynamic analysis of applications in order to
                 reveal the hidden/updated behavior and extend static
                 analysis results with this information. This paper
                 presents design, implementation and preliminary
                 evaluation results of our solution called StaDynA.",
}

@Article{shahriar2015,
  title =        "Kullback-Leibler Divergence Based Detection of
                 Repackaged {Android} Malware",
  author =       "Hossain Shahriar and Victor Clincy",
  journal =      "Journal of Information Security Research",
  year =         "2015",
  note =         {\url{http://www.dline.info/jisr/fulltext/v6n1/v6n1_1.pdf}},
  annote =       {\url{http://www.dline.info/jisr/index.php} ABSTRACT:
                 {Android} applications are widely used by millions of
                 users to perform many activities. Unfortunately,
                 legitimate and popular applications are targeted by
                 malware authors and they repackage the existing
                 applications by injecting additional code intended to
                 perform malicious activities without the knowledge of
                 end users. Thus, it is important to validate
                 applications for possible repackaging before their
                 installation to safeguard end users. This paper
                 presents the detection of repackaged malware
                 application based on Kullback-Leibler Divergence (KLD)
                 metric. Our approach builds the population distribution
                 of a legitimate and suspected repackaged malware
                 application based on a set of Smali opcode. A high KLD
                 value indicates that an application is dissimilar
                 compared to an original application, hence likely a
                 repackaged application. The approach has been validated
                 based on real-world malware samples and repackaging
                 them to a legitimate application. The results indicate
                 that KLD values remain high for all the malware when
                 repackaged within a legitimate application, and hence
                 can be used as a suitable metric for detection of new
                 malware. Keywords:{Android} Malware, Repackaging,
                 Decompliler, Kullback-leibler Divergence, Smali Opcode,
                 Information Theory; Received: 10 November 2014, Revised
                 13 December 2014, Accepted 18 December 2014",
}

@Article{yerima2015,
  title =        "High Accuracy {Android} Malware Detection Using Ensemble
                 Learning",
  author =       "Suleiman Y Yerima and Sakir Sezer and Igor Muttik",
  journal =      "IET Information Security",
  year =         "2015",
  month =        "4",
  publisher =    "IET",
  note =         {\url{https://www.researchgate.net/profile/Suleiman_Yerima2/publication/276158407_High_accuracy_Android_malware_detection_using_ensemble_learning/links/5551f9a008ae6fd2d81d3ca6.pdf}},
  annote =       "Suleiman Y. Yerima, Sakir Sezer, Centre for Secure
                 Information Technologies Queen’s University Belfast,
                 Belfast, Northern Ireland, United Kingdom E-mail:
                 {s.yerima, s.sezer, g.mcwilliams}@qub.ac.uk Igor Muttik
                 Senior Principal Research Architect McAfee Labs (Part
                 of Intel Security) London, United Kingdom Abstract:
                 With over 50 billion downloads and more than 1.3
                 million apps in Google’s official market, {Android} has
                 continued to gain popularity amongst smartphone users
                 worldwide. At the same time there has been a rise in
                 malware targeting the platform, with more recent
                 strains employing highly sophisticated detection
                 avoidance techniques. As traditional signature based
                 methods become less potent in detecting unknown
                 malware, alternatives are needed for timely zero-day
                 discovery. Thus this paper proposes an approach that
                 utilizes ensemble learning for {Android} malware
                 detection. It combines advantages of static analysis
                 with the efficiency and performance of ensemble machine
                 learning to improve {Android} malware detection accuracy.
                 The machine learning models are built using a large
                 repository of malware samples and benign apps from a
                 leading antivirus vendor. Experimental results and
                 analysis presented shows that the proposed method which
                 uses a large feature space to leverage the power of
                 ensemble learning is capable of 97.3 \% to 99\% detection
                 accuracy with very low false positive rates. Keywords-
                 mobile security; {Android}; malware detection; ensemble
                 learning; static analysis; machine learning; data
                 mining; random forest",
}

@Article{sotirov2008,
  title =        "Bypassing browser memory protections in Windows
                 Vista",
  author =       "Alexander Sotirov and Mark Dowd",
  journal =      "Blackhat USA",
  year =         "2008",
  keywords =     "ASLR",
}

@InCollection{stamatogiannakis2014,
  title =        "Facilitating Trust on Data through Provenance",
  author =       "Manolis Stamatogiannakis and Paul Groth and Herbert
                 Bos",
  booktitle =    "Trust and Trustworthy Computing",
  publisher =    "Springer",
  year =         "2014",
  pages =        "220--221",
}

@Article{t2008cloud,
  title =        "Cloud Computing",
  author =       "B T Ograph and Y Richard Morgens",
  journal =      "Communications of the ACM",
  year =         "2008",
  number =       "7",
  volume =       "51",
}

@TechReport{copperdroid2015,
  title =        "CopperDroid: Automatic Reconstruction of {Android}
                 Malware Behaviors",
  author =       "Kimberly Tam and Salahuddin J Khan and Aristide
                 Fattori and Lorenzo Cavallaro",
  year =         "2015",
  note =         {\url{http://security.di.unimi.it/~joystick/pubs/ndss15.pdf}},
  institution =  "Royal Holloway, University of London",
  annote =       "Kimberly Tam∗, Salahuddin J. Khan∗ , Aristide
                 Fattori, and Lorenzo Cavallaro∗ ∗Systems Security
                 Research Lab and Information Security Group
                 †Dipartimento di Informatica Royal Holloway
                 University of London Universita degli Studi di Milano `
                 Abstract—Mobile devices and their application
                 marketplaces drive the entire economy of the today’s
                 mobile landscape. {Android} platforms alone have produced
                 staggering revenues, exceeding five billion USD, which
                 has attracted cybercriminals and increased malware in
                 {Android} markets at an alarming rate. To better
                 understand this slew of threats, we present
                 CopperDroid, an automatic VMI-based dynamic analysis
                 system to reconstruct the behaviors of {Android} malware.
                 The novelty of CopperDroid lies in its agnostic
                 approach to identify interesting OS- and high-level
                 {Android}-specific behaviors. It reconstructs these
                 behaviors by observing and dissecting system calls and,
                 therefore, is resistant to the multitude of alterations
                 the {Android} runtime is subjected to over its
                 life-cycle. CopperDroid automatically and accurately
                 reconstructs events of interest that describe, not only
                 well-known process-OS interactions (e.g., file and
                 process creation), but also complex intra- and
                 inter-process communications (e.g., SMS reception),
                 whose semantics are typically contextualized through
                 complex {Android} objects. Because CopperDroid’s
                 reconstruction mechanisms are agnostic to the
                 underlying action invocation methods, it is able to
                 capture actions initiated both from Java and native
                 code execution. CopperDroid’s analysis generates
                 detailed behavioral profiles that abstract a large
                 stream of low-level—often uninteresting—events into
                 concise, high-level semantics, which are well-suited to
                 provide insightful behavioral traits and open the
                 possibility to further research directions. We carried
                 out an extensive evaluation to assess the capabilities
                 and performance of CopperDroid on more than 2,900
                 {Android} malware samples. Our experiments show that
                 CopperDroid faithfully reconstructs OSand
                 {Android}-specific behaviors. Additionally, we
                 demonstrate how CopperDroid can be leveraged to
                 disclose additional behaviors through the use of a
                 simple, yet effective, app stimulation technique. Using
                 this technique, we successfully triggered and disclosed
                 additional behaviors on more than 60\% of the analyzed
                 malware samples. This qualitatively demonstrates the
                 versatility of CopperDroid’s ability to improve
                 dynamic-based code coverage.",
}

@InProceedings{tan2014,
  title =        "The Effect of Developer-Specified Explanations For
                 Permission Requests on Smartphone User Behavior",
  author =       "Joshua Tan and Khanh Nguyen and Michael Theodorides
                 and Heidi Negr{\'o}n-Arroyo and Christopher Thompson
                 and Serge Egelman and David Wagner",
  booktitle =    "Proceedings of the 32nd annual ACM conference on Human
                 factors in computing systems",
  year =         "2014",
  organization = "ACM",
  pages =        "91--100",
  key =          "permissions",
}

@Article{tang2013,
  title =        {Android Apps: What are they Doing with your Precious
                 Internet?},
  author =       "Amy Tang and Ashwin Rao and Justine Sherry and Dave
                 Choffnes",
  journal =      {\url{TinyToCS.org},
  year =         "2013",
  volume =       "2",
  publisher =    "Citeseer",
}

@Misc{touboul2014,
  title =        "System and method for providing network security to
                 mobile devices",
  author =       "Shlomo Touboul",
  month =        jan # "~7",
  note =         "US Patent 8,627,452",
  year =         "2014",
  publisher =    "Google Patents",
}

@InProceedings{vala2013security,
  title =        {Security Reverse Engineering of Mobile Operating
                 Systems: A Summary},
  author =       "RADEK Vala and LIBOR Sarga and RADEK Benda",
  booktitle =    {Recent Advances in Cimputer science. Proceedings of
                 the 17th International Conference on computers. Rhodes
                 Island, Greece},
  year =         "2013",
}

@InProceedings{Vasudevan2012,
  title =        "Trustworthy Execution on Mobile Devices: What Security
                 Properties Can My Mobile Platform Give Me?",
  author =       "Amit Vasudevan and Emmanuel Owusu and Zongwei Zhou and
                 James Newsome and Jonathan M. McCune",
  booktitle =    "Proceedings of the 5th International Conference on
                 Trust and Trustworthy Computing",
  institution =  "CMU",
  year =         "2012",
  address =      "Berlin, Heidelberg",
  pages =        "159--178",
  publisher =    "Springer-Verlag",
  series =       "TRUST'12",
  annotate =     "We are now in the post-PC era, yet our mobile devices
                 are insecure. We consider the different stake-holders
                 in today's mobile device ecosystem, and analyze why
                 widely-deployed hardware security primitives on mobile
                 device platforms are inaccessible to application
                 developers and end-users. We systematize existing
                 proposals for leveraging such primitives, and show that
                 they can indeed strengthen the security properties
                 available to applications and users, all without
                 reducing the properties currently enjoyed by OEMs and
                 network carriers. We also highlight shortcomings of
                 existing proposals and make recommendations for future
                 research that may yield practical, deployable
                 results.",
  location =     "Vienna, Austria",
  note =         {\url{https://www.cylab.cmu.edu/files/pdfs/tech_reports/CMUCyLab11023.pdf}},
}

@InProceedings{Vidas2011,
  title =        "All Your Droid Are Belong To Us: {A} Survey of Current
                 {{Android}} Attacks",
  author =       "Timothy Vidas and Daniel Votipka and Nicolas
                 Christin",
  booktitle =    "WOOT",
  year =         "2011",
  note =         {\url{https://www.usenix.org/event/woot11/tech/final\_files/Vidas.pdf}},
  organization = "Usenix",
  pages =        "81--90",
}

@Article{Wallach2014,
  title =        {Smartphone Security 'Taint' What It Used to Be:
                 Technical Perspective},
  author =       "Dan Wallach",
  journal =      "Commun. ACM",
  year =         "2014",
  month =        mar,
  number =       "3",
  pages =        "98--98",
  volume =       "57",
  acmid =        "2576234",
  address =      "New York, NY, USA",
  doi =          "10.1145/2576234",
  ISSN =         "0001-0782",
  issue_date =   "March 2014",
  numpages =     "1",
  publisher =    "ACM",
  URL =          "http://doi.acm.org/10.1145/2576234",
}

@Article{wang2014,
  title =        "A Dependable Monitoring Mechanism Combining Static and
                 Dynamic Anomaly Detection for Network Systems.",
  author =       "GuiPing Wang and ShuYu Chen and Zhen Zhou and MingWei
                 Lin",
  journal =      "International Journal of Future Generation
                 Communication \& Networking",
  year =         "2014",
  note =         {\url{http://www.sersc.org/journals/IJFGCN/vol7_no1/1.pdf}},
  number =       "1",
  volume =       "7",
}

@Article{wang2013detecting,
  title =        "Detecting targeted attacks by multilayer deception",
  author =       "Wei Wang and Jeffrey Bickford and Ilona Murynets and
                 Ramesh Subbaraman and Andrea G Forte and Gokul
                 Singaraju and others",
  journal =      "Journal of Cyber Security and Mobility",
  year =         "2013",
  number =       "2",
  pages =        "175--199",
  volume =       "2",
}

@InCollection{wang2012,
  title =        "Exposing security risks for commercial mobile
                 devices",
  author =       "Zhaohui Wang and Ryan Johnson and Rahul Murmuria and
                 Angelos Stavrou",
  booktitle =    "Computer Network Security",
  publisher =    "Springer",
  year =         "2012",
  note =         {\url{http://www.cs.gmu.edu/~astavrou/research/Exposing_Security_Risks_for_Commercial_Mobile_Devices.pdf}},
  pages =        "3--21",
  abstract =     "Recent advances in the hardware capabilities of mobile
                 handheld devices have fostered the development of open
                 source operating systems and a wealth of applications
                 for mobile phones and table devices. This new
                 generation of smart devices, including iPhone and
                 Google {Android}, are powerful enough to accomplish most
                 of the user tasks previously requiring a personal
                 computer. Moreover, mobile devices have access to
                 Personally Identifiable Information (PII) including a
                 full suite of location services, camera, microphone,
                 among others. In this paper, we discuss the cyber
                 threats that stem from these new smart device
                 capabilities and the online application markets for
                 mobile devices. These threats include malware, data
                 exfiltration, exploitation through USB, and user and
                 data tracking. We will present the ongoing GMU efforts
                 to defend against or mitigate the impact of attacks
                 against mobile devices. Our approaches involve
                 analyzing the source code and binaries of mobile
                 applications, hardening the device by using
                 Kernel-level network and data encryption, and
                 controlling the communication mechanisms for
                 synchronizing the user contents with computers and
                 other phones. We will also explain the enhanced
                 difficulties in dealing with these security issues when
                 the end-goal is to deploy security-enhanced smart
                 phones into military and tactical scenarios. The talk
                 will conclude with a discussion of our current and
                 future research directions.",
}

@InProceedings{EncrFileSys2012,
  title =        {Implementing and optimizing an encryption filesystem
                 on {Android}},
  author =       "Zhaohui Wang and Rahul Murmuria and Angelos Stavrou",
  booktitle =    "Mobile Data Management (MDM), 2012 IEEE 13th
                 International Conference on",
  year =         "2012",
  note =         {\url{http://cs.gmu.edu/~astavrou/research/{Android}_Encrypted_File_System_MDM_12.pdf}},
  organization = "IEEE",
  pages =        "52--62",
  abstract =     "The recent surge in popularity of smart handheld
                 devices, including smart-phones and tablets, has given
                 rise to new challenges in protection of Personal
                 Identifiable Information (PII). Indeed, modern mobile
                 devices store PII for applications that span from email
                 to SMS and from social media to location-based services
                 increasing the concerns of the end user’s privacy.
                 Therefore, there is a clear need and expectation for
                 PII data to be protected in the case of loss, theft, or
                 capture of the portable device. In this paper, we
                 present a novel FUSE (Filesystem in USErspace)
                 encryption filesystem to protect the removable and
                 persistent storage on heterogeneous smart gadget
                 devices running the {Android} platform. The proposed
                 filesystem leverages NIST certified cryptographic
                 algorithms to encrypt the dataat-rest. We present an
                 analysis of the security and performance trade-offs in
                 a wide-range of usage and load scenarios. Using
                 existing known micro benchmarks in devices using
                 encryption without any optimization, we show that
                 encrypted operations can incur negligible overhead for
                 read operations and up to twenty (20) times overhead
                 for write operations for I/Ointensive programs. In
                 addition, we quantified the database transaction
                 performance and we observed a 50\% operation time
                 slowdown on average when using encryption. We further
                 explore generic and device specific optimizations and
                 gain 10\% to 60\% performance for different operations
                 reducing the initial cost of encryption. Finally, we
                 show that our approach is easy to install and configure
                 across all {Android} platforms including mobile phones,
                 tablets, and small notebooks without any user
                 perceivable delay for most of the regular {Android}
                 applications. Keywords-Smart handheld devices, Full
                 disk encryption, Encrypted filesystem, I/O
                 performance.",
}

@TechReport{Andrubis2014,
  title =        {ANDRUBIS: {Android} Malware Under The Magnifying
                 Glass},
  author =       "Lukas Weichselbaum and Matthias Neugschwandtner and
                 Martina Lindorfer and Yanick Fratantonio and Victor
                 {van der Veen} and Christian Platzer",
  institution =  "Vienna University of Technology, University of
                 California, Santa Barbara, VU University Amsterdam",
  year =         "2014",
  abstract =     "The smartphone industry has been one of the fastest
                 growing technological areas in recent years. Naturally,
                 the considerable market share of the {Android} OS and the
                 diversity of app distribution channels besides the
                 ofﬁcial Google Play Store has attracted the attention
                 of malware authors. To deal with the increasing numbers
                 of malicious {Android} apps in the wild, malware analysts
                 typically rely on analysis tools to extract
                 characteristic information about an app in an automated
                 fashion. While the importance of such tools has been
                 addressed by the research community [8], [24], [25],
                 [27], the resulting prototypes remain limited in terms
                 of analysis capabilities and availability. In this
                 paper we present ANDRUBIS, a completely automated,
                 publicly available and comprehensive analysis system
                 for {Android} applications. ANDRUBIS combines static
                 analysis techniques with dynamic analysis on both
                 Dalvik VM and system level, as well as several
                 stimulation techniques to increase code coverage.",
}

@misc{weidman2011,
  title={Transparent Botnet Control for Smartphones over SMS},
  author={Weidman, Georgia},
  year={2011},
  publisher={},
  note = {\url{http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.474.7805&rep=rep1&type=pdf}},
}


@TechReport{weidman2016,
  author =       {Georgia Weidman},
  title =        {Smartphone Pentest Framework},
  institution =  {http://www.bulbsecurity.com/},
  year =         {2016},
  OPTkey =       {},
  OPTtype =      {},
  OPTnumber =    {},
  OPTaddress =   {},
  OPTmonth =     {},
  OPTnote =      {},
  annote =    {The product of a DARPA Cyber Fast Track grant, the
                  Smartphone Pentest Framework is an open source
                  security tool, designed to aid in assessing the
                  security posture of smartphones in an
                  environment. SPF Version 0.1 contains remote
                  attacks, client side attacks, social engineering
                  attacks, and post exploitation, targeting smartphone
                  devices.},
  note = {\url{http://www.bulbsecurity.com/products/smartphone-pentest-framework/}},
}

@InProceedings{Werthmann2013,
  title =        {{PSiOS}: Bring Your Own Privacy \& Security to i{OS}
                 Devices},
  author =       "Tim Werthmann and Ralf Hund and Lucas Davi and
                 Ahmad-Reza Sadeghi and Thorsten Holz",
  booktitle =    "Book title: 8th ACM Symposium on Information, Computer
                 and Communications Security (ASIACCS 2013)",
  note =         {Distinguished Paper Award, \url{http://www.icri-sc.org/fileadmin/user_upload/Group_TRUST/PubsPDF/PSiOS.pdf}},
  annote =       "Abstract: Apple iOS is one of the most popular mobile
                 operating systems. As its core security technology, iOS
                 provides application sandboxing but assigns a generic
                 sandboxing profile to every third-party application.
                 However, recent attacks and incidents with benign
                 applications demonstrate that this design decision is
                 vulnerable to crucial privacy and security breaches,
                 allowing applications (either benign or malicious) to
                 access contacts, photos, and device IDs. Moreover, the
                 dynamic character of iOS apps written in Objective-C
                 renders the currently proposed static analysis tools
                 less useful. In this paper, we aim to address the open
                 problem of preventing (not only detecting) privacy
                 leaks and simultaneously strengthening security against
                 runtime attacks on iOS. Compared to similar research
                 work on the open {Android}, realizing such a system for
                 the closed-source iOS is highly involved. We present
                 the design and implementation of PSiOS, a tool that
                 features a novel policy enforcement framework for iOS.
                 It provides fine-grained, application-specific, and
                 user/administrator defined sandboxing for each
                 third-party application without requiring access to the
                 application source code. Our reference implementation
                 deploys control-flow integrity based on the recently
                 proposed MoCFI (Mobile CFI) framework that only
                 protects applications against runtime attacks. We
                 evaluated several popular iOS applications (e.g.,
                 Facebook, WhatsApp) to demonstrate the efficiency and
                 effectiveness of PSiOS.",
  OPTyear =      "2013",
}

@TechReport{Symantec2007,
  title =        {An Analysis of Address Space Layout Randomization on
                 {Windows} {Vista}},
  author =       "Ollie Whitehouse",
  journal =      "Symantec Advanced Threat Research",
  year =         "2007",
  note =         {\url{http://www.symantec.com/avcenter/reference/Address_Space_Layout_Randomization.pdf}},
}

,
  Pages                    = {1--14},

  Keywords                 = {ASLR},
 annote = {\url{http://www.gupiaoya.com/tools/Miscellaneous/Address_Space_Layout_Randomization.pdf}},
}

@TechReport{iphoneASLR2012,
  title =        {ASLR on iPhone},
  author =       "Iphone Wiki",
  institution =  {\url{theiphonewiki.com},
  year =         "2012",
  note =         {\url{https://theiphonewiki.com/wiki/ASLR},
}

@InProceedings{AirBag2014,
  title =        {{AirBag}: Boosting Smartphone Resistance to Malware
                 Infection},
  author =       "Chiachih Wu and Yajin Zhou and Kunal Patel and Zhenkai
                 Liang and Xuxian Jiang",
  booktitle =    {Proceedings of the 21th Annual Network and
                 Distributed System Security Symposium (NDSS{\rq}14)},
  year =         "2014",
}

@Article{wu2014,
  title =        "Security threats to mobile multimedia applications:
                 Camera-based attacks on mobile phones",
  author =       "Longfei Wu and Xiaojiang Du and Xinwen Fu",
  journal =      "Communications Magazine, IEEE",
  year =         "2014",
  number =       "3",
  pages =        "80--87",
  volume =       "52",
  publisher =    "IEEE",
}

@Article{Mobsafe2013,
  title =        {MobSafe}: Cloud Computing Based Forensic Analysis for
                 Massive Mobile Applications using Data Mining",
  author =       "Jianlin Xu and Yifan Yu and Zhen Chen and Bin Cao and
                 Wenyu Dong and Yu Guo and Junwei Cao",
  journal =      "Tsinghua Science and Technology",
  year =         "2013",
  number =       "4",
  volume =       "18",
  publisher =    "TUP",
}

@PhdThesis{xu2013,
  title =        {Techniques and Tools for Analyzing and Understanding
                 {Android} Applications},
  author =       "Liang Xu",
  school =       "University of California, Davis",
  year =         "2013",
  abstract =     "This dissertation presents the first large-scale,
                 systematic study of third-party {Android} applications
                 from the Google Play Store. By investigating unique
                 characteristics of {Android} applications, it uncovers
                 and provides insights into common errors and pitfalls
                 during application development and provides actionable
                 recommendations where applicable. This dissertation
                 also presents Heimdall, a static analysis framework
                 that automatically tracks the flow of sensitive
                 information in {Android} applications. Heimdall has been
                 used to uncover potentially unsafe flows of sensitive
                 information on a large scale, providing a comprehensive
                 understanding of privacy-sensitive information usage in
                 third-party {Android} applications. The findings
                 presented in this dissertation benefit the whole
                 {Android} community, from platform and tool developers to
                 application developers and end-users.",
  advisor =      "Zhendong Su, professor of computer science",
}

@InProceedings{Permlyzer2013,
  title =        {Permlyzer: Analyzing Permission Usage in {Android}
                 Applications},
  author =       "Wei Xu and Fangfang Zhang and Sencun Zhu",
  booktitle =    "Software Reliability Engineering (ISSRE), 2013 IEEE
                 24th International Symposium on",
  year =         "2013",
  organization = "IEEE",
  pages =        "400--410",
}

@InProceedings{Taplogger2012,
  title =        "Taplogger: Inferring user inputs on smartphone
                 touchscreens using on-board motion sensors",
  author =       "Zhi Xu and Kun Bai and Sencun Zhu",
  booktitle =    "Proceedings of the fifth ACM conference on Security
                 and Privacy in Wireless and Mobile Networks",
  year =         "2012",
  note =         {\url{http://www.cse.psu.edu/~szhu/papers/taplogger.pdf}},
  organization = "ACM",
  pages =        "113--124",
}

@InProceedings{xu2012,
  title =        "Abusing Notification Services on Smartphones for
                 Phishing and Spamming.",
  author =       "Zhi Xu and Sencun Zhu",
  booktitle =    "WOOT",
  year =         "2012",
  pages =        "1--11",
}

@TechReport{okhravi2013survey,
  title =        "Survey of cyber moving target techniques",
  author =       "Hamed Okhravi and MA Rabe and TJ Mayberry and WG
                 Leonard and TR Hobson and D Bigelow and WW Streilein",
  year =         "2013",
  institution =  "DTIC Document",
}

@InProceedings{giuffrida2012,
  title =        "Enhanced Operating System Security Through Efficient
                 and Fine-grained Address Space Randomization.",
  author =       "Cristiano Giuffrida and Anton Kuijsten and Andrew S
                 Tanenbaum",
  booktitle =    "USENIX Security Symposium",
  pages =        "475--490",
  year =         "2012",
}

@InProceedings{Xui2006,
  title =        "Improving Address Space Randomization with a Dynamic
                 Offset Randomization Technique",
  author =       "Haizhi Xui and Steve J. Chapin",
  institution =  "System Assurance Institute",
  mont =         "April",
  year =         "2006",
  booktitle =    "Proceedings of the 2006 ACM Symposium on Applied
                 Computing",
  series =       "SAC '06",
  ISBN =         "1-59593-108-2",
  location =     "Dijon, France",
  pages =        "384--391",
  URL =          "http://doi.acm.org/10.1145/1141277.1141364",
  doi =          "10.1145/1141277.1141364",
  publisher =    "ACM",
  address =      "New York, NY, USA",
  keywords =     "ASLR, address space randomization, code islands,
                 denial-of-service attacks, derandomization attacks,
                 intrusion mitigation, randomization",
}

@Book{Yaghmour2013,
  title =        {Embedded} {{Android}}: Porting, Extending, and
                 Customizing",
  author =       "Karim Yaghmour",
  publisher =    "O'Reilly Media, Inc.",
  address =      "Sebastopol, CA 95472",
  year =         "2013",
}

@Book{yang2014,
  title =        "The Art of Linux Kernel Design: Illustrating the
                 Operating System Design Principle and Implementation",
  author =       "Lixiang Yang",
  year =         "2014",
  publisher =    "Auerbach Publications",
  OPTkey =       "",
  OPTvolume =    "",
  OPTnumber =    "",
  OPTseries =    "",
  OPTaddress =   "",
  OPTedition =   "",
  OPTmonth =     "",
  OPTnote =      "",
  OPTannote =    "",
}

@InProceedings{yang2012,
  title =        {Short paper: Enhancing Users' Comprehension of
                 {Android} Permissions},
  author =       "Liu Yang and Nader Boushehrinejadmoradi and Pallab Roy
                 and Vinod Ganapathy and Liviu Iftode",
  booktitle =    {Proceedings of the second ACM workshop on Security
                 and privacy in smartphones and mobile devices},
  year =         "2012",
  organization = "ACM",
  pages =        "21--26",
}

@Article{yang2013ascds,
  title =        {ASCDS}: {A} Smartphone Confidential Data Storage
                 Scheme",
  author =       "Zheng-He Yang and Ming-Zhong Wang and Lie-Huang Zhu
                 and Hao Yang",
  journal =      "International Journal of Wireless and Mobile
                 Computing",
  year =         "2013",
  number =       "6",
  pages =        "581--587",
  volume =       "6",
  abstract =     "The rapid development of mobile phones has greatly
                 enriched our lives, but also increased the risks of
                 information leakage of mobiles. However, compared with
                 the variety of attacks, the protections of privacy for
                 mobiles are not perfect enough now. In this case, we
                 propose and implement a confidential data storage
                 scheme named as ASCDS for {Android} to protect
                 information. The scheme uses virtual disk technology to
                 create an independent disk partition to store
                 confidential information and employ FUSE (File System
                 in User Space) technology to manage processes of file
                 system. In order to guarantee the security of data, we
                 establish a cryptographic file system for the partition
                 which can protect data perfectly without producing
                 temporary plaintexts. Besides we can protect the data
                 selectively to reduce the cost and save the finite
                 energy in mobiles. The partition does not depend on
                 hard disk, so it is easy to backup and collaborate with
                 PC.",
  publisher =    "Inderscience",
}

@InCollection{ClipboardAttacks2014,
  title =        "Attacks on {Android} Clipboard",
  author =       "Xiao Zhang and Wenliang Du",
  booktitle =    "Detection of Intrusions and Malware, and Vulnerability
                 Assessment",
  publisher =    "Springer",
  year =         "2014",
  note =         {\url{http://www.cis.syr.edu/~wedu/Research/paper/clipboard_attack_dimva2014.pdf}},
  pages =        "72--91",
}

@InProceedings{Blackdroid2013,
  title =        {Blackdroid}: {A} Black-Box Way for {Android} Plaintext
                 and Ciphertext Privacy Leaks Detecting and Guarding",
  author =       "Yan Zhang and Yazhe Wang and Dan Wang and Ruoding
                 Zhang and Qihui Zhou",
  booktitle =    "Consumer Electronics, Communications and Networks
                 (CECNet), 2013 3rd International Conference on",
  year =         "2013",
  publisher =    "IEEE",
  pages =        "178--181",
  address =      "USA",
}

@InProceedings{FusionFS2014,
  title =        "Fusion{FS}: Toward Supporting Data-Intensive
                 Scientific Applications on Extreme-Scale
                 High-Performance Computing Systems",
  author =       "Dongfang Zhao and Zhao Zhang and Xiaobing Zhou and
                 Tonglin Li and Ke Wang and Dries Kimpe and Philip Carns
                 and Robert Ross and Ioan Raicu",
  booktitle =    "Big Data, 2014 IEEE International Conference on",
  year =         "2014",
  note =         {\url{http://www.mcs.anl.gov/papers/P5191-0814.pdf}},
  organization = "IEEE",
  pages =        "61--70",
  abstract =     "State-of-the-art yet decades old architecture of high
                 performance computing (HPC) systems has its compute and
                 storage resources separated. It has shown limits for
                 today’s dataintensive scientific applications,
                 because every I/O needs to be transferred via the
                 network between the compute and storage cliques. This
                 paper proposes a distributed storage layer local to the
                 compute nodes, which is responsible for most of the I/O
                 operations and saves extreme amount of data movement
                 between compute and storage resources. We have designed
                 and implemented a system prototype of such architecture
                 –the FusionFS distributed file system– to support
                 metadata-intensive and write-intensive operations, both
                 of which are critical to the I/O performance of
                 scientific applications. FusionFS has been deployed and
                 evaluated on up to 16K compute nodes in an IBM Blue
                 Gene/P supercomputer, showing more than an order of
                 magnitude performance improvement over other popular
                 file systems such as GPFS, PVFS, and HDFS.",
}

@Book{ASANI-2014,
  title =        {Android} Security (and Not) Internals: ({ASANI} Book)",
  author =       "Yury Zhauniarovich",
  publisher =    "www.zhauniarovich.com",
  year =         "2014",
  note =         {\url{http://www.zhauniarovich.com/files/asani/asani.pdf}},
}

@InProceedings{zheng2014,
  title =        "Overview of Security Enhanced {Android}’s Security
                 Architecture",
  author =       "Chaowen Zheng",
  booktitle =    "2nd International Conference on Teaching and
                 Computational Science",
  year =         "2014",
  organization = "Atlantis Press",
}

@InProceedings{DroidRay2014,
  author =       "Min Zheng and Mingshen Sun and John C. S. Lui",
  title =        "DroidRay: {A} Security Evaluation System for
                 Customized {Android} Firmwares",
  booktitle =    "Proceedings of the 9th ACM Symposium on Information,
                 Computer and Communications Security",
  series =       "ASIA CCS 2014",
  year =         "2014",
  ISBN =         "978-1-4503-2800-5",
  location =     "Kyoto, Japan",
  pages =        "471--482",
  numpages =     "12",
  URL =          "http://doi.acm.org/10.1145/2590296.2590313",
  publisher =    "ACM",
  address =      "New York, NY, USA",
  note =         {\url{http://www.cs.cuhk.hk/~cslui/PUBLICATION/ASIACCS2014DROIDRAY.pdf}},
  keywords =     {Android}, firmware, malware",
}

@InProceedings{zhou2012,
  title =        "Hey, You, Get Off of My Market: Detecting Malicious
                 Apps in Official and Alternative {Android} Markets",
  author =       "Yajin Zhou and Zhi Wang and Wu Zhou and Xuxian Jiang",
  booktitle =    "NDSS",
  year =         "2012",
}

@InProceedings{iOSSecurity2011,
  title =        "Apple i{OS} Security Evaluation: Vulnerability
                 Analysis and Data Encryption",
  author =       "Dino Dai Zovi",
  year =         "2011",
  note =         {\url{http://www.blackhat.com/html/bh-us-11/bh-us-11-briefings.html},
  booktitle =    "Blackhat US 2011",
  publisher =    "Blackhat",
  address =      "CA",
  annote =       "iOS 4 implements several key security mechanisms:
                 Trusted Boot, Mandatory Code Signing, Code Signing
                 Enforcement, Sandboxing, Device Encryption, Data
                 Protection, and (as of iOS 4.3) Address Space Layout
                 Randomization. Each of these mechanisms' precise
                 operation is documented in detail as revealed through
                 static and dynamic binary analysis, as well as their
                 strengths and any identified weaknesses.",
}

@Manual{BinderDoc2014,
  title =        "Binder",
  organization = "developer.{Android}.com",
  year =         "2014",
}

% priyanka
@InProceedings{schwartz2011,
  title =        {Q}: Exploit Hardening Made Easy.",
  author =       "Edward J Schwartz and Thanassis Avgerinos and David
                 Brumley",
  booktitle =    "USENIX Security Symposium",
  year =         "2011",
  note =         {\url{http://static.usenix.org/legacy/events/sec11/tech/full_papers/Schwartz.pdf}},
  annote =       "Q: Exploit Hardening Made Easy Edward J. Schwartz,
                 Thanassis Avgerinos and David Brumley Carnegie Mellon
                 University, Pittsburgh, PA {edmcman, thanassis,
                 dbrumley}@cmu.edu Abstract Prior work has shown that
                 return oriented programming (ROP) can be used to bypass
                 W⊕X, a software defense that stops shellcode, by
                 reusing instructions from large libraries such as libc.
                 Modern operating systems have since enabled address
                 randomization (ASLR), which randomizes the location of
                 libc, making these techniques unusable in practice.
                 However, modern ASLR implementations leave smaller
                 amounts of executable code unrandomized and it has been
                 unclear whether an attacker can use these small code
                 fragments to construct payloads in the general case. In
                 this paper, we show defenses as currently deployed can
                 be bypassed with new techniques for automatically
                 creating ROP payloads from small amounts of
                 unrandomized code. We propose using semantic program
                 verification techniques for identifying the
                 functionality of gadgets, and design a ROP compiler
                 that is resistant to missing gadget types. To
                 demonstrate our techniques, we build Q, an end-to-end
                 system that automatically generates ROP payloads for a
                 given binary. Q can produce payloads for 80\% of Linux
                 /usr/bin programs larger than 20KB. We also show that Q
                 can automatically perform exploit hardening: given an
                 exploit that crashes with defenses on, Q outputs an
                 exploit that bypasses both W⊕X and ASLR. We show that
                 Q can harden nine realworld Linux and Windows exploits,
                 enabling an attacker to automatically bypass defenses
                 as deployed by industry for those programs.",
}

@Proceedings{gladyshev201,
  title =        "Fifth International Conference on Digital Forensics
                 and Cyber Crime, {ICDF2C} 2013",
  year =         "2013",
  OPTkey =       "",
  OPTbooktitle = "",
  editor =       "Pavel Editors: Gladyshev and Andrew Marrington and
                 Ibrahim Baggili",
  OPTnumber =    "",
  OPTseries =    "",
  OPTaddress =   "",
  OPTmonth =     "",
  OPTorganization = "",
  OPTnote =      "",
  OPTcrossref =  "",
  OPTkey =       "",
  OPTbooktitle = "",
  OPTyear =      "",
  OPTeditor =    "",
  OPTvolume =    "",
  OPTnumber =    "",
  OPTseries =    "",
  OPTpages =     "",
  OPTmonth =     "",
  OPTaddress =   "Moscow, Russia",
  OPTorganization = "",
  OPTpublisher = "",
  OPTnote =      "",
  volume =       "132",
  year =         "2015",
  publisher =    "Springer",
  annote =       "This book constitutes the thoroughly refereed
                 post-conference proceedings of the 5th International
                 ICST Conference on Digital Forensics and Cyber Crime,
                 ICDF2C 2013, held in September 2013 in Moscow, Russia.
                 The 16 revised full papers presented together with 2
                 extended abstracts and 1 poster paper were carefully
                 reviewed and selected from 38 submissions. The papers
                 cover diverse topics in the field of digital forensics
                 and cybercrime, ranging from regulation of social
                 networks to file carving, as well as technical issues,
                 information warfare, cyber terrorism, critical
                 infrastructure protection, standards, certification,
                 accreditation, automation and digital forensics in the
                 cloud.",
}

@Article{ayedliterature,
  title =        "A literature Review on {Android} Permission System",
  author =       "Ahmed Ben Ayed",
  journal =      "International Journal of Advanced Research in Computer
                 Engineering \& Technology",
  year =         "2015",
  note =         {\url{http://ijarcet.org/wp-content/uploads/IJARCET-VOL-4-ISSUE-4-1520-1523.pdf}},
  annote =       "Ahmed Ben Ayed has received his Bachelor of Science in
                 Computer Information Systems, Master of Science in
                 Cyber Security and Information Assurance, and currently
                 pursuing a doctorate degree in Computer Science at
                 Colorado Technical University, his research interest
                 are {Android} Security, Pattern recognition of Malicious
                 Applications, Machine Learning, Cryptography,
                 Information \& System Security, and Computer
                 networks.;; Abstract - {Android} uses a permission-based
                 model to protect its users’ information and system
                 resources. This permission-based system has been the
                 center of many researchers’ interest; they have been
                 used to identify malicious behaviors and ultimately
                 could help identify malicious applications. This study
                 is not intended to create an anti-malware solution or
                 method; instead it offers a literature review on
                 {Android} permissions system and illustrates previous
                 work that has been studied using permissions to
                 identify harmful applications. This study could be used
                 as a source to better understand the {Android}
                 architecture and its permission-based system. Index
                 Terms—{Android} Security, Permission-based systems,
                 malware detection.",
}

@Article{dawson2015understanding,
  title =        "Understanding the Methods behind Cyber Terrorism",
  author =       "Maurice E {Dawson Jr} and Marwan Omar and Jonathan
                 Abramson",
  year =         "2015",
  publisher =    "Information Science Reference",
}

@InProceedings{burke2015,
  title =        "How to Tame Your {{Android}} {Malware},
  author =       "Ivan Burke and Heloise Pieterse",
  booktitle =    "The Proceedings of the 10th International Conference
                 on Cyber Warfare and Security ICCWS 2015",
  pages =        "54",
  year =         "2015",
  organization = "Academic Conferences Limited",
  note =         {\url{https://www.researchgate.net/profile/Ivan_Burke/publication/274255324_How_to_Tame_Your_Android_Malware/links/551a4b050cf2f51a6fea2f7c.pdf}},
}

@InProceedings{barbatsalou2015,
  title =        "Mobile {Forensics} for {PPDR} Communications: How and
                 why",
  author =       "Konstantia Barbatsalou and Bruno Sousa and Edmundo
                 Monteiro1and Paulo Simoes",
  booktitle =    "The Proceedings of the 10th International Conference
                 on Cyber Warfare and Security ICCWS 2015",
  pages =        "30",
  year =         "2015",
  organization = "Academic Conferences Limited",
}

@Article{wright2012,
  title =        "The {Symantec} Smartphone Honey Stick Project",
  author =       "Scott Wright",
  journal =      "Symantec Corporation",
  year =         "2012",
}



@TechReport{quick2011,
  title =        "Forensic analysis of the {{Android}} File System
                 yaffs2",
  author =       "Darren Quick and Mohammed Alzaabi",
  year =         "2011",
  institution =  "Edith Cowan University, Perth, Western Australia",
  publisher =    "secau Security Research Centre,",
}

@Manual{inotify,
  author =       "ManPages iNotify",
  title =        "iNotify monitoring file system events (Linux man
                 page)",
  note =         {\url{http://linux.die.net/man/7/inotify},
  year =         "2005",
}

@TechReport{dow2010monitor,
  title =        "Monitor Linux file system events with inotify",
  author =       "Eli M Dow",
  institution =  "IBM Linux Test and Integration Center",
  note =         {\url{http://www.ibm.com/developerworks/library/l-inotify},
  year =         "2010",
}

@Article{freiling2011,
  title =        "Forensic Analysis of Smartphones: The {{Android}} Data
                 Extractor Lite ({ADEL})",
  author =       "Felix Freiling and Michael Spreitzenbarth and Sven
                 Schmitt",
  booktitle =    "Proceedings of the Conference on Digital Forensics,
                 Security and Law",
  pages =        "151--160",
  year =         "2011",
}

%% The following causes fatal error; disabled by dropping the comma %%
@InProceedings{peters2015
  title =        {DEFY: A Deniable, Encrypted File System for
                  Log-Structured Storage},
  author =       "Timothy M Peters and Mark A Gondree and Zachary NJ
                 Peterson",
  booktitle =    "Annual Network and Distributed System Security
                  Symposium (NDSS)",
  year =         "2015",
  note =         {\url{http://znjp.com/papers/peters-ndss15.pdf}},
  keywords =     "forensics, encryptedfs",
}

@PhdThesis{defreez2012,
  title =        {Android Privacy Through Encryption},
  author =       "Daniel DeFreez",
  year =         "2012",
  school =       "Southern Oregon University",
  note =         {\url{http://defreez.com/articles/thesis.pdf}},
}

@InProceedings{zimmermann2012,
  title =        {Forensic Analysis of {YAFFS2}},
  author =       "Christian Zimmermann and Michael Spreitzenbarth and
                 Sven Schmitt and Felix C Freiling",
  booktitle =    "Sicherheit",
  pages =        "59--69",
  year =         "2012",
}

@Manual{inotifywait,
  title =        {Inotifywait for {Android}},
  author =       "Rohan McGovern",
  note =         {\url{https://github.com/mkttanabe/inotifywait-for-{Android}},
  year =         "2012",
}

@Manual{ndk,
  title =        {Android {NDK}: {Android} Developers},
  author =       "Google.com",
  note =         {\url{https://developer.{Android}.com/tools/sdk/ndk/index.html},
  year =         "2015",
}

@Manual{AFFT,
  title =        {Android Free Forensic Toolkit},
  author =       "CyberPunk",
  note =         {\url{http://n0where.net/{Android}-free-forensic-toolkit}},
  year =         "2015",
  annote =       "AFFT is a toolkit to automatically acquire and extract
                 data from {Android} image dumps",
}

@Article{TI2015,
  author =       "Texas Instruments",
  title =        {Android}: Adding System Service",
  note =         {\url{http://processors.wiki.ti.com/index.php/Android-Adding_SystemService},
  year =         "2015",
  annote =       "This wiki page will demonstrate - {"}How to add system
                 service to {Android} framework{"}. Example - {"}Adding a
                 Bluetooth HID service{"} - taken as reference of
                 understanding.This will also help to add support for
                 more bluetooth profiles into {Android} framework.",
}

@InProceedings{ASEF-2014,
  author =       "Parth Ph",
  title =        {ASEF} - {Android} Security Evaluation Framework",
  year =         "2014",
  note =         {\url{https://code.google.com/p/asef/}},
  annote =       "Open Source Project to perform security analysis of
                 {Android} Apps by various security reserachers.",
}

@incollection{robinson2015,
  title={Understanding {Android} Security},
  author={Robinson, Gregor and Weir, George RS},
  booktitle={Global Security, Safety and Sustainability: Tomorrow's Challenges of Cyber Security},
  pages={189--199},
  year={2015},
  publisher={Springer},
}

@phdthesis{hughes2015,
  title={{Android} mobile security: A comprehensive evaluation of its
                  feats and flaws},
  author={Hughes, Alexandra},
  year={2015},
  school={Utica College},
  annote={Advisor: Orbinati, Albert},
}

@incollection{fang2015,
  title={IVDroid: Static Detection for Input Validation Vulnerability in {Android} Inter-component Communication},
  author={Fang, Zhejun and Liu, Qixu and Zhang, Yuqing and Wang, Kai and Wang, Zhiqiang},
  booktitle={Information Security Practice and Experience},
  pages={378--392},
  year={2015},
  publisher={Springer},
}

@inproceedings{ferreira2015,
  title={Securacy: An Empirical Investigation of {Android} Applications’ Network Usage, Privacy and Security},
  author={Ferreira, Denzil and Kostakos, Vassilis and Beresford, Alastair R and Lindqvist, Janne and Dey, Anind K},
  booktitle={Proceedings of the 8th ACM Conference on Security and Privacy in Wireless and Mobile Networks (WiSec)},
  year={2015},
 note = {\url {http://www.winlab.rutgers.edu/~janne/securacy-wisec15.pdf}},
}

@inproceedings{knorr2015security,
  title={Security testing for {Android} mHealth apps},
  author={Knorr, Konstantin and Aspinall, David},
  booktitle={Software Testing, Verification and Validation Workshops (ICSTW), 2015 IEEE Eighth International Conference on},
  pages={1--8},
  year={2015},
  organization={IEEE}
}

@inproceedings{li2015iccta,
  title={IccTA: detecting inter-component privacy leaks in {Android} apps},
  author={Li, Li and Bartel, Alexandre and Bissyande, Tegawend{\'e} Fran{\c{c}}ois D Assise and Klein, Jacques and Le Traon, Yves and Arzt, Steven and Rasthofer, Siegfried and Bodden, Eric and Octeau, Damien and McDaniel, Patrick},
  booktitle={2015 IEEE/ACM 37th IEEE International Conference on Software Engineering (ICSE 2015)},
  year={2015},
note = {\url{http://orbilu.uni.lu/bitstream/10993/20058/1/li-iccta-preprint.pdf}},
}

@inproceedings{wang2015},
  title={{EaseAndroid}: Automatic policy analysis and refinement for security enhanced {Android} via large-scale semi-supervised learning},
  author={Wang, Ruowen and Enck, William and Reeves, Douglas and Zhang, Xinwen and Ning, Peng and Xu, Dingbang and Zhou, Wu and Azab, Ahmed M},
  booktitle={USENIX Security},
 note={\url{https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-wang-ruowen.pdf}},
  year={2015}
}

@article{qian2016malicious,
  title={Malicious Behavior Analysis for {Android} Applications},
  author={Qian, Quan and Cai, Jing and Xie, Mengbo and Zhang, Rui},
  journal={International Journal of Network Security},
  volume={18},
  number={1},
  pages={182--192},
  year={2016}, note ={\url{
  http://ijns.femto.com.tw/contents/ijns-v18-n1/ijns-2016-v18-n1-p182-192.pdf}},
  publisher={飛舵科技社},
}

@article{han2016identifying,
  title={Identifying malicious {Android} apps using permissions and system events},
  author={Han, Hongmu and Li, Ruixuan and Gu, Xiwu},
  journal={International Journal of Embedded Systems},
  volume={8},
  number={1},
  pages={46--58},
  year={2016},
  publisher={Inderscience Publishers (IEL)}
}

@article{zhang2016life,
  title={Life after App Uninstallation: Are the Data Still Alive? Data Residue Attacks on {Android}},
  author={Zhang, Xiao and Ying, Kailiang and Aafer, Yousra and Qiu, Zhenshen and Du, Wenliang},
  year={2016},
note = {\url{https://xzhang35.expressions.syr.edu/wp-content/uploads/2015/10/{Android}_data_residue.pdf}},
}

@InProceedings{seo2016flexdroid,
  title={FLEXDROID: Enforcing In-App Privilege Separation in {Android}},
  author={Seo, Jaebaek and Kim, Daehyeok and Cho, Donghyun and Kim, Taesoo and Shin, Insik},
  year={2016}, note = {\url{http://daehyeok.com/papers/Flexdroid-NDSS16.pdf}},
  booktitle={NDSS16 http://www.internetsociety.org/events/ndss-symposium-2016},
}

@incollection{saudi2016new,
  title={A New System Call Classification for {Android} Mobile Malware Surveillance Exploitation via SMS Message},
  author={Saudi, Madihah Mohd and Rahman, Muhammad Zuhair Abd and Mahmud, Azirah Alfaizah and Basir, Nurlida and Yusoff, Yumn Suhaylah},
  booktitle={Advanced Computer and Communication Engineering Technology},
  pages={103--112},
  year={2016},
  publisher={Springer},
  annote={
  madihah@usim.edu.my;
  Abstract
Nowadays, {Android} has become the most widely used platform for smartphones. Due to the active used of smartphones, the floodgates of mobile malware threats are open every single day. Mobile malware harms users by illegally disable a mobile device, allowing malicious user to remotely control the device and steal personal information stored on the device. One of the surveillance features that attackers could abuse to gain those benefits is by exploiting the SMS message. Therefore, this paper introduces a new system call classification for SMS exploitation using a covering algorithm. The new system call classification can be used as a guidance to defend against mobile malware attacks. 1260 malware samples related to SMS exploitation from the {Android} Malware Genome Project have been analysed. The experiment was conducted using the dynamic analysis and open source tools in a controlled lab environment.},
}

@inproceedings{mcdonald1999stegfs,
  title={StegFS: A steganographic file system for Linux},
  author={McDonald, Andrew D and Kuhn, Markus G},
  booktitle={International Workshop on Information Hiding},
  pages={463--477},
  year={1999},
  organization={Springer}
}

@incollection{bucerzan2016image,
  title={Image Processing with {Android} Steganography},
  author={Bucerzan, Dominic and Ra{\c{t}}iu, Crina},
  booktitle={Soft Computing Applications},
  pages={27--36},
  year={2016},
  publisher={Springer}
}

@article{conti2016,
  title={Analyzing {Android} Encrypted Network Traffic to Identify User Actions},
  author={Conti, Mauro and Mancini, Luigi Vincenzo and Spolaor, Riccardo and Verde, Nino Vincenzo},
  journal={Information Forensics and Security, IEEE Transactions on},
  volume={11},
  number={1},
  pages={114--125},
  year={2016},
  publisher={IEEE},
}

@incollection{batten2016smartphone,
  title={Smartphone Applications, Malware and Data Theft},
  author={Batten, Lynn M and Moonsamy, Veelasha and Alazab, Moutaz},
  booktitle={Computational Intelligence, Cyber Security and Computational Models},
  pages={15--24},
  year={2016},
  publisher={Springer}
}

@incollection{lim2016methodology,
  title={A Methodology for Live Forensic Acquisition in Secure Domain Based on Domain Separation Technology},
  author={Lim, Kyung-Soo and Jeon, Yong-sung and Kim, Jeong-Nye and Lee, Deok-Gyu},
  booktitle={Advanced Computer and Communication Engineering Technology},
  pages={1113--1123},
  year={2016},
  publisher={Springer}
}

@incollection{choenni2016privacy,
  title={Privacy and Security in Smart Data Collection by Citizens},
  author={Choenni, Sunil and Bargh, Mortaza S and Roepan, Carmelita and Meijer, Ronald F},
  booktitle={Smarter as the New Urban Agenda},
  pages={349--366},
  year={2016},
  publisher={Springer}
}
@article{esbel2016hardware,
  title={Hardware/Software Verification Process through Cloud Computing},
  author={Esbel, Ousama and Christian, Ng Ah Ngan Mike},
  journal={Lecture Notes on Software Engineering},
  volume={4},
  number={2},
  pages={123},
  year={2016}, note = {\url{http://www.lnse.org/vol4/236-IT066.pdf}},
  publisher={IACSIT Press}
}
@incollection{lombardi2016heterogeneous,
  title={Heterogeneous Architectures: Malware and Countermeasures},
  author={Lombardi, Flavio and Di Pietro, Roberto},
  booktitle={Secure System Design and Trustable Computing},
  pages={421--438},
  year={2016},
  publisher={Springer}
}

@article{ogie2016bring,
  title={Bring Your Own Device: An overview of risk assessment.},
  author={Ogie, Robert},
  journal={Consumer Electronics Magazine, IEEE},
  volume={5},
  number={1},
  pages={114--119},
  year={2016},
  publisher={IEEE}
}

@incollection{lee2016study,
  title={A Study on Realtime Detecting Smishing on Cloud Computing Environments},
  author={Lee, Ayoung and Kim, Kyounghun and Lee, Heeman and Jun, Moonseog},
  booktitle={Advanced Multimedia and Ubiquitous Engineering},
  pages={495--501},
  year={2016},
  publisher={Springer}
}

@incollection{ahmad2016detection,
  title={Detection of Privacy Threat by Peculiar Feature Extraction in Malwares to Combat Targeted Cyber Attacks},
  author={Ahmad, Farhan Habib and Batool, Komal and Javed, Azhar},
  booktitle={Advanced Computer and Communication Engineering Technology},
  pages={1237--1247},
  year={2016},
  publisher={Springer}
}

@Manual{GreenDroidLib2010,
  title =        {Introduction to the GreenDroid Library},
  OPTkey =       {},
  author =    {Cyril Mottier},
  OPTorganization = {},
  OPTaddress =   {},
  OPTedition =   {},
  OPTmonth =     {},
  year =      {2010},
  OPTnote =      {\url{http://cyrilmottier.com/2010/05/14/introduction-to-the-greendroid-library/}},
  OPTannote =    {}
}

@Manual{GreenDroid-ucsd,
  author = {GreenDroid UCSD},
  title =        {GreenDroid Using Dark Silicon to Improve Smartphone
                  Processors},
  OPTkey =       {},
  OPTauthor =    {},
  OPTorganization = {ucsd.edu/},
  OPTaddress =   {},
  OPTedition =   {},
  OPTmonth =     {},
  OPTyear =      {},
  note =      {\url{http://greendroid.ucsd.edu/}},
  OPTannote =    {}
}


@inproceedings{petsas2014,
  title={Rage against the virtual machine: hindering dynamic analysis of android malware},
  author={Petsas, Thanasis and Voyatzis, Giannis and Athanasopoulos, Elias and Polychronakis, Michalis and Ioannidis, Sotiris},
  booktitle={Proceedings of the Seventh European Workshop on System Security},
  pages={5},
  year={2014},
  organization={ACM}
}

@article{sylve2012acquisition,
  title={Acquisition and analysis of volatile memory from android devices},
  author={Sylve, Joe and Case, Andrew and Marziale, Lodovico and Richard, Golden G},
  journal={Digital Investigation},
  volume={8},
  number={3},
  pages={175--184},
  year={2012},
  publisher={Elsevier}, note = {\url{http://www.dfir.org/research/android-memory-analysis-DI.pdf}},
}

@inproceedings{yan2012droidscope,
  title={Droidscope: seamlessly reconstructing the os and dalvik semantic views for dynamic android malware analysis},
  author={Yan, Lok Kwong and Yin, Heng},
  booktitle={Presented as part of the 21st USENIX Security Symposium (USENIX Security 12)},
  pages={569--584},
  year={2012}, note = {\url{https://www.usenix.org/system/files/conference/usenixsecurity12/sec12-final107.pdf}},
}

@article{cho2016mobile,
  title={Mobile application tamper detection scheme using dynamic code injection against repackaging attacks},
  author={Cho, Haehyun and Bang, Jiwoong and Ji, Myeongju and Yi, Jeong Hyun},
  journal={The Journal of Supercomputing},
  pages={1--17},
  year={2016},
  publisher={Springer}
}

@article{feizollah2015review,
  title={A review on feature selection in mobile malware detection},
  author={Feizollah, Ali and Anuar, Nor Badrul and Salleh, Rosli and Wahab, Ainuddin Wahid Abdul},
  journal={Digital Investigation},
  volume={13},
  pages={22--37},
  year={2015},
  publisher={Elsevier}, note = {\url{https://www.researchgate.net/profile/Ali_Feizollah/publication/273479158_A_review_on_feature_selection_in_mobile_malware_detection/links/550469bb0cf24cee3a0019d5.pdf}},
}

@inproceedings{nasim2015uncovering,
  title={Uncovering Self Code Modification in Android},
  author={Nasim, Faisal and Aslam, Baber and Ahmed, Waseem and Naeem, Talha},
  booktitle={International Conference on Codes, Cryptology, and Information Security},
  pages={297--313},
  year={2015},
  organization={Springer}
}

@article{diao2016evading,
  title={Evading Android Runtime Analysis Through Detecting Programmed Interactions},
  author={Diao, Wenrui and Liu, Xiangyu and Li, Zhou and Zhang, Kehuan},
  year={2016}, note = {\url{https://staff.ie.cuhk.edu.hk/~khzhang/my-papers/2016-wisec-antitest.pdf}},
}

@inproceedings{yokoyama2016sandprint,
  title={SandPrint: Fingerprinting Malware Sandboxes to Provide Intelligence for Sandbox Evasion},
  author={Yokoyama, Akira and Ishii, Kou and Tanabe, Rui and Papa, Yinmin and Yoshioka, Katsunari and Matsumoto, Tsutomu and Kasama, Takahiro and Inoue, Daisuke and Brengel, Michael and Backes, Michael and others},
  booktitle={International Symposium on Research in Attacks, Intrusions, and Defenses},
  pages={165--187},
  year={2016},
  organization={Springer}
}

@inproceedings{gajrani2015robust,
  title={A robust dynamic analysis system preventing SandBox detection by Android malware},
  author={Gajrani, Jyoti and Sarswat, Jitendra and Tripathi, Meenakshi and Laxmi, Vijay and Gaur, MS and Conti, Mauro},
  booktitle={Proceedings of the 8th International Conference on Security of Information and Networks},
  pages={290--295},
  year={2015},
  organization={ACM}
}

@article{shabtai2015evaluation,
  title={Evaluation of Security Solutions for Android Systems},
  author={Shabtai, Asaf and Mimran, Dudu and Elovici, Yuval},
  journal={arXiv preprint arXiv:1502.04870},
  year={2015}, note = {\url{http://arxiv.org/pdf/1502.04870.pdf}},
}

@inproceedings{mutti2015baredroid,
  title={BareDroid: Large-Scale Analysis of Android Apps on Real Devices},
  author={Mutti, Simone and Fratantonio, Yanick and Bianchi, Antonio and Invernizzi, Luca and Corbetta, Jacopo and Kirat, Dhilung and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={Proceedings of the 31st Annual Computer Security Applications Conference},
  pages={71--80},
  year={2015},
  organization={ACM}, note = {\url{https://pdfs.semanticscholar.org/ccaa/4e57c5bb4be7c981ae7dace179db7a94a94a.pdf}},
}

@article{maiorca2015stealth,
  title={Stealth attacks: An extended insight into the obfuscation effects on Android malware},
  author={Maiorca, Davide and Ariu, Davide and Corona, Igino and Aresu, Marco and Giacinto, Giorgio},
  journal={Computers \& Security},
  volume={51},
  pages={16--31},
  year={2015},
  publisher={Elsevier}, note = {\url{https://pralab.diee.unica.it/sites/default/files/MaiorcaCoSe2015Final.pdf}},
}

@article{martin2016mocdroid,
  title={MOCDroid: multi-objective evolutionary classifier for Android malware detection},
  author={Mart{\'\i}n, Alejandro and Men{\'e}ndez, H{\'e}ctor D and Camacho, David},
  journal={Soft Computing},
  pages={1--11},
  year={2016},
  publisher={Springer}
}

@inproceedings{schmeelk2015android,
  title={Android Malware Static Analysis Techniques},
  author={Schmeelk, Suzanna and Yang, Junfeng and Aho, Alfred},
  booktitle={Proceedings of the 10th Annual Cyber and Information Security Research Conference},
  pages={5},
  year={2015},
  organization={ACM}
}


@inproceedings{bellini2015mime,
  title={MIME: A Formal Approach to (Android) Emulation Malware Analysis},
  author={Bellini, Fabio and Chiodi, Roberto and Mastroeni, Isabella},
  booktitle={International Symposium on Foundations and Practice of Security},
  pages={259--267},
  year={2015},
  organization={Springer}
}

@inproceedings{gagnon2015androssl,
  title={AndroSSL: A Platform to Test Android Applications Connection Security},
  author={Gagnon, Fran{\c{c}}ois and Ferland, Marc-Antoine and Fortier, Marc-Antoine and Desloges, Simon and Ouellet, Jonathan and Boileau, Catherine},
  booktitle={International Symposium on Foundations and Practice of Security},
  pages={294--302},
  year={2015},
  organization={Springer}, note = {\url{https://www.researchgate.net/profile/Francois_Gagnon2/publication/285579539_AndroSSL_A_Platform_to_Test_Android_Applications_Connection_Security/links/565f58cd08aefe619b289372.pdf}},
}

@article{hussain2016exploring,
  title={Exploring the Potential of Big Data for Malware Detection and Mitigation Techniques in the Android Environment},
  author={Hussain, Rasheed and Kim, Donghyun and Nogueira, Michele and Son, Junggab and Oh, Heekuck},
  journal={Big Data: Storage, Sharing, and Security},
  pages={397},
  year={2016},
  publisher={CRC Press}
}

@inproceedings{xu2016dynamic,
  title={Dynamic Android Malware Classification Using Graph-Based Representations},
  author={Xu, Lifan and Zhang, Dongping and Alvarez, Marco A and Morales, Jose Andre and Ma, Xudong and Cavazos, John},
  booktitle={2016 IEEE 3rd International Conference on Cyber Security and Cloud Computing (CSCloud)},
  pages={220--231},
  year={2016},
  organization={IEEE}, note = {\url{http://www.dongpingzhang.com/wordpress/wp-content/uploads/2012/04/dynamic.pdf}},
}

@inproceedings{rasthofer2015current,
  title={How current android malware seeks to evade automated code analysis},
  author={Rasthofer, Siegfried and Asrar, Irfan and Huber, Stephan and Bodden, Eric},
  booktitle={IFIP International Conference on Information Security Theory and Practice},
  pages={187--202},
  year={2015},
  organization={Springer}, note = {\url{http://www.bodden.de/pubs/rahb15howcurrent.pdf}},
}

@inproceedings{aysan2015you,
  title={" Do You Want to Install an Update of This Application?" A Rigorous Analysis of Updated Android Applications},
  author={Aysan, Ahmet Ilhan and Sen, Sevil},
  booktitle={Cyber Security and Cloud Computing (CSCloud), 2015 IEEE 2nd International Conference on},
  pages={181--186},
  year={2015},
  organization={IEEE}, note = {\url{http://web.cs.hacettepe.edu.tr/~ssen/files/papers/CSCloud15.pdf}},
}

@article{spreitzenbarth2015mobile,
  title={Mobile-Sandbox: combining static and dynamic analysis with machine-learning techniques},
  author={Spreitzenbarth, Michael and Schreck, Thomas and Echtler, Florian and Arp, Daniel and Hoffmann, Johannes},
  journal={International Journal of Information Security},
  volume={14},
  number={2},
  pages={141--153},
  year={2015},
  publisher={Springer}
}

@techreport{rasthofer2015investigation,
  title={An Investigation of the Android/Badaccents Malware which Exploits a New Android Tapjacking Attack},
  author={Rasthofer, Siegfried and Asrar, Irfan and Huber, Stephan and Bodden, Eric},
  year={2015},
  institution={Technical report, TU Darmstadt, Fraunhofer SIT and McAfee Mobile Research}, note = {\url{https://www.informatik.tu-darmstadt.de/fileadmin/user_upload/Group_EC-Spride/Publikationen/BadAccents_TR.pdf}},
}

@inproceedings{abraham2015grodddroid,
  title={GroddDroid: a gorilla for triggering malicious behaviors},
  author={Abraham, Adrien and Andriatsimandefitra, Radoniaina and Brunelat, Adrien and Lalande, J-F and Tong, V Viet Triem},
  booktitle={2015 10th International Conference on Malicious and Unwanted Software (MALWARE)},
  pages={119--127},
  year={2015},
  organization={IEEE}, note = {\url{https://hal.inria.fr/hal-01201743/document}},
}

@article{pomilia2016study,
  title={A study on obfuscation techniques for Android malware},
  author={Pomilia, Matteo},
  year={2016}, note = {\url{http://midlab.diag.uniroma1.it/articoli/matteo_pomilia_master_thesis.pdf}},
}

@inproceedings{xia2015effective,
  title={Effective real-time android application auditing},
  author={Xia, Mingyuan and Gong, Lu and Lyu, Yuanhao and Qi, Zhengwei and Liu, Xue},
  booktitle={2015 IEEE Symposium on Security and Privacy},
  pages={899--914},
  year={2015},
  organization={IEEE}, note = {\url{https://mxia.me/files/appaudit-paper.pdf}},
}

@inproceedings{saad2015android,
  title={Android spyware disease and medication},
  author={Saad, Mustafa Hassan and Serageldin, Ahmed and Salama, Goda Ismaeel},
  booktitle={2015 Second International Conference on Information Security and Cyber Forensics (InfoSec)},
  pages={118--125},
  year={2015},
  organization={IEEE}, note = {\url{https://www.blackhat.com/docs/asia-16/materials/asia-16-Saad-Android-Commercial-Spyware-Disease-And-Medication-wp.pdf}},
}

@phdthesis{rastogi2015towards,
  title={Towards a Trustworthy Android Ecosystem},
  author={Rastogi, Vaibhav},
  year={2015},
  school={NORTHWESTERN UNIVERSITY}, note = {\url{http://pages.cs.wisc.edu/~vrastogi/static/papers/r15.pdf}},
}

@inproceedings{jain2015enriching,
  title={Enriching reverse engineering through visual exploration of Android binaries},
  author={Jain, Ashutosh and Gonzalez, Hugo and Stakhanova, Natalia},
  booktitle={Proceedings of the 5th Program Protection and Reverse Engineering Workshop},
  pages={9},
  year={2015},
  organization={ACM}, note = {\url{http://cs.unb.ca/~natalia/a8_jain.pdf}},
}

@article{coletta2016droydseuss,
  title={DroydSeuss: A Mobile Banking Trojan Tracker-Short Paper},
  author={Coletta, Alberto and Van Der Veen, Victor and Maggi, Federico},
  journal={Financial Cryptography and Data Security, Lecture Notes in Computer Science (LNCS). Springer Berlin Heidelberg},
  volume={1},
  year={2016}, note = {\url{https://www.ifca.ai/fc16/preproceedings/14_Coletta.pdf}},
 annote = {See preti2016 MS Thesis},
}

@MastersThesis{preti2016,
 author={Preti, Leonardo},
  title={Detecting Android malware campaigns via application similarity analysis},
  year={2016},
  publisher={},
  school =       {Politecnico di Milano, Italy},
  OPTkey =       {},
  OPTtype =      {},
  OPTaddress =   {},
  OPTmonth =     {},
  note =      {\url{https://www.politesi.polimi.it/bitstream/10589/119402/3/2016_04_Preti.pdf}},
  annote =    {Supervisor: Prof. Stefano ZANERO, Co-Supervisor: Prof. Federico MAGGI; DroydSeuss}
}

@article{barnhizer2016future,
  title={The Future of Work: Apps, Artificial Intelligence, Automation and Androids},
  author={Barnhizer, David},
  journal={Artificial Intelligence, Automation and Androids (January 15, 2016). Cleveland-Marshall Legal Studies Paper},
  number={289},
  year={2016}
}

@article{zheng2015openst,
  title={OpenST: feasibility study and prototype of a low cost, hardware-based system call tracer},
  author={ZHENG, CHENGYU},
  year={2015},
  publisher={Italy}, note = {\url{https://www.politesi.polimi.it/bitstream/10589/112609/3/2015_10_Zheng.pdf}},
}

@techreport{rasthofer2015harvesting,
  title={Harvesting runtime data in android applications for identifying malware and enhancing code analysis},
  author={Rasthofer, Siegfried and Arzt, Steven and Miltenberger, Marc and Bodden, Eric},
  year={2015},
  institution={Technical Report TUD-CS-2015-0031, EC SPRIDE}, note = {\url{http://www.bodden.de/pubs/TUD-CS-2015-0031.pdf}},
}

@article{conlan2016anti,
  title={Anti-forensics: Furthering digital forensic science through a new extended, granular taxonomy},
  author={Conlan, Kevin and Baggili, Ibrahim and Breitinger, Frank},
  journal={Digital Investigation},
  volume={18},
  pages={S66--S75},
  year={2016},
  publisher={Elsevier}
}

 
